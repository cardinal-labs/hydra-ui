{"version":3,"file":"api.js","sourceRoot":"","sources":["../../src/api.ts"],"names":[],"mappings":";;;AAEA,6CAA8C;AAG9C,wBASW;AAEJ,MAAM,cAAc,GAAG,KAAK,EACjC,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,MAAc,EACd,SAAqB,EACC,EAAE,CACxB,IAAA,UAAO,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;AAP/D,QAAA,cAAc,kBAOiD;AAErE,MAAM,UAAU,GAAG,KAAK,EAC7B,UAAsB,EACtB,MAAc,EACd,MAAiB,EACK,EAAE,CACxB,IAAA,iBAAc,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AALnD,QAAA,UAAU,cAKyC;AAEzD,MAAM,OAAO,GAAG,KAAK,EAC1B,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,mBAA8B,EAC9B,oBAA+B,EACT,EAAE,CACxB,IAAA,cAAW,EACT,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN,MAAM,EACN,mBAAmB,EACnB,oBAAoB,CACrB,CAAC;AAdS,QAAA,OAAO,WAchB;AAEG,MAAM,UAAU,GAAG,KAAK,EAC7B,UAAsB,EACtB,MAAc,EACd,gBAAiC,EACuB,EAAE,CAC1D,IAAA,iBAAc,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;AAL7D,QAAA,UAAU,cAKmD;AAEnE,MAAM,YAAY,GAAG,KAAK,EAC/B,UAAsB,EACtB,MAAc,EACd,MAAiB,EACK,EAAE,CACxB,IAAA,mBAAgB,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AALrD,QAAA,YAAY,gBAKyC;AAE3D,MAAM,UAAU,GAAG,KAAK,EAC7B,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,iBAEC,EACqB,EAAE,CACxB,IAAA,iBAAc,EACZ,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN,cAAc,EACd,iBAAiB,CAClB,CAAC;AAdS,QAAA,UAAU,cAcnB;AAEG,MAAM,gBAAgB,GAAG,KAAK,EACnC,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,aAAqB,EACC,EAAE,CACxB,IAAA,uBAAoB,EAClB,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN,cAAc,EACd,aAAa,CACd,CAAC;AAZS,QAAA,gBAAgB,oBAYzB;AAEG,MAAM,YAAY,GAAG,KAAK,EAC/B,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,WAAmB,EACG,EAAE,CACxB,IAAA,mBAAgB,EACd,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN,cAAc,EACd,WAAW,CACZ,CAAC;AAZS,QAAA,YAAY,gBAYrB","sourcesContent":["import type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { Transaction } from \"@solana/web3.js\";\n\nimport type { IssueParameters } from \".\";\nimport {\n  withClaimToken,\n  withExtendExpiration,\n  withExtendUsages,\n  withInvalidate,\n  withIssueToken,\n  withRelease,\n  withUnissueToken,\n  withUse,\n} from \".\";\n\nexport const useTransaction = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  usages: number,\n  collector?: PublicKey\n): Promise<Transaction> =>\n  withUse(new Transaction(), connection, wallet, mintId, usages, collector);\n\nexport const invalidate = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<Transaction> =>\n  withInvalidate(new Transaction(), connection, wallet, mintId);\n\nexport const release = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  transferAuthorityId: PublicKey,\n  listerTokenAccountId: PublicKey\n): Promise<Transaction> =>\n  withRelease(\n    new Transaction(),\n    connection,\n    wallet,\n    mintId,\n    transferAuthorityId,\n    listerTokenAccountId\n  );\n\nexport const issueToken = async (\n  connection: Connection,\n  wallet: Wallet,\n  rentalParameters: IssueParameters\n): Promise<[Transaction, PublicKey, Keypair | undefined]> =>\n  withIssueToken(new Transaction(), connection, wallet, rentalParameters);\n\nexport const unissueToken = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<Transaction> =>\n  withUnissueToken(new Transaction(), connection, wallet, mintId);\n\nexport const claimToken = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  additionalOptions?: {\n    payer?: PublicKey;\n  }\n): Promise<Transaction> =>\n  withClaimToken(\n    new Transaction(),\n    connection,\n    wallet,\n    tokenManagerId,\n    additionalOptions\n  );\n\nexport const extendExpiration = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  paymentAmount: number\n): Promise<Transaction> =>\n  withExtendExpiration(\n    new Transaction(),\n    connection,\n    wallet,\n    tokenManagerId,\n    paymentAmount\n  );\n\nexport const extendUsages = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  usagesToAdd: number\n): Promise<Transaction> =>\n  withExtendUsages(\n    new Transaction(),\n    connection,\n    wallet,\n    tokenManagerId,\n    usagesToAdd\n  );\n"]}