{"version":3,"file":"rentals.js","sourceRoot":"","sources":["../../src/rentals.ts"],"names":[],"mappings":";;;AAEA,6CAA8C;AAG9C,wBAAyE;AAEzE;;;;;;GAMG;AACI,MAAM,YAAY,GAAG,KAAK,EAC/B,UAAsB,EACtB,MAAc,EACd,gBAAiC,EACuB,EAAE,CAC1D,IAAA,iBAAc,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;AAL7D,QAAA,YAAY,gBAKiD;AAEnE,MAAM,WAAW,GAAG,KAAK,EAC9B,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,KAAiB,EACK,EAAE,CACxB,IAAA,iBAAc,EAAC,IAAI,qBAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,cAAc,EAAE;IACpE,KAAK;CACN,CAAC,CAAC;AARQ,QAAA,WAAW,eAQnB;AAEE,MAAM,sBAAsB,GAAG,KAAK,EACzC,UAAsB,EACtB,MAAc,EACd,cAAyB,EACzB,YAAoB,EACE,EAAE,CACxB,IAAA,uBAAoB,EAClB,IAAI,qBAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN,cAAc,EACd,YAAY,CACb,CAAC;AAZS,QAAA,sBAAsB,0BAY/B","sourcesContent":["import type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { Connection, Keypair, PublicKey } from \"@solana/web3.js\";\nimport { Transaction } from \"@solana/web3.js\";\n\nimport type { IssueParameters } from \".\";\nimport { withClaimToken, withExtendExpiration, withIssueToken } from \".\";\n\n/**\n * Main method for creating any kind of rental\n * Allows for optional payment, optional usages or expiration and includes a otp for private links\n * @param connection\n * @param wallet\n * @returns Transaction, public key for the created token manager and a otp if necessary for private links\n */\nexport const createRental = async (\n  connection: Connection,\n  wallet: Wallet,\n  rentalParameters: IssueParameters\n): Promise<[Transaction, PublicKey, Keypair | undefined]> =>\n  withIssueToken(new Transaction(), connection, wallet, rentalParameters);\n\nexport const claimRental = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  payer?: PublicKey\n): Promise<Transaction> =>\n  withClaimToken(new Transaction(), connection, wallet, tokenManagerId, {\n    payer,\n  });\n\nexport const extendRentalExpiration = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  secondsToAdd: number\n): Promise<Transaction> =>\n  withExtendExpiration(\n    new Transaction(),\n    connection,\n    wallet,\n    tokenManagerId,\n    secondsToAdd\n  );\n"]}