{"version":3,"file":"marketplace.js","sourceRoot":"","sources":["../../src/marketplace.ts"],"names":[],"mappings":";;;AAAA,6CAQ0B;AAC1B,+DAAoE;AACpE,0EAAgF;AAChF,gEAAmF;AACnF,oEAA8G;AAE9G,sEAAmF;AACnF,iDAG2B;AAE3B,6CAKyB;AAGzB,0DAOiC;AACjC,+DAAmE;AACnE,qDAIqC;AACrC,oEAGsC;AACtC,oEAG+C;AAC/C,0DAK0C;AAC1C,+CAA+C;AAExC,MAAM,aAAa,GAAG,KAAK,EAChC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,qBAGC,EACD,KAAK,GAAG,MAAM,CAAC,SAAS,EACW,EAAE;IACrC,MAAM,gBAAgB,GAAG,IAAA,kCAAmB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACjE,MAAM,cAAc,GAAG,IAAA,6BAAuB,EAAC,MAAM,CAAC,CAAC;IACvD,MAAM,iBAAiB,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CACjD,IAAA,0BAAe,EAAC,UAAU,EAAE,cAAc,CAAC,CAC5C,CAAC;IACF,IAAI,iBAAiB,aAAjB,iBAAiB,uBAAjB,iBAAiB,CAAE,MAAM,EAAE;QAC7B,MAAM,0BAA0B,CAAC;KAClC;IACD,MAAM,oBAAoB,GAAG,MAAM,IAAA,gBAAO,EAAC,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC3E,IAAI,IAAI,GAAG,+BAAgB,CAAC,OAAO,CAAC;IACpC,MAAM,eAAe,GAAG,IAAA,0BAAiB,EAAC,MAAM,CAAC,CAAC;IAClD,MAAM,WAAW,GAAG,MAAM,UAAU,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;IACrE,IAAI,CAAC,WAAW;QAAE,IAAI,GAAG,+BAAgB,CAAC,YAAY,CAAC;IAEvD,MAAM,IAAA,4BAAc,EAClB,WAAW,EACX,UAAU,EACV,MAAM,EACN;QACE,IAAI,EAAE,MAAM;QACZ,gBAAgB,EAAE,+BAAgB,CAAC,OAAO;QAC1C,oBAAoB,EAAE,oBAAoB;QAC1C,IAAI,EAAE,IAAI;QACV,qBAAqB,EAAE,qBAAqB;YAC1C,CAAC,CAAC;gBACE,qBAAqB,EAAE,qBAAqB,CAAC,qBAAqB;gBAClE,OAAO,EAAE,qBAAqB,CAAC,OAAO;aACvC;YACH,CAAC,CAAC,SAAS;KACd,EACD,KAAK,CACN,CAAC;IAEF,MAAM,0BAA0B,GAAG,MAAM,IAAA,gBAAO,EAC9C,MAAM,EACN,cAAc,EACd,IAAI,CACL,CAAC;IACF,MAAM,uBAAuB,GAAG,MAAM,IAAA,6CAAoC,EACxE,WAAW,EACX,UAAU,EACV,MAAM,EACN,MAAM,CAAC,SAAS,EAChB,KAAK,EACL,IAAI,CACL,CAAC;IAEF,MAAM,iBAAiB,GAAG,IAAA,0CAA2B,EAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IACpE,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,OAAO;SAC3C,KAAK,EAAE;SACP,QAAQ,CAAC;QACR,YAAY,EAAE,cAAc;QAC5B,wBAAwB,EAAE,0BAA0B;QACpD,IAAI,EAAE,MAAM;QACZ,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,qBAAqB,EAAE,uBAAuB;QAC9C,YAAY,EAAE,4BAAgB;QAC9B,aAAa,EAAE,uBAAa,CAAC,SAAS;KACvC,CAAC;SACD,iBAAiB,CAAC,iBAAiB,CAAC;SACpC,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IAEzB,OAAO,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;AACvC,CAAC,CAAC;AA3EW,QAAA,aAAa,iBA2ExB;AAEK,MAAM,yBAAyB,GAAG,KAAK,EAC5C,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,IAAY,EACZ,SAAS,GAAG,MAAM,CAAC,SAAS,EAC5B,KAAK,GAAG,MAAM,CAAC,SAAS,EACxB,mBAAiC,EACE,EAAE;IACrC,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,mBAAmB,GAAG,IAAA,kCAA4B,EAAC,IAAI,CAAC,CAAC;IAE/D,MAAM,uBAAuB,GAAG,MAAM,mBAAmB,CAAC,OAAO;SAC9D,qBAAqB,CAAC;QACrB,IAAI,EAAE,IAAI;QACV,SAAS,EAAE,SAAS;QACpB,mBAAmB,EAAE,mBAAmB,aAAnB,mBAAmB,cAAnB,mBAAmB,GAAI,IAAI;KACjD,CAAC;SACD,QAAQ,CAAC;QACR,iBAAiB,EAAE,mBAAmB;QACtC,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,MAAM,CAAC,SAAS;QAChC,aAAa,EAAE,uBAAa,CAAC,SAAS;KACvC,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACzC,OAAO,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;AAC5C,CAAC,CAAC;AA1BW,QAAA,yBAAyB,6BA0BpC;AAEK,MAAM,2BAA2B,GAAG,KAAK,EAC9C,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,IAAY,EACZ,SAAoB,EACpB,mBAAiC,EACX,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,mBAAmB,GAAG,IAAA,kCAA4B,EAAC,IAAI,CAAC,CAAC;IAE/D,MAAM,yBAAyB,GAAG,MAAM,mBAAmB,CAAC,OAAO;SAChE,uBAAuB,CAAC;QACvB,SAAS,EAAE,SAAS;QACpB,mBAAmB,EAAE,mBAAmB;KACzC,CAAC;SACD,QAAQ,CAAC;QACR,iBAAiB,EAAE,mBAAmB;QACtC,SAAS,EAAE,SAAS;KACrB,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;IAC3C,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAvBW,QAAA,2BAA2B,+BAuBtC;AAEK,MAAM,mBAAmB,GAAG,KAAK,EACtC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,IAAY,EACZ,kBAA0B,EAC1B,YAA0B,EAC1B,KAAK,GAAG,MAAM,CAAC,SAAS,EACW,EAAE;IACrC,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,aAAa,GAAG,IAAA,4BAAsB,EAAC,IAAI,CAAC,CAAC;IACnD,MAAM,gBAAgB,GAAG,IAAA,+BAAyB,EAAC,kBAAkB,CAAC,CAAC;IAEvE,MAAM,iBAAiB,GAAG,MAAM,mBAAmB,CAAC,OAAO;SACxD,eAAe,CAAC;QACf,IAAI,EAAE,IAAI;QACV,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,YAAY,EAAE,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,IAAI;KACnC,CAAC;SACD,QAAQ,CAAC;QACR,WAAW,EAAE,aAAa;QAC1B,cAAc,EAAE,gBAAgB;QAChC,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,MAAM,CAAC,SAAS;QAChC,aAAa,EAAE,uBAAa,CAAC,SAAS;KACvC,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACnC,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;AACtC,CAAC,CAAC;AA5BW,QAAA,mBAAmB,uBA4B9B;AAEK,MAAM,qBAAqB,GAAG,KAAK,EACxC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,IAAY,EACZ,kBAA0B,EAC1B,SAAoB,EACpB,YAAyB,EACH,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,aAAa,GAAG,IAAA,4BAAsB,EAAC,IAAI,CAAC,CAAC;IACnD,MAAM,gBAAgB,GAAG,IAAA,+BAAyB,EAAC,kBAAkB,CAAC,CAAC;IAEvE,MAAM,mBAAmB,GAAG,MAAM,mBAAmB,CAAC,OAAO;SAC1D,iBAAiB,CAAC;QACjB,cAAc,EAAE,gBAAgB;QAChC,SAAS,EAAE,SAAS;QACpB,YAAY,EAAE,YAAY;KAC3B,CAAC;SACD,QAAQ,CAAC;QACR,WAAW,EAAE,aAAa;QAC1B,SAAS,EAAE,SAAS;KACrB,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;IACrC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AA1BW,QAAA,qBAAqB,yBA0BhC;AAEK,MAAM,iBAAiB,GAAG,KAAK,EACpC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,eAAuB,EACvB,aAAiB,EACjB,WAAW,GAAG,mBAAS,CAAC,OAAO,EAC/B,KAAK,GAAG,MAAM,CAAC,SAAS,EACW,EAAE;IACrC,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,SAAS,GAAG,IAAA,wBAAkB,EAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,cAAc,GAAG,IAAA,6BAAuB,EAAC,MAAM,CAAC,CAAC;IACvD,MAAM,oBAAoB,GAAG,MAAM,IAAA,gBAAO,EAAC,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;IAC3E,MAAM,aAAa,GAAG,IAAA,4BAAsB,EAAC,eAAe,CAAC,CAAC;IAC9D,MAAM,gBAAgB,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CAChD,IAAA,0BAAe,EAAC,UAAU,EAAE,cAAc,CAAC,CAC5C,CAAC;IACF,IAAI,CAAC,CAAA,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,MAAM,CAAA,EAAE;QAC7B,MAAM,kCAAkC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC;KACnE;IACD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,EAAE;QAC9C,MAAM,yCAAyC,CAAC;KACjD;IACD,MAAM,YAAY,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CAC5C,IAAA,qBAAU,EAAC,UAAU,EAAE,SAAS,CAAC,CAClC,CAAC;IACF,IAAI,YAAY,EAAE;QAChB,WAAW,CAAC,GAAG,CACb,MAAM,IAAA,yBAAiB,EACrB,WAAW,EACX,UAAU,EACV,MAAM,EACN,MAAM,EACN,aAAa,EACb,aAAa,EACb,WAAW,CACZ,CACF,CAAC;KACH;SAAM;QACL,MAAM,aAAa,GAAG,IAAA,uBAAiB,EAAC,MAAM,CAAC,CAAC;QAChD,MAAM,eAAe,GAAG,MAAM,mBAAmB,CAAC,OAAO;aACtD,aAAa,CAAC;YACb,aAAa,EAAE,aAAa;YAC5B,WAAW,EAAE,WAAW;SACzB,CAAC;aACD,QAAQ,CAAC;YACR,OAAO,EAAE,SAAS;YAClB,iBAAiB,EAAE,gBAAgB,CAAC,MAAM,CAAC,iBAAiB;YAC5D,WAAW,EAAE,aAAa;YAC1B,YAAY,EAAE,cAAc;YAC5B,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE,aAAa;YAC1B,kBAAkB,EAAE,oBAAoB;YACxC,MAAM,EAAE,MAAM,CAAC,SAAS;YACxB,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,MAAM,CAAC,SAAS;YAChC,oBAAoB,EAAE,oCAAqB;YAC3C,YAAY,EAAE,4BAAgB;YAC9B,aAAa,EAAE,uBAAa,CAAC,SAAS;YACtC,YAAY,EAAE,oCAA0B;SACzC,CAAC;aACD,WAAW,EAAE,CAAC;QACjB,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;KAClC;IAED,OAAO,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;AACtC,CAAC,CAAC;AAlEW,QAAA,iBAAiB,qBAkE5B;AAEK,MAAM,iBAAiB,GAAG,KAAK,EACpC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,aAAwB,EACxB,aAAiB,EACjB,WAAsB,EACA,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,WAAW,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CAAC,IAAA,qBAAU,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;IAC9E,IAAI,CAAC,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,CAAA,EAAE;QACxB,MAAM,qCAAqC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;KAChE;IACD,MAAM,wBAAwB,GAAG,MAAM,IAAA,gBAAO,EAC5C,MAAM,EACN,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAEF,MAAM,SAAS,GAAG,IAAA,wBAAkB,EAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,eAAe,GAAG,MAAM,mBAAmB,CAAC,OAAO;SACtD,aAAa,CAAC;QACb,WAAW,EAAE,aAAa;QAC1B,aAAa,EAAE,aAAa;QAC5B,WAAW,EAAE,WAAW;KACzB,CAAC;SACD,QAAQ,CAAC;QACR,YAAY,EAAE,WAAW,CAAC,MAAM,CAAC,YAAY;QAC7C,OAAO,EAAE,SAAS;QAClB,sBAAsB,EAAE,wBAAwB;QAChD,MAAM,EAAE,MAAM,CAAC,SAAS;KACzB,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACjC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AApCW,QAAA,iBAAiB,qBAoC5B;AAEK,MAAM,iBAAiB,GAAG,KAAK,EACpC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,wBAAmC,EACb,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,SAAS,GAAG,IAAA,wBAAkB,EAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,cAAc,GAAG,IAAA,6BAAuB,EAAC,MAAM,CAAC,CAAC;IACvD,MAAM,aAAa,GAAG,IAAA,uBAAiB,EAAC,MAAM,CAAC,CAAC;IAEhD,MAAM,eAAe,GAAG,MAAM,mBAAmB,CAAC,OAAO;SACtD,aAAa,EAAE;SACf,QAAQ,CAAC;QACR,YAAY,EAAE,cAAc;QAC5B,OAAO,EAAE,SAAS;QAClB,sBAAsB,EAAE,wBAAwB;QAChD,MAAM,EAAE,MAAM,CAAC,SAAS;QACxB,IAAI,EAAE,MAAM;QACZ,WAAW,EAAE,aAAa;QAC1B,oBAAoB,EAAE,oCAAqB;QAC3C,YAAY,EAAE,4BAAgB;KAC/B,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACjC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AA3BW,QAAA,iBAAiB,qBA2B5B;AAEK,MAAM,iBAAiB,GAAG,KAAK,EACpC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,KAAgB,EAChB,MAAiB,EACjB,aAAiB,EACjB,WAAsB,EACtB,eAA2B,EAC3B,KAAK,GAAG,KAAK,EACS,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,WAAW,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CAAC,IAAA,qBAAU,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;IAC9E,IAAI,CAAC,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,CAAA,EAAE;QACxB,MAAM,iCAAiC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;KAC5D;IACD,MAAM,eAAe,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CAC/C,IAAA,yBAAc,EAAC,UAAU,EAAE,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAC3D,CAAC;IACF,IAAI,CAAC,CAAA,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,MAAM,CAAA,EAAE;QAC5B,MAAM,gCAAgC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;KAC3D;IACD,MAAM,kBAAkB,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CAClD,IAAA,4BAAiB,EAAC,UAAU,EAAE,eAAe,CAAC,MAAM,CAAC,cAAc,CAAC,CACrE,CAAC;IACF,IAAI,CAAC,CAAA,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,MAAM,CAAA,EAAE;QAC/B,MAAM,sDAAsD,eAAe,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;KAC3F;IACD,MAAM,aAAa,GAAG,WAAW,CAAC,QAAQ,EAAE,KAAK,mBAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;IAE9E,MAAM,2BAA2B,GAAG,aAAa;QAC/C,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM;QAC3B,CAAC,CAAC,MAAM,IAAA,6CAAoC,EACxC,WAAW,EACX,UAAU,EACV,WAAW,CAAC,MAAM,CAAC,WAAW,EAC9B,WAAW,CAAC,MAAM,CAAC,MAAM,EACzB,MAAM,CAAC,SAAS,CACjB,CAAC;IAEN,MAAM,wBAAwB,GAAG,MAAM,IAAA,gBAAO,EAC5C,MAAM,EACN,WAAW,CAAC,MAAM,CAAC,MAAM,EACzB,IAAI,CACL,CAAC;IAEF,MAAM,0BAA0B,GAAG,aAAa;QAC9C,CAAC,CAAC,KAAK;QACP,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,QAAQ,EAAE;YAC3D,CAAC,CAAC,MAAM,IAAA,6CAAoC,EACxC,WAAW,EACX,UAAU,EACV,WAAW,CAAC,MAAM,CAAC,WAAW,EAC9B,KAAK,EACL,MAAM,CAAC,SAAS,CACjB;YACH,CAAC,CAAC,2BAA2B,CAAC;IAEhC,IAAI,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,6BAAS,CAAC,QAAQ,EAAE,EAAE;QACtE,MAAM,IAAA,oBAAW,EACf,WAAW,EACX,UAAU,EACV,IAAA,oBAAW,EAAC,KAAK,CAAC,EAClB,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,EAAE,EAC3C,IAAI,CACL,CAAC;KACH;IAED,MAAM,uBAAuB,GAC3B,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,QAAQ,EAAE;QACvD,CAAC,CAAC,MAAM,IAAA,gBAAO,EAAC,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC;QACpC,CAAC,CAAC,MAAM,IAAA,6CAAoC,EACxC,WAAW,EACX,UAAU,EACV,MAAM,EACN,KAAK,EACL,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAER,MAAM,0BAA0B,GAAG,aAAa;QAC9C,CAAC,CAAC,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,MAAM,CAAC,YAAY;QACzC,CAAC,CAAC,MAAM,IAAA,6CAAoC,EACxC,WAAW,EACX,UAAU,EACV,WAAW,CAAC,MAAM,CAAC,WAAW,EAC9B,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,MAAM,CAAC,YAAY,EACvC,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;IAEN,MAAM,cAAc,GAAG,IAAA,2BAAkB,EAAC,MAAM,CAAC,CAAC;IAClD,MAAM,cAAc,GAAG,IAAA,6BAAuB,EAAC,MAAM,CAAC,CAAC;IACvD,MAAM,iBAAiB,GAAG,IAAA,2BAAqB,EAAC,cAAc,CAAC,CAAC;IAEhE,MAAM,8CAA8C,GAClD,MAAM,IAAA,0DAAkD,EACtD,WAAW,EACX,UAAU,EACV,MAAM,EACN,MAAM,EACN,WAAW,CAAC,MAAM,CAAC,WAAW,EAC9B,eAAe,EACf,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,QAAQ,EAAE,CAAC,CACzD,CAAC;IAEJ,MAAM,gBAAgB,GAAG,MAAM,IAAA,0BAAe,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IAC3E,IAAI,CAAC,gBAAgB,EAAE;QACrB,MAAM,8BAA8B,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;KACzD;IACD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,EAAE;QAC9C,MAAM,yCAAyC,CAAC;KACjD;IACD,MAAM,wBAAwB,GAAG,IAAA,0CAA2B,EAC1D,MAAM,EACN,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAC7B,CAAC;IACF,MAAM,iBAAiB,GAAkB;QACvC,GAAG,8CAA8C;QACjD,GAAG,wBAAwB;KAC5B,CAAC;IAEF,IACE,CAAC,aAAa,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACtE,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,EACpE;QACA,MAAM,6CAA6C,CAAC;KACrD;IAED,MAAM,eAAe,GAAG,MAAM,mBAAmB,CAAC,OAAO;SACtD,aAAa,CAAC;QACb,aAAa,EAAE,aAAa;KAC7B,CAAC;SACD,QAAQ,CAAC;QACR,iBAAiB,EAAE,gBAAgB,CAAC,MAAM,CAAC,iBAAiB;QAC5D,eAAe,EAAE,iBAAiB;QAClC,OAAO,EAAE,WAAW,CAAC,MAAM;QAC3B,yBAAyB,EAAE,2BAA2B;QACtD,sBAAsB,EAAE,wBAAwB;QAChD,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,MAAM;QACjC,qBAAqB,EAAE,uBAAuB;QAC9C,KAAK,EAAE,KAAK;QACZ,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,KAAK;QACrB,wBAAwB,EAAE,0BAA0B;QACpD,WAAW,EAAE,eAAe,CAAC,MAAM;QACnC,YAAY,EAAE,gBAAgB,CAAC,MAAM;QACrC,IAAI,EAAE,gBAAgB,CAAC,MAAM,CAAC,IAAI;QAClC,gBAAgB,EAAE,cAAc;QAChC,cAAc,EAAE,eAAe,CAAC,MAAM,CAAC,cAAc;QACrD,WAAW,EAAE,WAAW;QACxB,wBAAwB,EAAE,0BAA0B;QACpD,YAAY,EAAE,kBAAkB,CAAC,MAAM,CAAC,YAAY;QACpD,sBAAsB,EAAE,yCAAuB;QAC/C,oBAAoB,EAAE,oCAAqB;QAC3C,sBAAsB,EAAE,6BAAqB;QAC7C,YAAY,EAAE,4BAAgB;QAC9B,aAAa,EAAE,uBAAa,CAAC,SAAS;QACtC,YAAY,EAAE,oCAA0B;KACzC,CAAC;SACD,iBAAiB,CAAC,iBAAiB,CAAC;SACpC,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAEjC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AApKW,QAAA,iBAAiB,qBAoK5B;AAEK,MAAM,yBAAyB,GAAG,KAAK,EAC5C,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,qBAA6B,EAC7B,gBAA0B,EACJ,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,iBAAiB,GAAG,IAAA,kCAA4B,EAAC,qBAAqB,CAAC,CAAC;IAE9E,MAAM,cAAc,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACnD,IAAA,4BAAsB,EAAC,IAAI,CAAC,CAC7B,CAAC;IAEF,MAAM,sBAAsB,GAAG,MAAM,mBAAmB,CAAC,OAAO;SAC7D,qBAAqB,CAAC;QACrB,mBAAmB,EAAE,cAAc;KACpC,CAAC;SACD,QAAQ,CAAC;QACR,iBAAiB,EAAE,iBAAiB;QACpC,SAAS,EAAE,MAAM,CAAC,SAAS;KAC5B,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IACxC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAzBW,QAAA,yBAAyB,6BAyBpC;AAEK,MAAM,gBAAgB,GAAG,KAAK,EACnC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,EAAa,EACb,MAAiB,EACjB,oBAA+B,EAC/B,KAAK,GAAG,MAAM,CAAC,SAAS,EACF,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,UAAU,GAAG,IAAA,yBAAmB,EAAC,MAAM,CAAC,CAAC;IAC/C,MAAM,cAAc,GAAG,IAAA,6BAAuB,EAAC,MAAM,CAAC,CAAC;IAEvD,MAAM,cAAc,GAAG,MAAM,mBAAmB,CAAC,OAAO;SACrD,YAAY,CAAC;QACZ,EAAE,EAAE,EAAE;KACP,CAAC;SACD,QAAQ,CAAC;QACR,QAAQ,EAAE,UAAU;QACpB,YAAY,EAAE,cAAc;QAC5B,kBAAkB,EAAE,oBAAoB;QACxC,MAAM,EAAE,MAAM,CAAC,SAAS;QACxB,KAAK,EAAE,KAAK,aAAL,KAAK,cAAL,KAAK,GAAI,MAAM,CAAC,SAAS;QAChC,aAAa,EAAE,uBAAa,CAAC,SAAS;KACvC,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAChC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AA5BW,QAAA,gBAAgB,oBA4B3B;AAEK,MAAM,kBAAkB,GAAG,KAAK,EACrC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACK,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,UAAU,GAAG,IAAA,yBAAmB,EAAC,MAAM,CAAC,CAAC;IAC/C,MAAM,cAAc,GAAG,IAAA,6BAAuB,EAAC,MAAM,CAAC,CAAC;IACvD,MAAM,iBAAiB,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CACjD,IAAA,0BAAe,EAAC,UAAU,EAAE,cAAc,CAAC,CAC5C,CAAC;IACF,IAAI,CAAC,iBAAiB,EAAE;QACtB,MAAM,sCAAsC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;KACjE;IAED,MAAM,gBAAgB,GAAG,MAAM,mBAAmB,CAAC,OAAO;SACvD,cAAc,EAAE;SAChB,QAAQ,CAAC;QACR,QAAQ,EAAE,UAAU;QACpB,YAAY,EAAE,cAAc;QAC5B,kBAAkB,EAAE,iBAAiB,CAAC,MAAM,CAAC,qBAAqB;QAClE,MAAM,EAAE,MAAM,CAAC,SAAS;KACzB,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAClC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AA3BW,QAAA,kBAAkB,sBA2B7B;AAEK,MAAM,kBAAkB,GAAG,KAAK,EACrC,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,SAAoB,EACpB,MAAiB,EACK,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,UAAU,GAAG,IAAA,yBAAmB,EAAC,MAAM,CAAC,CAAC;IAC/C,MAAM,cAAc,GAAG,IAAA,6BAAuB,EAAC,MAAM,CAAC,CAAC;IACvD,MAAM,iBAAiB,GAAG,IAAA,2BAAqB,EAAC,cAAc,CAAC,CAAC;IAChE,MAAM,SAAS,GAAG,IAAA,wBAAkB,EAAC,MAAM,CAAC,CAAC;IAC7C,MAAM,gBAAgB,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CAChD,IAAA,0BAAe,EAAC,UAAU,EAAE,cAAc,CAAC,CAC5C,CAAC;IACF,IAAI,CAAC,gBAAgB,EAAE;QACrB,MAAM,mCAAmC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;KAC9D;IACD,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,iBAAiB,EAAE;QAC9C,MAAM,0CAA0C,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;KACrE;IACD,MAAM,uBAAuB,GAAG,MAAM,IAAA,gBAAO,EAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;IACvE,MAAM,4BAA4B,GAAG;QACnC,GAAG,IAAA,0CAA2B,EAAC,MAAM,EAAE,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC;QACpE;YACE,MAAM,EAAE,iBAAiB;YACzB,QAAQ,EAAE,KAAK;YACf,UAAU,EAAE,IAAI;SACjB;KACF,CAAC;IAEF,MAAM,iBAAiB,GAAG,MAAM,mBAAmB,CAAC,OAAO;SACxD,cAAc,EAAE;SAChB,QAAQ,CAAC;QACR,QAAQ,EAAE,UAAU;QACpB,iBAAiB,EAAE,gBAAgB,CAAC,MAAM,CAAC,iBAAiB;QAC5D,eAAe,EAAE,iBAAiB;QAClC,OAAO,EAAE,SAAS;QAClB,YAAY,EAAE,cAAc;QAC5B,IAAI,EAAE,MAAM;QACZ,qBAAqB,EAAE,uBAAuB;QAC9C,SAAS,EAAE,SAAS;QACpB,KAAK,EAAE,MAAM,CAAC,SAAS;QACvB,kBAAkB,EAAE,gBAAgB,CAAC,MAAM,CAAC,qBAAqB;QACjE,MAAM,EAAE,MAAM;QACd,oBAAoB,EAAE,oCAAqB;QAC3C,sBAAsB,EAAE,uCAA2B;QACnD,YAAY,EAAE,4BAAgB;QAC9B,aAAa,EAAE,uBAAa,CAAC,SAAS;QACtC,IAAI,EAAE,4BAAkB;QACxB,YAAY,EAAE,oCAA0B;KACzC,CAAC;SACD,iBAAiB,CAAC,4BAA4B,CAAC;SAC/C,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACnC,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AAzDW,QAAA,kBAAkB,sBAyD7B;AAEK,MAAM,WAAW,GAAG,KAAK,EAC9B,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,MAAiB,EACjB,mBAA8B,EAC9B,oBAA+B,EAC/B,KAAK,GAAG,MAAM,CAAC,SAAS,EACF,EAAE;IACxB,MAAM,mBAAmB,GAAG,IAAA,4CAAwB,EAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACzE,MAAM,cAAc,GAAG,IAAA,6BAAuB,EAAC,MAAM,CAAC,CAAC;IACvD,MAAM,iBAAiB,GAAG,MAAM,IAAA,sBAAa,EAAC,GAAG,EAAE,CACjD,IAAA,0BAAe,EAAC,UAAU,EAAE,cAAc,CAAC,CAC5C,CAAC;IACF,IAAI,CAAC,iBAAiB,EAAE;QACtB,MAAM,sCAAsC,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;KACjE;IACD,MAAM,0BAA0B,GAAG,MAAM,IAAA,6CAAoC,EAC3E,WAAW,EACX,UAAU,EACV,MAAM,EACN,cAAc,EACd,KAAK,EACL,IAAI,CACL,CAAC;IACF,MAAM,gBAAgB,GAAG,MAAM,IAAA,0BAAe,EAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IAC3E,MAAM,wBAAwB,GAAG,IAAA,0CAA2B,EAC1D,MAAM,EACN,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAC7B,CAAC;IACF,MAAM,0BAA0B,GAAG,MAAM,IAAA,6CAA8B,EACrE,WAAW,EACX,UAAU,EACV,MAAM,EACN,gBAAgB,CACjB,CAAC;IAEF,MAAM,SAAS,GAAG,MAAM,mBAAmB,CAAC,OAAO;SAChD,OAAO,EAAE;SACT,QAAQ,CAAC;QACR,iBAAiB,EAAE,mBAAmB;QACtC,YAAY,EAAE,cAAc;QAC5B,IAAI,EAAE,MAAM;QACZ,wBAAwB,EAAE,0BAA0B;QACpD,kBAAkB,EAAE,oBAAoB;QACxC,MAAM,EAAE,MAAM,CAAC,SAAS;QACxB,SAAS,EAAE,MAAM,CAAC,SAAS;QAC3B,oBAAoB,EAAE,oCAAqB;QAC3C,YAAY,EAAE,4BAAgB;QAC9B,IAAI,EAAE,4BAAkB;KACzB,CAAC;SACD,iBAAiB,CAAC;QACjB,GAAG,wBAAwB;QAC3B,GAAG,0BAA0B;KAC9B,CAAC;SACD,WAAW,EAAE,CAAC;IACjB,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IAC3B,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC;AA1DW,QAAA,WAAW,eA0DtB","sourcesContent":["import {\n  emptyWallet,\n  findAta,\n  findMintEditionId,\n  findMintMetadataId,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n  withWrapSol,\n} from \"@cardinal/common\";\nimport { PAYMENT_MANAGER_ADDRESS } from \"@cardinal/payment-manager\";\nimport { getPaymentManager } from \"@cardinal/payment-manager/dist/cjs/accounts\";\nimport { findPaymentManagerAddress } from \"@cardinal/payment-manager/dist/cjs/pda\";\nimport { withRemainingAccountsForHandlePaymentWithRoyalties } from \"@cardinal/payment-manager/dist/cjs/utils\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport { ASSOCIATED_PROGRAM_ID } from \"@project-serum/anchor/dist/cjs/utils/token\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type { AccountMeta, Connection, Transaction } from \"@solana/web3.js\";\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\nimport type BN from \"bn.js\";\n\nimport {\n  getRemainingAccountsForKind,\n  InvalidationType,\n  TOKEN_MANAGER_ADDRESS,\n  TokenManagerKind,\n  tokenManagerProgram,\n  withRemainingAccountsForReturn,\n} from \"./programs/tokenManager\";\nimport { getTokenManager } from \"./programs/tokenManager/accounts\";\nimport {\n  findMintManagerId,\n  findTokenManagerAddress,\n  findTransferReceiptId,\n} from \"./programs/tokenManager/pda\";\nimport {\n  transferAuthorityProgram,\n  WSOL_MINT,\n} from \"./programs/transferAuthority\";\nimport {\n  getListing,\n  getMarketplace,\n} from \"./programs/transferAuthority/accounts\";\nimport {\n  findListingAddress,\n  findMarketplaceAddress,\n  findTransferAddress,\n  findTransferAuthorityAddress,\n} from \"./programs/transferAuthority/pda\";\nimport { withIssueToken } from \"./transaction\";\n\nexport const withWrapToken = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  transferAuthorityInfo?: {\n    transferAuthorityName: string;\n    creator?: PublicKey;\n  },\n  payer = wallet.publicKey\n): Promise<[Transaction, PublicKey]> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const checkTokenManager = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (checkTokenManager?.parsed) {\n    throw \"Token is already wrapped\";\n  }\n  const issuerTokenAccountId = await findAta(mintId, wallet.publicKey, true);\n  let kind = TokenManagerKind.Edition;\n  const masterEditionId = findMintEditionId(mintId);\n  const accountInfo = await connection.getAccountInfo(masterEditionId);\n  if (!accountInfo) kind = TokenManagerKind.Permissioned;\n\n  await withIssueToken(\n    transaction,\n    connection,\n    wallet,\n    {\n      mint: mintId,\n      invalidationType: InvalidationType.Release,\n      issuerTokenAccountId: issuerTokenAccountId,\n      kind: kind,\n      transferAuthorityInfo: transferAuthorityInfo\n        ? {\n            transferAuthorityName: transferAuthorityInfo.transferAuthorityName,\n            creator: transferAuthorityInfo.creator,\n          }\n        : undefined,\n    },\n    payer\n  );\n\n  const tokenManagerTokenAccountId = await findAta(\n    mintId,\n    tokenManagerId,\n    true\n  );\n  const recipientTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    wallet.publicKey,\n    payer,\n    true\n  );\n\n  const remainingAccounts = getRemainingAccountsForKind(mintId, kind);\n  const claimIx = await tmManagerProgram.methods\n    .claim()\n    .accounts({\n      tokenManager: tokenManagerId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      mint: mintId,\n      recipient: wallet.publicKey,\n      recipientTokenAccount: recipientTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n  transaction.add(claimIx);\n\n  return [transaction, tokenManagerId];\n};\n\nexport const withInitTransferAuthority = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  authority = wallet.publicKey,\n  payer = wallet.publicKey,\n  allowedMarketplaces?: PublicKey[]\n): Promise<[Transaction, PublicKey]> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const transferAuthorityId = findTransferAuthorityAddress(name);\n\n  const initTransferAuthorityIx = await transferAuthProgram.methods\n    .initTransferAuthority({\n      name: name,\n      authority: authority,\n      allowedMarketplaces: allowedMarketplaces ?? null,\n    })\n    .accounts({\n      transferAuthority: transferAuthorityId,\n      payer: payer ?? wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(initTransferAuthorityIx);\n  return [transaction, transferAuthorityId];\n};\n\nexport const withUpdateTransferAuthority = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  authority: PublicKey,\n  allowedMarketplaces?: PublicKey[]\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const transferAuthorityId = findTransferAuthorityAddress(name);\n\n  const updateTransferAuthorityIx = await transferAuthProgram.methods\n    .updateTransferAuthority({\n      authority: authority,\n      allowedMarketplaces: allowedMarketplaces,\n    })\n    .accounts({\n      transferAuthority: transferAuthorityId,\n      authority: authority,\n    })\n    .instruction();\n  transaction.add(updateTransferAuthorityIx);\n  return transaction;\n};\n\nexport const withInitMarketplace = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  paymentManagerName: string,\n  paymentMints?: PublicKey[],\n  payer = wallet.publicKey\n): Promise<[Transaction, PublicKey]> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const marketplaceId = findMarketplaceAddress(name);\n  const paymentManagerId = findPaymentManagerAddress(paymentManagerName);\n\n  const initMarketplaceIx = await transferAuthProgram.methods\n    .initMarketplace({\n      name: name,\n      authority: wallet.publicKey,\n      paymentMints: paymentMints ?? null,\n    })\n    .accounts({\n      marketplace: marketplaceId,\n      paymentManager: paymentManagerId,\n      payer: payer ?? wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(initMarketplaceIx);\n  return [transaction, marketplaceId];\n};\n\nexport const withUpdateMarketplace = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  name: string,\n  paymentManagerName: string,\n  authority: PublicKey,\n  paymentMints: PublicKey[]\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const marketplaceId = findMarketplaceAddress(name);\n  const paymentManagerId = findPaymentManagerAddress(paymentManagerName);\n\n  const updateMarketplaceIx = await transferAuthProgram.methods\n    .updateMarketplace({\n      paymentManager: paymentManagerId,\n      authority: authority,\n      paymentMints: paymentMints,\n    })\n    .accounts({\n      marketplace: marketplaceId,\n      authority: authority,\n    })\n    .instruction();\n  transaction.add(updateMarketplaceIx);\n  return transaction;\n};\n\nexport const withCreateListing = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  markeptlaceName: string,\n  paymentAmount: BN,\n  paymentMint = PublicKey.default,\n  payer = wallet.publicKey\n): Promise<[Transaction, PublicKey]> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const listingId = findListingAddress(mintId);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const listerTokenAccountId = await findAta(mintId, wallet.publicKey, true);\n  const marketplaceId = findMarketplaceAddress(markeptlaceName);\n  const tokenManagerData = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!tokenManagerData?.parsed) {\n    throw `No tokenManagerData for mint id${mintId.toString()} found`;\n  }\n  if (!tokenManagerData.parsed.transferAuthority) {\n    throw `No transfer authority for token manager`;\n  }\n  const checkListing = await tryGetAccount(() =>\n    getListing(connection, listingId)\n  );\n  if (checkListing) {\n    transaction.add(\n      await withUpdateListing(\n        transaction,\n        connection,\n        wallet,\n        mintId,\n        marketplaceId,\n        paymentAmount,\n        paymentMint\n      )\n    );\n  } else {\n    const mintManagerId = findMintManagerId(mintId);\n    const createListingIx = await transferAuthProgram.methods\n      .createListing({\n        paymentAmount: paymentAmount,\n        paymentMint: paymentMint,\n      })\n      .accounts({\n        listing: listingId,\n        transferAuthority: tokenManagerData.parsed.transferAuthority,\n        marketplace: marketplaceId,\n        tokenManager: tokenManagerId,\n        mint: mintId,\n        mintManager: mintManagerId,\n        listerTokenAccount: listerTokenAccountId,\n        lister: wallet.publicKey,\n        payer: payer ?? wallet.publicKey,\n        cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n      })\n      .instruction();\n    transaction.add(createListingIx);\n  }\n\n  return [transaction, marketplaceId];\n};\n\nexport const withUpdateListing = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  marketplaceId: PublicKey,\n  paymentAmount: BN,\n  paymentMint: PublicKey\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const listingData = await tryGetAccount(() => getListing(connection, mintId));\n  if (!listingData?.parsed) {\n    throw `No listing found for mint address ${mintId.toString()}`;\n  }\n  const listerMintTokenAccountId = await findAta(\n    mintId,\n    wallet.publicKey,\n    true\n  );\n\n  const listingId = findListingAddress(mintId);\n  const updateListingIx = await transferAuthProgram.methods\n    .updateListing({\n      marketplace: marketplaceId,\n      paymentAmount: paymentAmount,\n      paymentMint: paymentMint,\n    })\n    .accounts({\n      tokenManager: listingData.parsed.tokenManager,\n      listing: listingId,\n      listerMintTokenAccount: listerMintTokenAccountId,\n      lister: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(updateListingIx);\n  return transaction;\n};\n\nexport const withRemoveListing = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  listerMintTokenAccountId: PublicKey\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const listingId = findListingAddress(mintId);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const mintManagerId = findMintManagerId(mintId);\n\n  const removeListingIx = await transferAuthProgram.methods\n    .removeListing()\n    .accounts({\n      tokenManager: tokenManagerId,\n      listing: listingId,\n      listerMintTokenAccount: listerMintTokenAccountId,\n      lister: wallet.publicKey,\n      mint: mintId,\n      mintManager: mintManagerId,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .instruction();\n  transaction.add(removeListingIx);\n  return transaction;\n};\n\nexport const withAcceptListing = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  buyer: PublicKey,\n  mintId: PublicKey,\n  paymentAmount: BN,\n  paymentMint: PublicKey,\n  buySideReceiver?: PublicKey,\n  payer = buyer\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const listingData = await tryGetAccount(() => getListing(connection, mintId));\n  if (!listingData?.parsed) {\n    throw `No listing found with mint id ${mintId.toString()}`;\n  }\n  const marketplaceData = await tryGetAccount(() =>\n    getMarketplace(connection, listingData.parsed.marketplace)\n  );\n  if (!marketplaceData?.parsed) {\n    throw `No marketplace found with id ${mintId.toString()}`;\n  }\n  const paymentManagerData = await tryGetAccount(() =>\n    getPaymentManager(connection, marketplaceData.parsed.paymentManager)\n  );\n  if (!paymentManagerData?.parsed) {\n    throw `No payment manager found for marketplace with name ${marketplaceData.parsed.name}`;\n  }\n  const nativePayment = paymentMint.toString() === PublicKey.default.toString();\n\n  const listerPaymentTokenAccountId = nativePayment\n    ? listingData.parsed.lister\n    : await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        listingData.parsed.paymentMint,\n        listingData.parsed.lister,\n        wallet.publicKey\n      );\n\n  const listerMintTokenAccountId = await findAta(\n    mintId,\n    listingData.parsed.lister,\n    true\n  );\n\n  const payerPaymentTokenAccountId = nativePayment\n    ? payer\n    : listingData.parsed.lister.toString() !== payer.toString()\n    ? await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        listingData.parsed.paymentMint,\n        payer,\n        wallet.publicKey\n      )\n    : listerPaymentTokenAccountId;\n\n  if (listingData.parsed.paymentMint.toString() === WSOL_MINT.toString()) {\n    await withWrapSol(\n      transaction,\n      connection,\n      emptyWallet(buyer),\n      listingData.parsed.paymentAmount.toNumber(),\n      true\n    );\n  }\n\n  const buyerMintTokenAccountId =\n    listingData.parsed.lister.toString() === buyer.toString()\n      ? await findAta(mintId, buyer, true)\n      : await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          mintId,\n          buyer,\n          wallet.publicKey,\n          true\n        );\n\n  const feeCollectorTokenAccountId = nativePayment\n    ? paymentManagerData?.parsed.feeCollector\n    : await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        listingData.parsed.paymentMint,\n        paymentManagerData?.parsed.feeCollector,\n        wallet.publicKey,\n        true\n      );\n\n  const mintMetadataId = findMintMetadataId(mintId);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const transferReceiptId = findTransferReceiptId(tokenManagerId);\n\n  const remainingAccountsForHandlePaymentWithRoyalties =\n    await withRemainingAccountsForHandlePaymentWithRoyalties(\n      transaction,\n      connection,\n      wallet,\n      mintId,\n      listingData.parsed.paymentMint,\n      buySideReceiver,\n      [listingData.parsed.lister.toString(), buyer.toString()]\n    );\n\n  const tokenManagerData = await getTokenManager(connection, tokenManagerId);\n  if (!tokenManagerData) {\n    throw `No token manager found for ${mintId.toString()}`;\n  }\n  if (!tokenManagerData.parsed.transferAuthority) {\n    throw `No transfer authority for token manager`;\n  }\n  const remainingAccountsForKind = getRemainingAccountsForKind(\n    mintId,\n    tokenManagerData.parsed.kind\n  );\n  const remainingAccounts: AccountMeta[] = [\n    ...remainingAccountsForHandlePaymentWithRoyalties,\n    ...remainingAccountsForKind,\n  ];\n\n  if (\n    (paymentAmount && !paymentAmount.eq(listingData.parsed.paymentAmount)) ||\n    (paymentMint && !paymentMint.equals(listingData.parsed.paymentMint))\n  ) {\n    throw \"Listing data does not match expected values\";\n  }\n\n  const acceptListingIx = await transferAuthProgram.methods\n    .acceptListing({\n      paymentAmount: paymentAmount,\n    })\n    .accounts({\n      transferAuthority: tokenManagerData.parsed.transferAuthority,\n      transferReceipt: transferReceiptId,\n      listing: listingData.pubkey,\n      listerPaymentTokenAccount: listerPaymentTokenAccountId,\n      listerMintTokenAccount: listerMintTokenAccountId,\n      lister: listingData.parsed.lister,\n      buyerMintTokenAccount: buyerMintTokenAccountId,\n      buyer: buyer,\n      payer: payer ?? buyer,\n      payerPaymentTokenAccount: payerPaymentTokenAccountId,\n      marketplace: marketplaceData.pubkey,\n      tokenManager: tokenManagerData.pubkey,\n      mint: tokenManagerData.parsed.mint,\n      mintMetadataInfo: mintMetadataId,\n      paymentManager: marketplaceData.parsed.paymentManager,\n      paymentMint: paymentMint,\n      feeCollectorTokenAccount: feeCollectorTokenAccountId,\n      feeCollector: paymentManagerData.parsed.feeCollector,\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      associatedTokenProgram: ASSOCIATED_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n    })\n    .remainingAccounts(remainingAccounts)\n    .instruction();\n  transaction.add(acceptListingIx);\n\n  return transaction;\n};\n\nexport const withWhitelistMarektplaces = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  transferAuthorityName: string,\n  marketplaceNames: string[]\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const transferAuthority = findTransferAuthorityAddress(transferAuthorityName);\n\n  const marketplaceIds = marketplaceNames.map((name) =>\n    findMarketplaceAddress(name)\n  );\n\n  const whitelistMarketplaceIx = await transferAuthProgram.methods\n    .whitelistMarketplaces({\n      allowedMarketplaces: marketplaceIds,\n    })\n    .accounts({\n      transferAuthority: transferAuthority,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(whitelistMarketplaceIx);\n  return transaction;\n};\n\nexport const withInitTransfer = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  to: PublicKey,\n  mintId: PublicKey,\n  holderTokenAccountId: PublicKey,\n  payer = wallet.publicKey\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const transferId = findTransferAddress(mintId);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n\n  const initTransferIx = await transferAuthProgram.methods\n    .initTransfer({\n      to: to,\n    })\n    .accounts({\n      transfer: transferId,\n      tokenManager: tokenManagerId,\n      holderTokenAccount: holderTokenAccountId,\n      holder: wallet.publicKey,\n      payer: payer ?? wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(initTransferIx);\n  return transaction;\n};\n\nexport const withCancelTransfer = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const transferId = findTransferAddress(mintId);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const checkTokenManager = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!checkTokenManager) {\n    throw `No token manager found for mint id ${mintId.toString()}`;\n  }\n\n  const cancelTransferIx = await transferAuthProgram.methods\n    .cancelTransfer()\n    .accounts({\n      transfer: transferId,\n      tokenManager: tokenManagerId,\n      holderTokenAccount: checkTokenManager.parsed.recipientTokenAccount,\n      holder: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(cancelTransferIx);\n  return transaction;\n};\n\nexport const withAcceptTransfer = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  recipient: PublicKey,\n  holder: PublicKey\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const transferId = findTransferAddress(mintId);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const transferReceiptId = findTransferReceiptId(tokenManagerId);\n  const listingId = findListingAddress(mintId);\n  const tokenManagerData = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!tokenManagerData) {\n    throw `No token manager found for mint ${mintId.toString()}`;\n  }\n  if (!tokenManagerData.parsed.transferAuthority) {\n    throw `No transfer autority found for mint id ${mintId.toString()}`;\n  }\n  const recipientTokenAccountId = await findAta(mintId, recipient, true);\n  const remainingAccountsForTransfer = [\n    ...getRemainingAccountsForKind(mintId, tokenManagerData.parsed.kind),\n    {\n      pubkey: transferReceiptId,\n      isSigner: false,\n      isWritable: true,\n    },\n  ];\n\n  const accceptTransferIx = await transferAuthProgram.methods\n    .acceptTransfer()\n    .accounts({\n      transfer: transferId,\n      transferAuthority: tokenManagerData.parsed.transferAuthority,\n      transferReceipt: transferReceiptId,\n      listing: listingId,\n      tokenManager: tokenManagerId,\n      mint: mintId,\n      recipientTokenAccount: recipientTokenAccountId,\n      recipient: recipient,\n      payer: wallet.publicKey,\n      holderTokenAccount: tokenManagerData.parsed.recipientTokenAccount,\n      holder: holder,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n    })\n    .remainingAccounts(remainingAccountsForTransfer)\n    .instruction();\n  transaction.add(accceptTransferIx);\n  return transaction;\n};\n\nexport const withRelease = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  transferAuthorityId: PublicKey,\n  holderTokenAccountId: PublicKey,\n  payer = wallet.publicKey\n): Promise<Transaction> => {\n  const transferAuthProgram = transferAuthorityProgram(connection, wallet);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const checkTokenManager = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!checkTokenManager) {\n    throw `No token manager found for mint id ${mintId.toString()}`;\n  }\n  const tokenManagerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    tokenManagerId,\n    payer,\n    true\n  );\n  const tokenManagerData = await getTokenManager(connection, tokenManagerId);\n  const remainingAccountsForKind = getRemainingAccountsForKind(\n    mintId,\n    tokenManagerData.parsed.kind\n  );\n  const remainingAccountsForReturn = await withRemainingAccountsForReturn(\n    transaction,\n    connection,\n    wallet,\n    tokenManagerData\n  );\n\n  const releaseIx = await transferAuthProgram.methods\n    .release()\n    .accounts({\n      transferAuthority: transferAuthorityId,\n      tokenManager: tokenManagerId,\n      mint: mintId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      holderTokenAccount: holderTokenAccountId,\n      holder: wallet.publicKey,\n      collector: wallet.publicKey,\n      cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: SYSVAR_RENT_PUBKEY,\n    })\n    .remainingAccounts([\n      ...remainingAccountsForKind,\n      ...remainingAccountsForReturn,\n    ])\n    .instruction();\n  transaction.add(releaseIx);\n  return transaction;\n};\n"]}