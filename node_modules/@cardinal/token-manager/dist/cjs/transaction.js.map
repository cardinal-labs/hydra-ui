{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../src/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport {\n  decodeIdlAccount,\n  fetchAccountDataById,\n  findAta,\n  findMintMetadataId,\n  getBatchedMultipleAccounts,\n  METADATA_PROGRAM_ID,\n  tryDecodeIdlAccount,\n  tryGetAccount,\n  tryNull,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport {\n  findMintManagerId as findCCSMintManagerId,\n  findRulesetId,\n  PROGRAM_ADDRESS,\n} from \"@cardinal/creator-standard\";\nimport { PAYMENT_MANAGER_ADDRESS } from \"@cardinal/payment-manager\";\nimport { withRemainingAccountsForPayment } from \"@cardinal/payment-manager/dist/cjs/utils\";\nimport {\n  Metadata,\n  TokenStandard,\n} from \"@metaplex-foundation/mpl-token-metadata\";\nimport { BN } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport { ASSOCIATED_PROGRAM_ID } from \"@project-serum/anchor/dist/cjs/utils/token\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountIdempotentInstruction,\n  getAccount,\n  getAssociatedTokenAddressSync,\n  TOKEN_PROGRAM_ID,\n  unpackAccount,\n} from \"@solana/spl-token\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport {\n  ComputeBudgetProgram,\n  Keypair,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n} from \"@solana/web3.js\";\n\nimport type { CardinalTokenManager } from \"./idl/cardinal_token_manager\";\nimport { timeInvalidator, tokenManager, useInvalidator } from \"./programs\";\nimport type {\n  CLAIM_APPROVER_PROGRAM,\n  ClaimApproverParams,\n} from \"./programs/claimApprover\";\nimport {\n  CLAIM_APPROVER_IDL,\n  claimApproverProgram,\n  defaultPaymentManagerId,\n} from \"./programs/claimApprover\";\nimport { findClaimApproverAddress } from \"./programs/claimApprover/pda\";\nimport type { TimeInvalidationParams } from \"./programs/timeInvalidator\";\nimport { timeInvalidatorProgram } from \"./programs/timeInvalidator\";\nimport { findTimeInvalidatorAddress } from \"./programs/timeInvalidator/pda\";\nimport { shouldTimeInvalidate } from \"./programs/timeInvalidator/utils\";\nimport type {\n  TOKEN_MANAGER_PROGRAM,\n  TokenManagerData,\n} from \"./programs/tokenManager\";\nimport {\n  CRANK_KEY,\n  InvalidationType,\n  TOKEN_MANAGER_ADDRESS,\n  TOKEN_MANAGER_IDL,\n  TokenManagerKind,\n  tokenManagerProgram,\n  TokenManagerState,\n} from \"./programs/tokenManager\";\nimport { getTokenManager } from \"./programs/tokenManager/accounts\";\nimport {\n  findMintCounterId,\n  findMintManagerId,\n  findReceiptMintManagerId,\n  findTokenManagerAddress,\n  tokenManagerAddressFromMint,\n} from \"./programs/tokenManager/pda\";\nimport {\n  getRemainingAccountsForClaim,\n  getRemainingAccountsForIssue,\n  getRemainingAccountsForKind,\n  getRemainingAccountsForTransfer,\n  getRemainingAccountsForUnissue,\n  withRemainingAccountsForInvalidate,\n  withRemainingAccountsForReturn,\n} from \"./programs/tokenManager/utils\";\nimport {\n  getListing,\n  getTransferAuthorityByName,\n} from \"./programs/transferAuthority/accounts\";\nimport { findListingAddress } from \"./programs/transferAuthority/pda\";\nimport type { UseInvalidationParams } from \"./programs/useInvalidator\";\nimport { useInvalidatorProgram } from \"./programs/useInvalidator\";\nimport { findUseInvalidatorAddress } from \"./programs/useInvalidator/pda\";\n\nexport type IssueParameters = {\n  claimPayment?: ClaimApproverParams;\n  timeInvalidation?: TimeInvalidationParams;\n  useInvalidation?: UseInvalidationParams;\n  transferAuthorityInfo?: {\n    transferAuthorityName: string;\n    creator?: PublicKey;\n  };\n  mint: PublicKey;\n  amount?: BN;\n  issuerTokenAccountId: PublicKey;\n  visibility?: \"private\" | \"public\" | \"permissioned\";\n  permissionedClaimApprover?: PublicKey;\n  kind?: TokenManagerKind;\n  invalidationType?: InvalidationType;\n  receiptOptions?: {\n    receiptMintKeypair: Keypair;\n  };\n  rulesetId?: PublicKey;\n  customInvalidators?: PublicKey[];\n};\n\n/**\n * Main method for issuing any managed token\n * Allows for optional payment, optional usages or expiration and includes a otp for private links\n * @param connection\n * @param wallet\n * @param parameters\n * @returns Transaction, public key for the created token manager and a otp if necessary for private links\n */\nexport const withIssueToken = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  {\n    claimPayment,\n    timeInvalidation,\n    useInvalidation,\n    mint,\n    issuerTokenAccountId,\n    amount = new BN(1),\n    transferAuthorityInfo,\n    kind = TokenManagerKind.Managed,\n    invalidationType = InvalidationType.Return,\n    visibility = \"public\",\n    permissionedClaimApprover,\n    receiptOptions = undefined,\n    customInvalidators = undefined,\n    rulesetId = undefined,\n  }: IssueParameters,\n  payer = wallet.publicKey\n): Promise<[Transaction, PublicKey, Keypair | undefined]> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const caProgram = claimApproverProgram(connection, wallet);\n  const tmeInvalidatorProgram = timeInvalidatorProgram(connection, wallet);\n  const usgInvalidatorProgram = useInvalidatorProgram(connection, wallet);\n\n  // create mint manager\n  if (\n    kind === TokenManagerKind.Managed ||\n    kind === TokenManagerKind.Permissioned\n  ) {\n    const mintManagerId = findMintManagerId(mint);\n    const mintManagerData = await tryGetAccount(() =>\n      tokenManager.accounts.getMintManager(connection, mintManagerId)\n    );\n    if (!mintManagerData) {\n      const mintManagerIx = await tmManagerProgram.methods\n        .createMintManager()\n        .accounts({\n          mintManager: mintManagerId,\n          mint: mint,\n          freezeAuthority: wallet.publicKey,\n          payer: wallet.publicKey,\n          tokenProgram: TOKEN_PROGRAM_ID,\n          systemProgram: SystemProgram.programId,\n        })\n        .instruction();\n      transaction.add(mintManagerIx);\n    }\n  }\n\n  // init token manager\n  const numInvalidator =\n    (customInvalidators ? customInvalidators.length : 0) +\n    (useInvalidation && timeInvalidation\n      ? 2\n      : useInvalidation || timeInvalidation\n      ? 1\n      : 0) +\n    (transferAuthorityInfo?.creator ? 1 : 0);\n  const tokenManagerId = findTokenManagerAddress(mint);\n  const mintCounterId = findMintCounterId(mint);\n  const tokenManagerIx = await tmManagerProgram.methods\n    .init({\n      amount: amount,\n      kind: kind,\n      invalidationType: invalidationType,\n      numInvalidators: numInvalidator,\n    })\n    .accounts({\n      tokenManager: tokenManagerId,\n      mintCounter: mintCounterId,\n      mint: mint,\n      issuer: wallet.publicKey,\n      payer: wallet.publicKey,\n      issuerTokenAccount: issuerTokenAccountId,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(tokenManagerIx);\n\n  if (transferAuthorityInfo) {\n    const checkTransferAuthority = await tryGetAccount(() =>\n      getTransferAuthorityByName(\n        connection,\n        transferAuthorityInfo.transferAuthorityName\n      )\n    );\n    if (!checkTransferAuthority?.parsed) {\n      throw `No transfer authority with name ${transferAuthorityInfo.transferAuthorityName} found`;\n    }\n    const setTransferAuthorityIx = await tmManagerProgram.methods\n      .setTransferAuthority(checkTransferAuthority.pubkey)\n      .accounts({\n        tokenManager: tokenManagerId,\n        issuer: wallet.publicKey,\n      })\n      .instruction();\n\n    transaction.add(setTransferAuthorityIx);\n    if (transferAuthorityInfo.creator) {\n      const adInvalidatorIx = await tmManagerProgram.methods\n        .addInvalidator(transferAuthorityInfo.creator)\n        .accounts({\n          tokenManager: tokenManagerId,\n          issuer: wallet.publicKey,\n        })\n        .instruction();\n      transaction.add(adInvalidatorIx);\n    }\n  }\n\n  //////////////////////////////\n  /////// claim approver ///////\n  //////////////////////////////\n  let otp;\n  if (claimPayment) {\n    if (visibility !== \"public\") {\n      throw \"Paid rentals currently must be public\";\n    }\n    const paidClaimApproverId = findClaimApproverAddress(tokenManagerId);\n    const paidClaimApproverIx = await caProgram.methods\n      .init({\n        paymentMint: claimPayment.paymentMint,\n        paymentAmount: new BN(claimPayment.paymentAmount),\n        paymentManager: claimPayment.paymentManager || defaultPaymentManagerId,\n        collector: claimPayment.collector || CRANK_KEY,\n      })\n      .accounts({\n        tokenManager: tokenManagerId,\n        claimApprover: paidClaimApproverId,\n        issuer: wallet.publicKey,\n        payer: payer ?? wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction();\n    transaction.add(paidClaimApproverIx);\n    const setClaimApproverIx = await tmManagerProgram.methods\n      .setClaimApprover(paidClaimApproverId)\n      .accounts({\n        tokenManager: tokenManagerId,\n        issuer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(setClaimApproverIx);\n  } else if (visibility === \"private\") {\n    otp = Keypair.generate();\n    const setClaimApproverIx = await tmManagerProgram.methods\n      .setClaimApprover(otp.publicKey)\n      .accounts({\n        tokenManager: tokenManagerId,\n        issuer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(setClaimApproverIx);\n  } else if (visibility === \"permissioned\") {\n    if (!permissionedClaimApprover) {\n      throw \"Claim approver is not specified for permissioned link\";\n    }\n    const setClaimApproverIx = await tmManagerProgram.methods\n      .setClaimApprover(permissionedClaimApprover)\n      .accounts({\n        tokenManager: tokenManagerId,\n        issuer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(setClaimApproverIx);\n  }\n\n  //////////////////////////////\n  /////// time invalidator /////\n  //////////////////////////////\n  if (timeInvalidation) {\n    const timeInvalidatorId = findTimeInvalidatorAddress(tokenManagerId);\n    const timeInvalidatorIx = await tmeInvalidatorProgram.methods\n      .init({\n        collector: timeInvalidation.collector || CRANK_KEY,\n        paymentManager:\n          timeInvalidation.paymentManager || defaultPaymentManagerId,\n        durationSeconds:\n          timeInvalidation.durationSeconds !== undefined\n            ? new BN(timeInvalidation.durationSeconds)\n            : null,\n        extensionPaymentAmount:\n          timeInvalidation.extension?.extensionPaymentAmount !== undefined\n            ? new BN(timeInvalidation.extension?.extensionPaymentAmount)\n            : null,\n        extensionDurationSeconds:\n          timeInvalidation.extension?.extensionDurationSeconds !== undefined\n            ? new BN(timeInvalidation.extension?.extensionDurationSeconds)\n            : null,\n        extensionPaymentMint:\n          timeInvalidation.extension?.extensionPaymentMint || null,\n        maxExpiration:\n          timeInvalidation.maxExpiration !== undefined\n            ? new BN(timeInvalidation.maxExpiration)\n            : null,\n        disablePartialExtension:\n          timeInvalidation.extension?.disablePartialExtension || null,\n      })\n      .accounts({\n        tokenManager: tokenManagerId,\n        timeInvalidator: timeInvalidatorId,\n        issuer: wallet.publicKey,\n        payer: wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction();\n    transaction.add(timeInvalidatorIx);\n    const addInvalidatorIx = await tmManagerProgram.methods\n      .addInvalidator(timeInvalidatorId)\n      .accounts({\n        tokenManager: tokenManagerId,\n        issuer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(addInvalidatorIx);\n  } else {\n    const timeInvalidatorId = findTimeInvalidatorAddress(tokenManagerId);\n    const timeInvalidatorData = await tryGetAccount(() =>\n      timeInvalidator.accounts.getTimeInvalidator(connection, timeInvalidatorId)\n    );\n    if (timeInvalidatorData) {\n      const closeIx = await tmeInvalidatorProgram.methods\n        .close()\n        .accounts({\n          tokenManager: tokenManagerId,\n          timeInvalidator: timeInvalidatorId,\n          collector: timeInvalidatorData.parsed.collector,\n          closer: wallet.publicKey,\n        })\n        .instruction();\n      transaction.add(closeIx);\n    }\n  }\n\n  //////////////////////////////\n  /////////// usages ///////////\n  //////////////////////////////\n  if (useInvalidation) {\n    const useInvalidatorId = findUseInvalidatorAddress(tokenManagerId);\n    const useInvalidatorIx = await usgInvalidatorProgram.methods\n      .init({\n        collector: useInvalidation.collector || CRANK_KEY,\n        paymentManager:\n          useInvalidation.paymentManager || defaultPaymentManagerId,\n        totalUsages: useInvalidation.totalUsages\n          ? new BN(useInvalidation.totalUsages)\n          : null,\n        maxUsages: useInvalidation.extension?.maxUsages\n          ? new BN(useInvalidation.extension?.maxUsages)\n          : null,\n        useAuthority: useInvalidation.useAuthority || null,\n        extensionPaymentAmount: useInvalidation.extension\n          ?.extensionPaymentAmount\n          ? new BN(useInvalidation.extension?.extensionPaymentAmount)\n          : null,\n        extensionPaymentMint:\n          useInvalidation.extension?.extensionPaymentMint || null,\n        extensionUsages: useInvalidation.extension?.extensionUsages\n          ? new BN(useInvalidation.extension.extensionUsages)\n          : null,\n      })\n      .accounts({\n        tokenManager: tokenManagerId,\n        useInvalidator: useInvalidatorId,\n        issuer: wallet.publicKey,\n        payer: wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction();\n    transaction.add(useInvalidatorIx);\n    const addInvalidatorIx = await tmManagerProgram.methods\n      .addInvalidator(useInvalidatorId)\n      .accounts({\n        tokenManager: tokenManagerId,\n        issuer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(addInvalidatorIx);\n  } else {\n    const useInvalidatorId =\n      useInvalidator.pda.findUseInvalidatorAddress(tokenManagerId);\n    const useInvalidatorData = await tryGetAccount(() =>\n      useInvalidator.accounts.getUseInvalidator(connection, useInvalidatorId)\n    );\n    if (useInvalidatorData) {\n      const closeIx = await usgInvalidatorProgram.methods\n        .close()\n        .accounts({\n          tokenManager: tokenManagerId,\n          useInvalidator: useInvalidatorId,\n          collector: useInvalidatorData.parsed.collector,\n          closer: wallet.publicKey,\n        })\n        .instruction();\n      transaction.add(closeIx);\n    }\n  }\n\n  /////////////////////////////////////////\n  //////////// custom invalidators ////////\n  /////////////////////////////////////////\n  if (customInvalidators) {\n    for (const invalidator of customInvalidators) {\n      const addInvalidatorIx = await tmManagerProgram.methods\n        .addInvalidator(invalidator)\n        .accounts({\n          tokenManager: tokenManagerId,\n          issuer: wallet.publicKey,\n        })\n        .instruction();\n      transaction.add(addInvalidatorIx);\n    }\n  }\n\n  // issuer\n  const tokenManagerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mint,\n    tokenManagerId,\n    payer,\n    true\n  );\n\n  const issueIx = await tmManagerProgram.methods\n    .issue()\n    .accounts({\n      tokenManager: tokenManagerId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      issuer: wallet.publicKey,\n      issuerTokenAccount: issuerTokenAccountId,\n      payer: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(\n      getRemainingAccountsForIssue(\n        kind,\n        mint,\n        issuerTokenAccountId,\n        tokenManagerTokenAccountId,\n        rulesetId\n      )\n    )\n    .instruction();\n  transaction.add(issueIx);\n\n  //////////////////////////////\n  //////////// index ///////////\n  //////////////////////////////\n  if (receiptOptions) {\n    const { receiptMintKeypair } = receiptOptions;\n    const receiptMintMetadataId = findMintMetadataId(\n      receiptMintKeypair.publicKey\n    );\n    const recipientTokenAccountId = await findAta(\n      receiptMintKeypair.publicKey,\n      wallet.publicKey\n    );\n    const receiptManagerId = findReceiptMintManagerId();\n    const claimReceiptMintIx = await tmManagerProgram.methods\n      .claimReceiptMint(\"receipt\")\n      .accounts({\n        tokenManager: tokenManagerId,\n        issuer: wallet.publicKey,\n        receiptMint: receiptMintKeypair.publicKey,\n        receiptMintMetadata: receiptMintMetadataId,\n        recipientTokenAccount: recipientTokenAccountId,\n        receiptMintManager: receiptManagerId,\n        payer: wallet.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        associatedToken: ASSOCIATED_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        tokenMetadataProgram: METADATA_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n      })\n      .instruction();\n    transaction.add(claimReceiptMintIx);\n  }\n\n  return [transaction, tokenManagerId, otp];\n};\n\n/**\n * Add claim instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param tokenManagerId\n * @param otpKeypair\n * @returns Transaction with relevent claim instructions added\n */\nexport const withClaimToken = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  additionalOptions?: {\n    payer?: PublicKey;\n  },\n  buySideTokenAccountId?: PublicKey\n): Promise<Transaction> => {\n  const claimApproverId = findClaimApproverAddress(tokenManagerId);\n  const accountData = await fetchAccountDataById(connection, [\n    tokenManagerId,\n    claimApproverId,\n  ]);\n  const tokenManagerInfo = accountData[tokenManagerId.toString()];\n  if (!tokenManagerInfo?.data) throw \"Token manager not found\";\n  const tokenManagerData = decodeIdlAccount<\n    \"tokenManager\",\n    TOKEN_MANAGER_PROGRAM\n  >(tokenManagerInfo, \"tokenManager\", TOKEN_MANAGER_IDL);\n\n  const claimApproverInfo = accountData[claimApproverId.toString()];\n  const claimApproverData = claimApproverInfo\n    ? tryDecodeIdlAccount<\"paidClaimApprover\", CLAIM_APPROVER_PROGRAM>(\n        claimApproverInfo,\n        \"paidClaimApprover\",\n        CLAIM_APPROVER_IDL\n      )\n    : null;\n\n  const metadataId = findMintMetadataId(tokenManagerData.parsed.mint);\n  const metadata = await tryNull(\n    Metadata.fromAccountAddress(connection, metadataId)\n  );\n\n  const claimReceiptId = tokenManager.pda.findClaimReceiptId(\n    tokenManagerId,\n    wallet.publicKey\n  );\n\n  if (\n    tokenManagerData.parsed.kind === TokenManagerKind.Programmable ||\n    metadata?.tokenStandard === TokenStandard.ProgrammableNonFungible\n  ) {\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitLimit({\n        units: 1000000,\n      })\n    );\n  }\n\n  // pay claim approver\n  if (\n    claimApproverData?.parsed &&\n    tokenManagerData.parsed.claimApprover &&\n    tokenManagerData.parsed.claimApprover.toString() ===\n      claimApproverId.toString()\n  ) {\n    const payerTokenAccountId = getAssociatedTokenAddressSync(\n      claimApproverData.parsed.paymentMint,\n      wallet.publicKey\n    );\n\n    const [\n      issuerTokenAccountId,\n      feeCollectorTokenAccountId,\n      remainingAccounts,\n    ] = await withRemainingAccountsForPayment(\n      transaction,\n      connection,\n      wallet,\n      tokenManagerData.parsed.mint,\n      claimApproverData.parsed.paymentMint,\n      tokenManagerData.parsed.issuer,\n      claimApproverData.parsed.paymentManager,\n      buySideTokenAccountId,\n      {\n        receiptMint: tokenManagerData.parsed.receiptMint,\n        payer: additionalOptions?.payer,\n      }\n    );\n\n    const payIx = await claimApproverProgram(connection, wallet)\n      .methods.pay()\n      .accounts({\n        tokenManager: tokenManagerId,\n        paymentTokenAccount: issuerTokenAccountId,\n        feeCollectorTokenAccount: feeCollectorTokenAccountId,\n        paymentManager: claimApproverData.parsed.paymentManager,\n        claimApprover: claimApproverId,\n        payer: wallet.publicKey,\n        payerTokenAccount: payerTokenAccountId,\n        claimReceipt: claimReceiptId,\n        cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n        cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n      })\n      .remainingAccounts(remainingAccounts)\n      .instruction();\n    transaction.add(payIx);\n  } else if (tokenManagerData.parsed.claimApprover) {\n    const createClaimReceiptIx = await tokenManagerProgram(connection, wallet)\n      .methods.createClaimReceipt(wallet.publicKey)\n      .accountsStrict({\n        tokenManager: tokenManagerId,\n        claimApprover: tokenManagerData.parsed.claimApprover,\n        claimReceipt: claimReceiptId,\n        payer: additionalOptions?.payer || wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction();\n    transaction.add(createClaimReceiptIx);\n  }\n\n  const tokenManagerTokenAccountId = getAssociatedTokenAddressSync(\n    tokenManagerData.parsed.mint,\n    tokenManagerId,\n    true\n  );\n  const recipientTokenAccountId = getAssociatedTokenAddressSync(\n    tokenManagerData.parsed.mint,\n    wallet.publicKey\n  );\n  transaction.add(\n    createAssociatedTokenAccountIdempotentInstruction(\n      additionalOptions?.payer ?? wallet.publicKey,\n      recipientTokenAccountId,\n      wallet.publicKey,\n      tokenManagerData.parsed.mint\n    )\n  );\n  // claim\n  const claimIx = await tokenManagerProgram(connection, wallet)\n    .methods.claim()\n    .accounts({\n      tokenManager: tokenManagerId,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      mint: tokenManagerData.parsed.mint,\n      recipient: wallet.publicKey,\n      recipientTokenAccount: recipientTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(\n      getRemainingAccountsForClaim(\n        { parsed: tokenManagerData.parsed, pubkey: tokenManagerId },\n        recipientTokenAccountId,\n        metadata,\n        claimReceiptId\n      )\n    )\n    .instruction();\n  transaction.add(claimIx);\n  return transaction;\n};\n\nexport const withUnissueToken = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n): Promise<Transaction> => {\n  const tokenManagerId = tokenManagerAddressFromMint(mintId);\n  const [tokenManagerInfo, metadataInfo] = await getBatchedMultipleAccounts(\n    connection,\n    [tokenManagerId, findMintMetadataId(mintId)]\n  );\n\n  const metadata = metadataInfo\n    ? Metadata.deserialize(metadataInfo.data)[0]\n    : null;\n  if (!tokenManagerInfo) throw \"Token manager not found\";\n  const tokenManager = decodeIdlAccount<\"tokenManager\", CardinalTokenManager>(\n    tokenManagerInfo,\n    \"tokenManager\",\n    TOKEN_MANAGER_IDL\n  );\n\n  transaction.add(\n    createAssociatedTokenAccountIdempotentInstruction(\n      wallet.publicKey,\n      getAssociatedTokenAddressSync(mintId, wallet.publicKey),\n      wallet.publicKey,\n      mintId\n    )\n  );\n  transaction.add(\n    await tokenManagerProgram(connection, wallet)\n      .methods.unissue()\n      .accounts({\n        tokenManager: tokenManagerId,\n        tokenManagerTokenAccount: getAssociatedTokenAddressSync(\n          mintId,\n          tokenManagerId,\n          true\n        ),\n        issuer: wallet.publicKey,\n        issuerTokenAccount: getAssociatedTokenAddressSync(\n          mintId,\n          wallet.publicKey\n        ),\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .remainingAccounts(\n        getRemainingAccountsForUnissue(\n          tokenManagerId,\n          tokenManager.parsed,\n          metadata\n        )\n      )\n      .instruction()\n  );\n  return transaction;\n};\n\nexport const withInvalidate = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  UTCNow: number = Date.now() / 1000\n): Promise<Transaction> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const tmeInvalidatorProgram = timeInvalidatorProgram(connection, wallet);\n  const usgInvalidatorProgram = useInvalidatorProgram(connection, wallet);\n\n  const tokenManagerId = tokenManagerAddressFromMint(mintId);\n  const useInvalidatorId =\n    useInvalidator.pda.findUseInvalidatorAddress(tokenManagerId);\n  const timeInvalidatorId =\n    timeInvalidator.pda.findTimeInvalidatorAddress(tokenManagerId);\n\n  const [useInvalidatorData, timeInvalidatorData, tokenManagerData, metadata] =\n    await Promise.all([\n      tryGetAccount(() =>\n        useInvalidator.accounts.getUseInvalidator(connection, useInvalidatorId)\n      ),\n      tryGetAccount(() =>\n        timeInvalidator.accounts.getTimeInvalidator(\n          connection,\n          timeInvalidatorId\n        )\n      ),\n      tryGetAccount(() =>\n        tokenManager.accounts.getTokenManager(connection, tokenManagerId)\n      ),\n      tryNull(\n        Metadata.fromAccountAddress(connection, findMintMetadataId(mintId))\n      ),\n    ]);\n\n  if (!tokenManagerData) return transaction;\n  if (\n    tokenManagerData.parsed.kind === TokenManagerKind.Programmable ||\n    metadata?.tokenStandard === TokenStandard.ProgrammableNonFungible\n  ) {\n    transaction.add(\n      ComputeBudgetProgram.setComputeUnitLimit({\n        units: 1000000,\n      })\n    );\n  }\n\n  const recipientTokenAccount = await getAccount(\n    connection,\n    tokenManagerData.parsed.recipientTokenAccount\n  );\n\n  const tokenManagerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    tokenManagerId,\n    wallet.publicKey,\n    true\n  );\n\n  const remainingAccounts = await withRemainingAccountsForInvalidate(\n    transaction,\n    connection,\n    wallet,\n    mintId,\n    tokenManagerData,\n    recipientTokenAccount.owner,\n    metadata\n  );\n  if (\n    useInvalidatorData &&\n    useInvalidatorData.parsed.totalUsages &&\n    useInvalidatorData.parsed.usages.gte(useInvalidatorData.parsed.totalUsages)\n  ) {\n    const invalidateIx = await usgInvalidatorProgram.methods\n      .invalidate()\n      .accounts({\n        tokenManager: tokenManagerId,\n        useInvalidator: useInvalidatorId,\n        invalidator: wallet.publicKey,\n        cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenManagerTokenAccount: tokenManagerTokenAccountId,\n        mint: mintId,\n        recipientTokenAccount: tokenManagerData.parsed.recipientTokenAccount,\n        rent: SYSVAR_RENT_PUBKEY,\n      })\n      .remainingAccounts(remainingAccounts)\n      .instruction();\n    transaction.add(invalidateIx);\n    const closeIx = await usgInvalidatorProgram.methods\n      .close()\n      .accounts({\n        tokenManager: tokenManagerId,\n        useInvalidator: useInvalidatorId,\n        collector: useInvalidatorData.parsed.collector,\n        closer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(closeIx);\n  } else if (\n    timeInvalidatorData &&\n    shouldTimeInvalidate(tokenManagerData, timeInvalidatorData, UTCNow)\n  ) {\n    const invalidateIx = await tmeInvalidatorProgram.methods\n      .invalidate()\n      .accounts({\n        tokenManager: tokenManagerId,\n        timeInvalidator: timeInvalidatorId,\n        invalidator: wallet.publicKey,\n        cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenManagerTokenAccount: tokenManagerTokenAccountId,\n        mint: mintId,\n        recipientTokenAccount: tokenManagerData.parsed.recipientTokenAccount,\n        rent: SYSVAR_RENT_PUBKEY,\n      })\n      .remainingAccounts(remainingAccounts)\n      .instruction();\n    transaction.add(invalidateIx);\n    const closeIx = await tmeInvalidatorProgram.methods\n      .close()\n      .accounts({\n        tokenManager: tokenManagerId,\n        timeInvalidator: timeInvalidatorId,\n        collector: timeInvalidatorData.parsed.collector,\n        closer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(closeIx);\n  } else if (\n    tokenManagerData.parsed.invalidators.some((inv) =>\n      inv.equals(wallet.publicKey)\n    ) ||\n    tokenManagerData.parsed.invalidationType === InvalidationType.Return ||\n    tokenManagerData.parsed.invalidationType === InvalidationType.Reissue\n  ) {\n    const invalidateIx = await tmManagerProgram.methods\n      .invalidate()\n      .accounts({\n        tokenManager: tokenManagerId,\n        tokenManagerTokenAccount: tokenManagerTokenAccountId,\n        mint: mintId,\n        recipientTokenAccount: tokenManagerData.parsed.recipientTokenAccount,\n        invalidator: wallet.publicKey,\n        collector: CRANK_KEY,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        rent: SYSVAR_RENT_PUBKEY,\n      })\n      .remainingAccounts(remainingAccounts)\n      .instruction();\n    transaction.add(invalidateIx);\n  }\n  return transaction;\n};\n\nexport const withReturn = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerData: AccountData<TokenManagerData>\n): Promise<Transaction> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const tokenManagerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    tokenManagerData.parsed.mint,\n    tokenManagerData.pubkey,\n    wallet.publicKey,\n    true\n  );\n  const [recipientTokenAccountInfo, metadataInfo] =\n    await connection.getMultipleAccountsInfo([\n      tokenManagerData.parsed.recipientTokenAccount,\n      findMintMetadataId(tokenManagerData.parsed.mint),\n    ]);\n  const metadata = metadataInfo\n    ? Metadata.deserialize(metadataInfo.data)[0]\n    : null;\n\n  const receipientTokenAccount = recipientTokenAccountInfo\n    ? unpackAccount(\n        tokenManagerData.parsed.recipientTokenAccount,\n        recipientTokenAccountInfo\n      )\n    : null;\n\n  const remainingAccountsForReturn = await withRemainingAccountsForReturn(\n    transaction,\n    connection,\n    wallet,\n    tokenManagerData,\n    receipientTokenAccount?.owner,\n    metadata?.programmableConfig?.ruleSet ?? undefined\n  );\n  const transferAccounts = getRemainingAccountsForKind(\n    tokenManagerData.parsed.mint,\n    tokenManagerData.parsed.kind\n  );\n\n  const invalidateIx = await tmManagerProgram.methods\n    .invalidate()\n    .accounts({\n      tokenManager: tokenManagerData.pubkey,\n      tokenManagerTokenAccount: tokenManagerTokenAccountId,\n      mint: tokenManagerData.parsed.mint,\n      recipientTokenAccount: tokenManagerData.parsed.recipientTokenAccount,\n      invalidator: wallet.publicKey,\n      collector: CRANK_KEY,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      rent: SYSVAR_RENT_PUBKEY,\n    })\n    .remainingAccounts([\n      ...(tokenManagerData.parsed.state === TokenManagerState.Claimed\n        ? transferAccounts\n        : []),\n      ...remainingAccountsForReturn,\n    ])\n    .instruction();\n  transaction.add(invalidateIx);\n  return transaction;\n};\n\nexport const withUse = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  usages: number,\n  collector?: PublicKey\n): Promise<Transaction> => {\n  const tokenManagerId = tokenManagerAddressFromMint(mintId);\n  const usgInvalidatorProgram = useInvalidatorProgram(connection, wallet);\n\n  const useInvalidatorId =\n    useInvalidator.pda.findUseInvalidatorAddress(tokenManagerId);\n\n  const [useInvalidatorData, tokenManagerData] = await Promise.all([\n    tryGetAccount(() =>\n      useInvalidator.accounts.getUseInvalidator(connection, useInvalidatorId)\n    ),\n    tryGetAccount(() =>\n      tokenManager.accounts.getTokenManager(connection, tokenManagerId)\n    ),\n  ]);\n\n  if (!useInvalidatorData) {\n    // init\n    const initIx = await usgInvalidatorProgram.methods\n      .init({\n        collector: collector ?? CRANK_KEY,\n        paymentManager: defaultPaymentManagerId,\n        totalUsages: null,\n        maxUsages: null,\n        useAuthority: null,\n        extensionPaymentAmount: null,\n        extensionPaymentMint: null,\n        extensionUsages: null,\n      })\n      .accounts({\n        tokenManager: tokenManagerId,\n        useInvalidator: useInvalidatorId,\n        issuer: wallet.publicKey,\n        payer: wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction();\n    transaction.add(initIx);\n  }\n\n  if (!tokenManagerData?.parsed.recipientTokenAccount)\n    throw new Error(\"Token manager has not been claimed\");\n\n  // use\n  const incrementUsagesIx = await usgInvalidatorProgram.methods\n    .incrementUsages(new BN(usages))\n    .accounts({\n      tokenManager: tokenManagerId,\n      useInvalidator: useInvalidatorId,\n      recipientTokenAccount: tokenManagerData?.parsed.recipientTokenAccount,\n      user: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(incrementUsagesIx);\n\n  if (\n    useInvalidatorData?.parsed.totalUsages &&\n    useInvalidatorData?.parsed.usages\n      .add(new BN(usages))\n      .gte(useInvalidatorData?.parsed.totalUsages)\n  ) {\n    const tokenManagerTokenAccountId =\n      await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        mintId,\n        tokenManagerId,\n        wallet.publicKey,\n        true\n      );\n\n    const remainingAccountsForReturn = await withRemainingAccountsForReturn(\n      transaction,\n      connection,\n      wallet,\n      tokenManagerData\n    );\n\n    const remainingAccountsForKind = getRemainingAccountsForKind(\n      mintId,\n      tokenManagerData.parsed.kind\n    );\n    const invalidateIx = await usgInvalidatorProgram.methods\n      .invalidate()\n      .accounts({\n        tokenManager: tokenManagerId,\n        useInvalidator: useInvalidatorId,\n        invalidator: wallet.publicKey,\n        cardinalTokenManager: TOKEN_MANAGER_ADDRESS,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        tokenManagerTokenAccount: tokenManagerTokenAccountId,\n        mint: mintId,\n        recipientTokenAccount: tokenManagerData.parsed.recipientTokenAccount,\n        rent: SYSVAR_RENT_PUBKEY,\n      })\n      .remainingAccounts([\n        ...remainingAccountsForKind,\n        ...remainingAccountsForReturn,\n      ])\n      .instruction();\n    transaction.add(invalidateIx);\n\n    const closeIx = await usgInvalidatorProgram.methods\n      .close()\n      .accounts({\n        tokenManager: tokenManagerId,\n        useInvalidator: useInvalidatorId,\n        collector: useInvalidatorData.parsed.collector,\n        closer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(closeIx);\n  }\n  return transaction;\n};\n\nexport const withExtendExpiration = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  secondsToAdd: number,\n  options?: {\n    payer?: PublicKey;\n  },\n  buySideTokenAccountId?: PublicKey\n): Promise<Transaction> => {\n  const tmeInvalidatorProgram = timeInvalidatorProgram(connection, wallet);\n  const timeInvalidatorId =\n    timeInvalidator.pda.findTimeInvalidatorAddress(tokenManagerId);\n  const [timeInvalidatorData, tokenManagerData] = await Promise.all([\n    timeInvalidator.accounts.getTimeInvalidator(connection, timeInvalidatorId),\n    tokenManager.accounts.getTokenManager(connection, tokenManagerId),\n  ]);\n\n  if (timeInvalidatorData && timeInvalidatorData.parsed.extensionPaymentMint) {\n    const payerTokenAccountId = await findAta(\n      timeInvalidatorData.parsed.extensionPaymentMint,\n      wallet.publicKey\n    );\n\n    const [\n      paymentTokenAccountId,\n      feeCollectorTokenAccountId,\n      remainingAccounts,\n    ] = await withRemainingAccountsForPayment(\n      transaction,\n      connection,\n      wallet,\n      tokenManagerData.parsed.mint,\n      timeInvalidatorData.parsed.extensionPaymentMint,\n      tokenManagerData.parsed.issuer,\n      timeInvalidatorData.parsed.paymentManager,\n      buySideTokenAccountId,\n      {\n        receiptMint: tokenManagerData.parsed.receiptMint,\n        payer: options?.payer,\n      }\n    );\n\n    const extendExpirationIx = await tmeInvalidatorProgram.methods\n      .extendExpiration(new BN(secondsToAdd))\n      .accounts({\n        tokenManager: tokenManagerId,\n        timeInvalidator: timeInvalidatorId,\n        paymentManager: timeInvalidatorData.parsed.paymentManager,\n        paymentTokenAccount: paymentTokenAccountId,\n        feeCollectorTokenAccount: feeCollectorTokenAccountId,\n        payer: wallet.publicKey,\n        payerTokenAccount: payerTokenAccountId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n      })\n      .remainingAccounts(remainingAccounts)\n      .instruction();\n    transaction.add(extendExpirationIx);\n  } else {\n    console.log(\"No payment mint\");\n  }\n\n  return transaction;\n};\n\nexport const withExtendUsages = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  usagesToAdd: number,\n  options?: {\n    payer?: PublicKey;\n  },\n  buySideTokenAccountId?: PublicKey\n): Promise<Transaction> => {\n  const usgInvalidatorProgram = useInvalidatorProgram(connection, wallet);\n  const useInvalidatorId =\n    useInvalidator.pda.findUseInvalidatorAddress(tokenManagerId);\n  const [useInvalidatorData, tokenManagerData] = await Promise.all([\n    useInvalidator.accounts.getUseInvalidator(connection, useInvalidatorId),\n    tokenManager.accounts.getTokenManager(connection, tokenManagerId),\n  ]);\n\n  if (useInvalidatorData && useInvalidatorData.parsed.extensionPaymentMint) {\n    const payerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      useInvalidatorData.parsed.extensionPaymentMint,\n      wallet.publicKey,\n      wallet.publicKey\n    );\n\n    const [\n      paymentTokenAccountId,\n      feeCollectorTokenAccountId,\n      remainingAccounts,\n    ] = await withRemainingAccountsForPayment(\n      transaction,\n      connection,\n      wallet,\n      tokenManagerData.parsed.mint,\n      useInvalidatorData.parsed.extensionPaymentMint,\n      tokenManagerData.parsed.issuer,\n      useInvalidatorData.parsed.paymentManager,\n      buySideTokenAccountId,\n      {\n        receiptMint: tokenManagerData.parsed.receiptMint,\n        payer: options?.payer,\n      }\n    );\n\n    const extendUsagesIx = await usgInvalidatorProgram.methods\n      .extendUsages(new BN(usagesToAdd))\n      .accounts({\n        tokenManager: tokenManagerId,\n        useInvalidator: useInvalidatorId,\n        paymentManager: useInvalidatorData.parsed.paymentManager,\n        paymentTokenAccount: paymentTokenAccountId,\n        feeCollectorTokenAccount: feeCollectorTokenAccountId,\n        payer: wallet.publicKey,\n        payerTokenAccount: payerTokenAccountId,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n      })\n      .remainingAccounts(remainingAccounts)\n      .instruction();\n    transaction.add(extendUsagesIx);\n  }\n\n  return transaction;\n};\n\nexport const withResetExpiration = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey\n): Promise<Transaction> => {\n  const tmeInvalidatorProgram = timeInvalidatorProgram(connection, wallet);\n  const timeInvalidatorId =\n    timeInvalidator.pda.findTimeInvalidatorAddress(tokenManagerId);\n  const [tokenManagerData] = await Promise.all([\n    tokenManager.accounts.getTokenManager(connection, tokenManagerId),\n  ]);\n\n  if (tokenManagerData.parsed.state === TokenManagerState.Issued) {\n    const resetExpirationIx = await tmeInvalidatorProgram.methods\n      .resetExpiration()\n      .accounts({\n        tokenManager: tokenManagerId,\n        timeInvalidator: timeInvalidatorId,\n      })\n      .instruction();\n    transaction.add(resetExpirationIx);\n  } else {\n    console.log(\"Token Manager not in state issued to reset expiration\");\n  }\n\n  return transaction;\n};\n\nexport const withUpdateMaxExpiration = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  newMaxExpiration: BN\n): Promise<Transaction> => {\n  const tmeInvalidatorProgram = timeInvalidatorProgram(connection, wallet);\n  const timeInvalidatorId =\n    timeInvalidator.pda.findTimeInvalidatorAddress(tokenManagerId);\n  const [tokenManagerData] = await Promise.all([\n    tokenManager.accounts.getTokenManager(connection, tokenManagerId),\n  ]);\n\n  if (tokenManagerData.parsed.state !== TokenManagerState.Invalidated) {\n    const updateExpirationIx = await tmeInvalidatorProgram.methods\n      .updateMaxExpiration({\n        newMaxExpiration: newMaxExpiration,\n      })\n      .accounts({\n        tokenManager: tokenManagerId,\n        timeInvalidator: timeInvalidatorId,\n        issuer: wallet.publicKey,\n      })\n      .instruction();\n    transaction.add(updateExpirationIx);\n  } else {\n    console.log(\"Token Manager not in state issued to update max expiration\");\n  }\n  return transaction;\n};\n\nexport const withTransfer = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  recipient = wallet.publicKey\n): Promise<Transaction> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const tokenManagerData = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!tokenManagerData?.parsed) {\n    throw \"No token manager found\";\n  }\n\n  const recipientTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    mintId,\n    recipient,\n    wallet.publicKey,\n    true\n  );\n\n  const remainingAccountsForKind = getRemainingAccountsForKind(\n    mintId,\n    tokenManagerData.parsed.kind\n  );\n\n  const remainingAccountsForTransfer = getRemainingAccountsForTransfer(\n    tokenManagerData.parsed.transferAuthority,\n    tokenManagerId\n  );\n\n  const transferIx = await tmManagerProgram.methods\n    .transfer()\n    .accounts({\n      tokenManager: tokenManagerId,\n      mint: mintId,\n      currentHolderTokenAccount: tokenManagerData.parsed.recipientTokenAccount,\n      recipient: recipient,\n      recipientTokenAccount: recipientTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .remainingAccounts([\n      ...remainingAccountsForKind,\n      ...remainingAccountsForTransfer,\n    ])\n    .instruction();\n  transaction.add(transferIx);\n\n  return transaction;\n};\n\nexport const withDelegate = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  recipient = wallet.publicKey\n): Promise<Transaction> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const tokenManagerData = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!tokenManagerData?.parsed) {\n    throw \"No token manager found\";\n  }\n  const mintManagerId = findMintManagerId(mintId);\n\n  const delegateIx = await tmManagerProgram.methods\n    .delegate()\n    .accounts({\n      tokenManager: tokenManagerId,\n      mint: mintId,\n      mintManager: mintManagerId,\n      recipient: recipient,\n      recipientTokenAccount: tokenManagerData.parsed.recipientTokenAccount,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .instruction();\n  transaction.add(delegateIx);\n\n  return transaction;\n};\n\nexport const withUndelegate = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  recipient?: PublicKey\n): Promise<Transaction> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const tokenManagerData = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!tokenManagerData?.parsed) {\n    throw \"No token manager found\";\n  }\n  const mintManagerId = findMintManagerId(mintId);\n\n  const recipientTokenAccountId = await findAta(\n    mintId,\n    recipient ?? wallet.publicKey,\n    true\n  );\n\n  const undelegateIx = await tmManagerProgram.methods\n    .undelegate()\n    .accounts({\n      tokenManager: tokenManagerId,\n      mint: mintId,\n      mintManager: mintManagerId,\n      recipient: recipient,\n      recipientTokenAccount: recipientTokenAccountId,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .instruction();\n  transaction.add(undelegateIx);\n\n  return transaction;\n};\n\nexport const withSend = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  senderTokenAccountId: PublicKey,\n  target: PublicKey\n): Promise<Transaction> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const tokenManagerData = await tryGetAccount(() =>\n    getTokenManager(connection, tokenManagerId)\n  );\n  if (!tokenManagerData?.parsed) {\n    throw \"No token manager found\";\n  }\n  const mintManagerId = findMintManagerId(mintId);\n  const listingId = findListingAddress(mintId);\n  const checkListing = await tryGetAccount(() =>\n    getListing(connection, listingId)\n  );\n  if (checkListing) {\n    throw \"Token is already listed. You need to delist the token first before sending it.\";\n  }\n\n  const targetTokenAccountId = await findAta(mintId, target, true);\n  const sendIx = await tmManagerProgram.methods\n    .send()\n    .accounts({\n      tokenManager: tokenManagerId,\n      mint: mintId,\n      mintManager: mintManagerId,\n      recipient: wallet.publicKey,\n      recipientTokenAccount: senderTokenAccountId,\n      target: target,\n      targetTokenAccount: targetTokenAccountId,\n      payer: wallet.publicKey,\n      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      rent: SYSVAR_RENT_PUBKEY,\n      instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n    })\n    .instruction();\n  transaction.add(sendIx);\n  return transaction;\n};\n\nexport const withMigrate = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  rulesetName: string,\n  holderTokenAccountId: PublicKey,\n  authority: PublicKey\n): Promise<Transaction> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n  const currentMintManagerId = findMintManagerId(mintId);\n  const mintManagerId = findCCSMintManagerId(mintId);\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const rulesetId = findRulesetId(rulesetName);\n  const mintMetadataId = findMintMetadataId(mintId);\n\n  const migrateIx = await tmManagerProgram.methods\n    .migrate()\n    .accountsStrict({\n      currentMintManager: currentMintManagerId,\n      mintManager: mintManagerId,\n      mint: mintId,\n      mintMetadata: mintMetadataId,\n      ruleset: rulesetId,\n      tokenManager: tokenManagerId,\n      holderTokenAccount: holderTokenAccountId,\n      tokenAuthority: currentMintManagerId,\n      authority: authority,\n      payer: wallet.publicKey,\n      rent: SYSVAR_RENT_PUBKEY,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n      cardinalCreatorStandard: PROGRAM_ADDRESS,\n    })\n    .instruction();\n  transaction.add(migrateIx);\n\n  return transaction;\n};\n\nexport const withReplaceInvalidator = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey,\n  newInvalidator: PublicKey\n): Promise<Transaction> => {\n  const tmManagerProgram = tokenManagerProgram(connection, wallet);\n\n  const replaceInvalidatorIx = await tmManagerProgram.methods\n    .replaceInvalidator(newInvalidator)\n    .accounts({\n      tokenManager: tokenManagerId,\n      invalidator: wallet.publicKey,\n    })\n    .instruction();\n\n  transaction.add(replaceInvalidatorIx);\n\n  return transaction;\n};\n"]}