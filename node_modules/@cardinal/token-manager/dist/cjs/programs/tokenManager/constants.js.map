{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../../../src/programs/tokenManager/constants.ts"],"names":[],"mappings":";;;;AACA,6CAA+C;AAC/C,kDAAgE;AAGhE,6CAAqD;AAErD,8FAAwE;AAE3D,QAAA,qBAAqB,GAAG,IAAI,mBAAS,CAChD,6CAA6C,CAC9C,CAAC;AAEW,QAAA,iBAAiB,GAAG,cAAc,CAAC;AAEnC,QAAA,iBAAiB,GAAG,cAAc,CAAC;AAEnC,QAAA,qBAAqB,GAAG,kBAAkB,CAAC;AAE3C,QAAA,kBAAkB,GAAG,eAAe,CAAC;AAErC,QAAA,kBAAkB,GAAG,eAAe,CAAC;AAErC,QAAA,yBAAyB,GAAG,sBAAsB,CAAC;AAEnD,QAAA,iBAAiB,GAAG,mBAAmB,CAAC,GAAG,CAAC;AAwBzD,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC1B,6DAAW,CAAA;IACX,iEAAa,CAAA;IACb,6DAAW,CAAA;IACX,uEAAgB,CAAA;IAChB,uEAAgB,CAAA;AAClB,CAAC,EANW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAM3B;AAED,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC1B,2DAAU,CAAA;IACV,mEAAc,CAAA;IACd,6DAAW,CAAA;IACX,6DAAW,CAAA;IACX,uDAAQ,CAAA;AACV,CAAC,EANW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAM3B;AAED,IAAY,iBAKX;AALD,WAAY,iBAAiB;IAC3B,uEAAe,CAAA;IACf,6DAAU,CAAA;IACV,+DAAW,CAAA;IACX,uEAAe,CAAA;AACjB,CAAC,EALW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAK5B;AAEY,QAAA,SAAS,GAAG,IAAI,mBAAS,CACpC,6CAA6C,CAC9C,CAAC;AAEK,MAAM,mBAAmB,GAAG,CACjC,UAAsB,EACtB,MAAe,EACf,cAA+B,EAC/B,EAAE;IACF,OAAO,IAAI,gBAAO,CAChB,yBAAiB,EACjB,6BAAqB,EACrB,IAAI,uBAAc,CAChB,UAAU,EACV,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,IAAA,oBAAW,EAAC,iBAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,EACnD,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,EAAE,CACrB,CACF,CAAC;AACJ,CAAC,CAAC;AAdW,QAAA,mBAAmB,uBAc9B","sourcesContent":["import type { ParsedIdlAccountData } from \"@cardinal/common\";\nimport { emptyWallet } from \"@cardinal/common\";\nimport { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { ConfirmOptions, Connection } from \"@solana/web3.js\";\nimport { Keypair, PublicKey } from \"@solana/web3.js\";\n\nimport * as TOKEN_MANAGER_TYPES from \"../../idl/cardinal_token_manager\";\n\nexport const TOKEN_MANAGER_ADDRESS = new PublicKey(\n  \"mgr99QFMYByTqGPWmNqunV7vBLmWWXdSrHUfV8Jf3JM\"\n);\n\nexport const MINT_COUNTER_SEED = \"mint-counter\";\n\nexport const MINT_MANAGER_SEED = \"mint-manager\";\n\nexport const TRANSFER_RECEIPT_SEED = \"transfer-receipt\";\n\nexport const CLAIM_RECEIPT_SEED = \"claim-receipt\";\n\nexport const TOKEN_MANAGER_SEED = \"token-manager\";\n\nexport const RECEIPT_MINT_MANAGER_SEED = \"receipt-mint-manager\";\n\nexport const TOKEN_MANAGER_IDL = TOKEN_MANAGER_TYPES.IDL;\n\nexport type TOKEN_MANAGER_PROGRAM = TOKEN_MANAGER_TYPES.CardinalTokenManager;\n\nexport type TokenManagerData = ParsedIdlAccountData<\n  \"tokenManager\",\n  TOKEN_MANAGER_PROGRAM\n>;\n\nexport type MintManagerData = ParsedIdlAccountData<\n  \"mintManager\",\n  TOKEN_MANAGER_PROGRAM\n>;\n\nexport type MintCounterData = ParsedIdlAccountData<\n  \"mintCounter\",\n  TOKEN_MANAGER_PROGRAM\n>;\n\nexport type TransferReceiptData = ParsedIdlAccountData<\n  \"transferReceipt\",\n  TOKEN_MANAGER_PROGRAM\n>;\n\nexport enum TokenManagerKind {\n  Managed = 1,\n  Unmanaged = 2,\n  Edition = 3,\n  Permissioned = 4,\n  Programmable = 5,\n}\n\nexport enum InvalidationType {\n  Return = 1,\n  Invalidate = 2,\n  Release = 3,\n  Reissue = 4,\n  Vest = 5,\n}\n\nexport enum TokenManagerState {\n  Initialized = 0,\n  Issued = 1,\n  Claimed = 2,\n  Invalidated = 3,\n}\n\nexport const CRANK_KEY = new PublicKey(\n  \"crkdpVWjHWdggGgBuSyAqSmZUmAjYLzD435tcLDRLXr\"\n);\n\nexport const tokenManagerProgram = (\n  connection: Connection,\n  wallet?: Wallet,\n  confirmOptions?: ConfirmOptions\n) => {\n  return new Program<TOKEN_MANAGER_PROGRAM>(\n    TOKEN_MANAGER_IDL,\n    TOKEN_MANAGER_ADDRESS,\n    new AnchorProvider(\n      connection,\n      wallet ?? emptyWallet(Keypair.generate().publicKey),\n      confirmOptions ?? {}\n    )\n  );\n};\n"]}