{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/timeInvalidator/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { BN, BorshAccountsCoder } from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type { TimeInvalidatorData } from \"./constants\";\nimport {\n  TIME_INVALIDATOR_ADDRESS,\n  TIME_INVALIDATOR_IDL,\n  timeInvalidatorProgram,\n} from \"./constants\";\n\nexport const getTimeInvalidator = async (\n  connection: Connection,\n  timeInvalidatorId: PublicKey\n): Promise<AccountData<TimeInvalidatorData>> => {\n  const program = timeInvalidatorProgram(connection);\n\n  const parsed = await program.account.timeInvalidator.fetch(timeInvalidatorId);\n  return {\n    parsed,\n    pubkey: timeInvalidatorId,\n  };\n};\n\nexport const getTimeInvalidators = async (\n  connection: Connection,\n  timeInvalidatorIds: PublicKey[]\n): Promise<AccountData<TimeInvalidatorData | null>[]> => {\n  const program = timeInvalidatorProgram(connection);\n\n  let timeInvalidators: (TimeInvalidatorData | null)[] = [];\n  try {\n    timeInvalidators = (await program.account.timeInvalidator.fetchMultiple(\n      timeInvalidatorIds\n    )) as (TimeInvalidatorData | null)[];\n  } catch (e) {\n    console.log(e);\n  }\n  return timeInvalidators.map((data, i) => ({\n    parsed: data,\n    pubkey: timeInvalidatorIds[i]!,\n  }));\n};\n\nexport const getExpiredTimeInvalidators = async (\n  connection: Connection\n): Promise<AccountData<TimeInvalidatorData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TIME_INVALIDATOR_ADDRESS\n  );\n\n  const expiredTimeInvalidators: AccountData<TimeInvalidatorData>[] = [];\n  const coder = new BorshAccountsCoder(TIME_INVALIDATOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const timeInvalidatorData: TimeInvalidatorData = coder.decode(\n        \"timeInvalidator\",\n        account.account.data\n      );\n      if (timeInvalidatorData.expiration?.lte(new BN(Date.now() / 1000))) {\n        expiredTimeInvalidators.push({\n          ...account,\n          parsed: timeInvalidatorData,\n        });\n      }\n    } catch (e) {\n      console.log(`Failed to decode time invalidator data`);\n    }\n  });\n  return expiredTimeInvalidators;\n};\n\nexport const getAllTimeInvalidators = async (\n  connection: Connection\n): Promise<AccountData<TimeInvalidatorData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TIME_INVALIDATOR_ADDRESS\n  );\n\n  const expiredTimeInvalidators: AccountData<TimeInvalidatorData>[] = [];\n  const coder = new BorshAccountsCoder(TIME_INVALIDATOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const timeInvalidatorData: TimeInvalidatorData = coder.decode(\n        \"timeInvalidator\",\n        account.account.data\n      );\n      expiredTimeInvalidators.push({\n        ...account,\n        parsed: timeInvalidatorData,\n      });\n    } catch (e) {\n      console.log(`Failed to decode time invalidator data`);\n    }\n  });\n  return expiredTimeInvalidators;\n};\n"]}