{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../../../src/programs/useInvalidator/constants.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAGhE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAErD,OAAO,KAAK,qBAAqB,MAAM,oCAAoC,CAAC;AAE5E,MAAM,CAAC,MAAM,uBAAuB,GAAG,IAAI,SAAS,CAClD,6CAA6C,CAC9C,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,iBAAiB,CAAC;AAEtD,MAAM,CAAC,MAAM,mBAAmB,GAAG,qBAAqB,CAAC,GAAG,CAAC;AAuB7D,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,UAAsB,EACtB,MAAe,EACf,cAA+B,EAC/B,EAAE;IACF,OAAO,IAAI,OAAO,CAChB,mBAAmB,EACnB,uBAAuB,EACvB,IAAI,cAAc,CAChB,UAAU,EACV,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,EACnD,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,EAAE,CACrB,CACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { ParsedIdlAccountData } from \"@cardinal/common\";\nimport { emptyWallet } from \"@cardinal/common\";\nimport { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { ConfirmOptions, Connection } from \"@solana/web3.js\";\nimport { Keypair, PublicKey } from \"@solana/web3.js\";\n\nimport * as USE_INVALIDATOR_TYPES from \"../../idl/cardinal_use_invalidator\";\n\nexport const USE_INVALIDATOR_ADDRESS = new PublicKey(\n  \"useZ65tbyvWpdYCLDJaegGK34Lnsi8S3jZdwx8122qp\"\n);\n\nexport const USE_INVALIDATOR_SEED = \"use-invalidator\";\n\nexport const USE_INVALIDATOR_IDL = USE_INVALIDATOR_TYPES.IDL;\n\nexport type USE_INVALIDATOR_PROGRAM =\n  USE_INVALIDATOR_TYPES.CardinalUseInvalidator;\n\nexport type UseInvalidatorData = ParsedIdlAccountData<\n  \"useInvalidator\",\n  USE_INVALIDATOR_PROGRAM\n>;\n\nexport type UseInvalidationParams = {\n  collector?: PublicKey;\n  paymentManager?: PublicKey;\n  totalUsages?: number;\n  useAuthority?: PublicKey;\n  extension?: {\n    extensionUsages: number;\n    extensionPaymentMint: PublicKey;\n    extensionPaymentAmount: number;\n    maxUsages?: number;\n  };\n};\n\nexport const useInvalidatorProgram = (\n  connection: Connection,\n  wallet?: Wallet,\n  confirmOptions?: ConfirmOptions\n) => {\n  return new Program<USE_INVALIDATOR_PROGRAM>(\n    USE_INVALIDATOR_IDL,\n    USE_INVALIDATOR_ADDRESS,\n    new AnchorProvider(\n      connection,\n      wallet ?? emptyWallet(Keypair.generate().publicKey),\n      confirmOptions ?? {}\n    )\n  );\n};\n"]}