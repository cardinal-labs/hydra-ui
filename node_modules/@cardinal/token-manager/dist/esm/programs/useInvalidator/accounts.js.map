{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/useInvalidator/accounts.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,qBAAqB,EAAE,MAAM,aAAa,CAAC;AAEpD,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EACpC,UAAsB,EACtB,gBAA2B,EACe,EAAE;IAC5C,MAAM,OAAO,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAC;IAElD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IAC5E,OAAO;QACL,MAAM;QACN,MAAM,EAAE,gBAAgB;KACzB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,KAAK,EACrC,UAAsB,EACtB,iBAA8B,EACqB,EAAE;IACrD,MAAM,OAAO,GAAG,qBAAqB,CAAC,UAAU,CAAC,CAAC;IAElD,IAAI,eAAe,GAAkC,EAAE,CAAC;IACxD,IAAI;QACF,eAAe,GAAG,CAAC,MAAM,OAAO,CAAC,OAAO,CAAC,cAAc,CAAC,aAAa,CACnE,iBAAiB,CAClB,CAAkC,CAAC;KACrC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;IACD,OAAO,eAAe,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACzC,MAAM;QACN,MAAM,EAAE,iBAAiB,CAAC,CAAC,CAAE;KAC9B,CAAC,CAAC,CAAC;AACN,CAAC,CAAC","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type { UseInvalidatorData } from \"./constants\";\nimport { useInvalidatorProgram } from \"./constants\";\n\nexport const getUseInvalidator = async (\n  connection: Connection,\n  useInvalidatorId: PublicKey\n): Promise<AccountData<UseInvalidatorData>> => {\n  const program = useInvalidatorProgram(connection);\n\n  const parsed = await program.account.useInvalidator.fetch(useInvalidatorId);\n  return {\n    parsed,\n    pubkey: useInvalidatorId,\n  };\n};\n\nexport const getUseInvalidators = async (\n  connection: Connection,\n  useInvalidatorIds: PublicKey[]\n): Promise<AccountData<UseInvalidatorData | null>[]> => {\n  const program = useInvalidatorProgram(connection);\n\n  let useInvalidators: (UseInvalidatorData | null)[] = [];\n  try {\n    useInvalidators = (await program.account.useInvalidator.fetchMultiple(\n      useInvalidatorIds\n    )) as (UseInvalidatorData | null)[];\n  } catch (e) {\n    console.log(e);\n  }\n  return useInvalidators.map((parsed, i) => ({\n    parsed,\n    pubkey: useInvalidatorIds[i]!,\n  }));\n};\n"]}