{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/transferAuthority/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { BorshAccountsCoder, utils } from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type {\n  ListingData,\n  MarketplaceData,\n  TransferAuthorityData,\n  TransferData,\n} from \"./constants\";\nimport {\n  TRANSFER_AUTHORITY_ADDRESS,\n  TRANSFER_AUTHORITY_IDL,\n  transferAuthorityProgram,\n} from \"./constants\";\nimport {\n  findListingAddress,\n  findMarketplaceAddress,\n  findTransferAddress,\n  findTransferAuthorityAddress,\n} from \"./pda\";\n\n//////// TRANSFER AUTHORITY ////////\n\nexport const getTransferAuthority = async (\n  connection: Connection,\n  transferAuthorityId: PublicKey\n): Promise<AccountData<TransferAuthorityData>> => {\n  const program = transferAuthorityProgram(connection);\n\n  const parsed = await program.account.transferAuthority.fetch(\n    transferAuthorityId\n  );\n  return {\n    parsed,\n    pubkey: transferAuthorityId,\n  };\n};\n\nexport const getTransferAuthorityByName = async (\n  connection: Connection,\n  name: string\n): Promise<AccountData<TransferAuthorityData>> => {\n  const program = transferAuthorityProgram(connection);\n\n  const transferAuthorityId = findTransferAuthorityAddress(name);\n\n  const parsed = await program.account.transferAuthority.fetch(\n    transferAuthorityId\n  );\n  return {\n    parsed,\n    pubkey: transferAuthorityId,\n  };\n};\n\nexport const getAllTransferAuthorities = async (\n  connection: Connection\n): Promise<AccountData<TransferAuthorityData>[]> =>\n  getAllOfType<TransferAuthorityData>(connection, \"transferAuthority\");\n\n//////// MARKETPLACE ////////\n\nexport const getMarketplace = async (\n  connection: Connection,\n  marketplaceId: PublicKey\n): Promise<AccountData<MarketplaceData>> => {\n  const program = transferAuthorityProgram(connection);\n\n  const parsed = await program.account.marketplace.fetch(marketplaceId);\n  return {\n    parsed,\n    pubkey: marketplaceId,\n  };\n};\n\nexport const getMarketplaceByName = async (\n  connection: Connection,\n  name: string\n): Promise<AccountData<MarketplaceData>> => {\n  const program = transferAuthorityProgram(connection);\n\n  const marketplaceId = findMarketplaceAddress(name);\n\n  const parsed = await program.account.marketplace.fetch(marketplaceId);\n  return {\n    parsed,\n    pubkey: marketplaceId,\n  };\n};\n\nexport const getAllMarketplaces = async (\n  connection: Connection\n): Promise<AccountData<MarketplaceData>[]> =>\n  getAllOfType<MarketplaceData>(connection, \"marketplace\");\n\n//////// LISTING ////////\n\nexport const getListing = async (\n  connection: Connection,\n  mintId: PublicKey\n): Promise<AccountData<ListingData>> => {\n  const program = transferAuthorityProgram(connection);\n\n  const listingId = findListingAddress(mintId);\n\n  const parsed = await program.account.listing.fetch(listingId);\n  return {\n    parsed,\n    pubkey: listingId,\n  };\n};\n\nexport const getListingsForMarketplace = async (\n  connection: Connection,\n  marketplaceId: PublicKey\n): Promise<AccountData<ListingData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TRANSFER_AUTHORITY_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"listing\")\n            ),\n          },\n        },\n        { memcmp: { offset: 73, bytes: marketplaceId.toBase58() } },\n      ],\n    }\n  );\n\n  const datas: AccountData<ListingData>[] = [];\n  const coder = new BorshAccountsCoder(TRANSFER_AUTHORITY_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const data: ListingData = coder.decode(\"listing\", account.account.data);\n      if (data) {\n        datas.push({\n          ...account,\n          parsed: data,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n\n  return datas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getListingsForIssuer = async (\n  connection: Connection,\n  issuerId: PublicKey\n): Promise<AccountData<ListingData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TRANSFER_AUTHORITY_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"listing\")\n            ),\n          },\n        },\n        { memcmp: { offset: 9, bytes: issuerId.toBase58() } },\n      ],\n    }\n  );\n\n  const datas: AccountData<ListingData>[] = [];\n  const coder = new BorshAccountsCoder(TRANSFER_AUTHORITY_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const data: ListingData = coder.decode(\"listing\", account.account.data);\n      if (data) {\n        datas.push({\n          ...account,\n          parsed: data,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n\n  return datas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getAllListings = async (\n  connection: Connection\n): Promise<AccountData<ListingData>[]> =>\n  getAllOfType<ListingData>(connection, \"listing\");\n\n//////// Transfer ////////\n\nexport const getTransfer = async (\n  connection: Connection,\n  mintId: PublicKey\n): Promise<AccountData<TransferData>> => {\n  const program = transferAuthorityProgram(connection);\n\n  const transferId = findTransferAddress(mintId);\n  const parsed = await program.account.transfer.fetch(transferId);\n  return {\n    parsed,\n    pubkey: transferId,\n  };\n};\n\nexport const getTransfersFromUser = async (\n  connection: Connection,\n  from: PublicKey\n): Promise<AccountData<TransferData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TRANSFER_AUTHORITY_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"transfer\")\n            ),\n          },\n        },\n        { memcmp: { offset: 41, bytes: from.toBase58() } },\n      ],\n    }\n  );\n\n  const datas: AccountData<TransferData>[] = [];\n  const coder = new BorshAccountsCoder(TRANSFER_AUTHORITY_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const data: TransferData = coder.decode(\"transfer\", account.account.data);\n      if (data) {\n        datas.push({\n          ...account,\n          parsed: data,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n\n  return datas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getTransfersToUser = async (\n  connection: Connection,\n  to: PublicKey\n): Promise<AccountData<TransferData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TRANSFER_AUTHORITY_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"transfer\")\n            ),\n          },\n        },\n        { memcmp: { offset: 73, bytes: to.toBase58() } },\n      ],\n    }\n  );\n\n  const datas: AccountData<TransferData>[] = [];\n  const coder = new BorshAccountsCoder(TRANSFER_AUTHORITY_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const data: TransferData = coder.decode(\"transfer\", account.account.data);\n      if (data) {\n        datas.push({\n          ...account,\n          parsed: data,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n\n  return datas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\n//////// utils ////////\nexport const getAllOfType = async <T>(\n  connection: Connection,\n  key: string\n): Promise<AccountData<T>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    TRANSFER_AUTHORITY_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(key)\n            ),\n          },\n        },\n      ],\n    }\n  );\n\n  const datas: AccountData<T>[] = [];\n  const coder = new BorshAccountsCoder(TRANSFER_AUTHORITY_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const data: T = coder.decode(key, account.account.data);\n      if (data) {\n        datas.push({\n          ...account,\n          parsed: data,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n\n  return datas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n"]}