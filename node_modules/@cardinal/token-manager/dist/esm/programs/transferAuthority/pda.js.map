{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/transferAuthority/pda.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,uBAAuB,CAAC;AAC9C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EAAE,uBAAuB,EAAE,MAAM,qBAAqB,CAAC;AAC9D,OAAO,EACL,YAAY,EACZ,gBAAgB,EAChB,0BAA0B,EAC1B,uBAAuB,EACvB,aAAa,GACd,MAAM,aAAa,CAAC;AAErB;;;GAGG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,IAAY,EAAa,EAAE;IACtE,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC;QAChD,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;KAC9B,EACD,0BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,IAAY,EAAa,EAAE;IAChE,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAC1E,0BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,MAAiB,EAAa,EAAE;IACjE,MAAM,cAAc,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACvD,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,cAAc,CAAC,OAAO,EAAE,CAAC,EACjE,0BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,MAAiB,EAAa,EAAE;IAClE,MAAM,cAAc,GAAG,uBAAuB,CAAC,MAAM,CAAC,CAAC;IACvD,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,cAAc,CAAC,OAAO,EAAE,CAAC,EAClE,0BAA0B,CAC3B,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { utils } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { findTokenManagerAddress } from \"../tokenManager/pda\";\nimport {\n  LISTING_SEED,\n  MARKETPLACE_SEED,\n  TRANSFER_AUTHORITY_ADDRESS,\n  TRANSFER_AUTHORITY_SEED,\n  TRANSFER_SEED,\n} from \"./constants\";\n\n/**\n * Finds the address of the transfer authority.\n * @returns\n */\nexport const findTransferAuthorityAddress = (name: string): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(TRANSFER_AUTHORITY_SEED),\n      utils.bytes.utf8.encode(name),\n    ],\n    TRANSFER_AUTHORITY_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the address of the marketplace.\n * @returns\n */\nexport const findMarketplaceAddress = (name: string): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(MARKETPLACE_SEED), utils.bytes.utf8.encode(name)],\n    TRANSFER_AUTHORITY_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the address of the listing.\n * @returns\n */\nexport const findListingAddress = (mintId: PublicKey): PublicKey => {\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(LISTING_SEED), tokenManagerId.toBytes()],\n    TRANSFER_AUTHORITY_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the address of the transfer.\n * @returns\n */\nexport const findTransferAddress = (mintId: PublicKey): PublicKey => {\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(TRANSFER_SEED), tokenManagerId.toBytes()],\n    TRANSFER_AUTHORITY_ADDRESS\n  )[0];\n};\n"]}