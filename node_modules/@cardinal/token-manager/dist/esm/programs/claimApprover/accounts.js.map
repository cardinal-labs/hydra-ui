{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/claimApprover/accounts.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAI3D,OAAO,EACL,sBAAsB,EACtB,kBAAkB,EAClB,oBAAoB,GACrB,MAAM,aAAa,CAAC;AACrB,OAAO,EAAE,wBAAwB,EAAE,MAAM,OAAO,CAAC;AAEjD,MAAM,CAAC,MAAM,gBAAgB,GAAG,KAAK,EACnC,UAAsB,EACtB,cAAyB,EACoB,EAAE;IAC/C,MAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;IACjD,MAAM,eAAe,GAAG,wBAAwB,CAAC,cAAc,CAAC,CAAC;IAEjE,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAC9E,OAAO;QACL,MAAM;QACN,MAAM,EAAE,eAAe;KACxB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,KAAK,EACpC,UAAsB,EACtB,gBAA6B,EACyB,EAAE;IACxD,MAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,CAAC;IACjD,IAAI,cAAc,GAAqC,EAAE,CAAC;IAC1D,IAAI;QACF,cAAc,GAAG,CAAC,MAAM,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,aAAa,CACrE,gBAAgB,CACjB,CAAqC,CAAC;KACxC;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KAChB;IACD,OAAO,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACpC,MAAM,EAAE,EAAE;QACV,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAE;KAC7B,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,KAAK,EACvC,UAAsB,EACyB,EAAE;IACjD,MAAM,eAAe,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACzD,sBAAsB,CACvB,CAAC;IAEF,MAAM,cAAc,GAAyC,EAAE,CAAC;IAChE,MAAM,KAAK,GAAG,IAAI,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;IACzD,eAAe,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;QAClC,IAAI;YACF,MAAM,iBAAiB,GAA0B,KAAK,CAAC,MAAM,CAC3D,mBAAmB,EACnB,OAAO,CAAC,OAAO,CAAC,IAAI,CACrB,CAAC;YACF,cAAc,CAAC,IAAI,CAAC;gBAClB,GAAG,OAAO;gBACV,MAAM,EAAE,iBAAiB;aAC1B,CAAC,CAAC;SACJ;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;SACrD;IACH,CAAC,CAAC,CAAC;IACH,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { BorshAccountsCoder } from \"@project-serum/anchor\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\n\nimport type { PaidClaimApproverData } from \"./constants\";\nimport {\n  CLAIM_APPROVER_ADDRESS,\n  CLAIM_APPROVER_IDL,\n  claimApproverProgram,\n} from \"./constants\";\nimport { findClaimApproverAddress } from \"./pda\";\n\nexport const getClaimApprover = async (\n  connection: Connection,\n  tokenManagerId: PublicKey\n): Promise<AccountData<PaidClaimApproverData>> => {\n  const program = claimApproverProgram(connection);\n  const claimApproverId = findClaimApproverAddress(tokenManagerId);\n\n  const parsed = await program.account.paidClaimApprover.fetch(claimApproverId);\n  return {\n    parsed,\n    pubkey: claimApproverId,\n  };\n};\n\nexport const getClaimApprovers = async (\n  connection: Connection,\n  claimApproverIds: PublicKey[]\n): Promise<AccountData<PaidClaimApproverData | null>[]> => {\n  const program = claimApproverProgram(connection);\n  let claimApprovers: (PaidClaimApproverData | null)[] = [];\n  try {\n    claimApprovers = (await program.account.paidClaimApprover.fetchMultiple(\n      claimApproverIds\n    )) as (PaidClaimApproverData | null)[];\n  } catch (e) {\n    console.log(e);\n  }\n  return claimApprovers.map((tm, i) => ({\n    parsed: tm,\n    pubkey: claimApproverIds[i]!,\n  }));\n};\n\nexport const getAllClaimApprovers = async (\n  connection: Connection\n): Promise<AccountData<PaidClaimApproverData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    CLAIM_APPROVER_ADDRESS\n  );\n\n  const claimApprovers: AccountData<PaidClaimApproverData>[] = [];\n  const coder = new BorshAccountsCoder(CLAIM_APPROVER_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const claimApproverData: PaidClaimApproverData = coder.decode(\n        \"paidClaimApprover\",\n        account.account.data\n      );\n      claimApprovers.push({\n        ...account,\n        parsed: claimApproverData,\n      });\n    } catch (e) {\n      console.log(`Failed to decode claim approver data`);\n    }\n  });\n  return claimApprovers;\n};\n"]}