{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../../../src/programs/claimApprover/constants.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,4BAA4B,EAAE,MAAM,2BAA2B,CAAC;AACzE,OAAO,EAAE,yBAAyB,EAAE,MAAM,wCAAwC,CAAC;AACnF,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAGhE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAErD,OAAO,KAAK,oBAAoB,MAAM,wCAAwC,CAAC;AAE/E,MAAM,CAAC,MAAM,sBAAsB,GAAG,IAAI,SAAS,CACjD,6CAA6C,CAC9C,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,qBAAqB,CAAC;AAEzD,MAAM,CAAC,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,GAAG,CAAC;AAU3D,MAAM,CAAC,MAAM,uBAAuB,GAAG,yBAAyB,CAC9D,4BAA4B,CAC7B,CAAC;AASF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,UAAsB,EACtB,MAAe,EACf,cAA+B,EAC/B,EAAE;IACF,OAAO,IAAI,OAAO,CAChB,kBAAkB,EAClB,sBAAsB,EACtB,IAAI,cAAc,CAChB,UAAU,EACV,MAAM,aAAN,MAAM,cAAN,MAAM,GAAI,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC,EACnD,cAAc,aAAd,cAAc,cAAd,cAAc,GAAI,EAAE,CACrB,CACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { ParsedIdlAccountData } from \"@cardinal/common\";\nimport { emptyWallet } from \"@cardinal/common\";\nimport { DEFAULT_PAYMENT_MANAGER_NAME } from \"@cardinal/payment-manager\";\nimport { findPaymentManagerAddress } from \"@cardinal/payment-manager/dist/cjs/pda\";\nimport { AnchorProvider, Program } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { ConfirmOptions, Connection } from \"@solana/web3.js\";\nimport { Keypair, PublicKey } from \"@solana/web3.js\";\n\nimport * as CLAIM_APPROVER_TYPES from \"../../idl/cardinal_paid_claim_approver\";\n\nexport const CLAIM_APPROVER_ADDRESS = new PublicKey(\n  \"pcaBwhJ1YHp7UDA7HASpQsRUmUNwzgYaLQto2kSj1fR\"\n);\n\nexport const CLAIM_APPROVER_SEED = \"paid-claim-approver\";\n\nexport const CLAIM_APPROVER_IDL = CLAIM_APPROVER_TYPES.IDL;\n\nexport type CLAIM_APPROVER_PROGRAM =\n  CLAIM_APPROVER_TYPES.CardinalPaidClaimApprover;\n\nexport type PaidClaimApproverData = ParsedIdlAccountData<\n  \"paidClaimApprover\",\n  CLAIM_APPROVER_PROGRAM\n>;\n\nexport const defaultPaymentManagerId = findPaymentManagerAddress(\n  DEFAULT_PAYMENT_MANAGER_NAME\n);\n\nexport type ClaimApproverParams = {\n  paymentMint: PublicKey;\n  paymentAmount: number;\n  collector?: PublicKey;\n  paymentManager?: PublicKey;\n};\n\nexport const claimApproverProgram = (\n  connection: Connection,\n  wallet?: Wallet,\n  confirmOptions?: ConfirmOptions\n) => {\n  return new Program<CLAIM_APPROVER_PROGRAM>(\n    CLAIM_APPROVER_IDL,\n    CLAIM_APPROVER_ADDRESS,\n    new AnchorProvider(\n      connection,\n      wallet ?? emptyWallet(Keypair.generate().publicKey),\n      confirmOptions ?? {}\n    )\n  );\n};\n"]}