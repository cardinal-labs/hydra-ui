{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/tokenManager/pda.ts"],"names":[],"mappings":"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","sourcesContent":["import { utils } from \"@project-serum/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  MINT_COUNTER_SEED,\n  MINT_MANAGER_SEED,\n  RECEIPT_MINT_MANAGER_SEED,\n  TRANSFER_RECEIPT_SEED,\n} from \".\";\nimport {\n  CLAIM_RECEIPT_SEED,\n  TOKEN_MANAGER_ADDRESS,\n  TOKEN_MANAGER_SEED,\n} from \"./constants\";\n\n/**\n * Finds the token manager address for a given mint\n * @returns\n */\nexport const tryTokenManagerAddressFromMint = (\n  mint: PublicKey\n): PublicKey | null => {\n  try {\n    const tokenManagerId = tokenManagerAddressFromMint(mint);\n    return tokenManagerId;\n  } catch (e) {\n    return null;\n  }\n};\n\n/**\n * Finds the token manager address for a given mint\n * @returns\n */\nexport const tokenManagerAddressFromMint = (mint: PublicKey): PublicKey => {\n  const tokenManagerId = findTokenManagerAddress(mint);\n  return tokenManagerId;\n};\n\n/**\n * Finds the token manager address for a given mint and mint counter\n * @returns\n */\nexport const findTokenManagerAddress = (mint: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(TOKEN_MANAGER_SEED), mint.toBuffer()],\n    TOKEN_MANAGER_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the claim receipt id.\n * @returns\n */\nexport const findClaimReceiptId = (\n  tokenManagerId: PublicKey,\n  recipientKey: PublicKey\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(CLAIM_RECEIPT_SEED),\n      tokenManagerId.toBuffer(),\n      recipientKey.toBuffer(),\n    ],\n    TOKEN_MANAGER_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the transfer receipt id.\n * @returns\n */\nexport const findTransferReceiptId = (tokenManagerId: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(TRANSFER_RECEIPT_SEED), tokenManagerId.toBuffer()],\n    TOKEN_MANAGER_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the mint manager id.\n * @returns\n */\nexport const findMintManagerId = (mintId: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(MINT_MANAGER_SEED), mintId.toBuffer()],\n    TOKEN_MANAGER_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the mint counter id.\n * @returns\n */\nexport const findMintCounterId = (mintId: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(MINT_COUNTER_SEED), mintId.toBuffer()],\n    TOKEN_MANAGER_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the receipt mint manager id.\n * @returns\n */\nexport const findReceiptMintManagerId = (): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(RECEIPT_MINT_MANAGER_SEED)],\n    TOKEN_MANAGER_ADDRESS\n  )[0];\n};\n"]}