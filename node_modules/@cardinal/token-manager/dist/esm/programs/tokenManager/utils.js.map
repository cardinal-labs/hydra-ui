{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/programs/tokenManager/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport {\n  decodeIdlAccount,\n  findMintEditionId,\n  findMintMetadataId,\n  METADATA_PROGRAM_ID,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport {\n  PREFIX as TOKEN_AUTH_RULESET_PREFIX,\n  PROGRAM_ID as TOKEN_AUTH_RULES_ID,\n} from \"@metaplex-foundation/mpl-token-auth-rules\";\nimport {\n  Metadata,\n  TokenStandard,\n} from \"@metaplex-foundation/mpl-token-metadata\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  getAccount,\n  getAssociatedTokenAddressSync,\n} from \"@solana/spl-token\";\nimport type { AccountMeta, Connection } from \"@solana/web3.js\";\nimport {\n  PublicKey,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport type { CardinalTokenManager } from \"../../idl/cardinal_token_manager\";\nimport type { TokenManagerData } from \".\";\nimport {\n  CRANK_KEY,\n  InvalidationType,\n  TOKEN_MANAGER_IDL,\n  TokenManagerKind,\n  TokenManagerState,\n} from \".\";\nimport {\n  findMintManagerId,\n  findTokenManagerAddress,\n  findTransferReceiptId,\n} from \"./pda\";\n\nexport const getRemainingAccountsForKind = (\n  mintId: PublicKey,\n  tokenManagerKind: TokenManagerKind\n): AccountMeta[] => {\n  if (\n    tokenManagerKind === TokenManagerKind.Managed ||\n    tokenManagerKind === TokenManagerKind.Permissioned\n  ) {\n    return [\n      {\n        pubkey: findMintManagerId(mintId),\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n  } else if (tokenManagerKind === TokenManagerKind.Edition) {\n    return [\n      {\n        pubkey: findMintEditionId(mintId),\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: METADATA_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const getRemainingAccountsForUnissue = (\n  tokenManagerId: PublicKey,\n  tokenManagerData: TokenManagerData,\n  metadata: Metadata | null\n): AccountMeta[] => {\n  const remainingAccounts: AccountMeta[] = [];\n  if (\n    tokenManagerData.kind !== TokenManagerKind.Programmable &&\n    metadata?.tokenStandard === TokenStandard.ProgrammableNonFungible\n  ) {\n    remainingAccounts.push({\n      pubkey: findMintMetadataId(tokenManagerData.mint),\n      isSigner: false,\n      isWritable: false,\n    });\n  }\n  if (metadata?.programmableConfig?.ruleSet) {\n    remainingAccounts.push(\n      { pubkey: SystemProgram.programId, isSigner: false, isWritable: false },\n      ...remainingAccountForProgrammable(\n        tokenManagerData.mint,\n        getAssociatedTokenAddressSync(\n          tokenManagerData.mint,\n          tokenManagerId,\n          true\n        ),\n        getAssociatedTokenAddressSync(\n          tokenManagerData.mint,\n          tokenManagerData.issuer,\n          true\n        ),\n        metadata?.programmableConfig?.ruleSet ?? undefined\n      )\n    );\n  }\n  return remainingAccounts;\n};\n\n/**\n * Convenience method to get remaining accounts for invalidation\n * NOTE: This ignores token account creation and assumes that is handled outside. Use withRemainingAccountsForInvalidate\n * to include token account creation in the current transaction\n * @param connection\n * @param mintId\n * @returns\n */\nexport const getRemainingAccountsForInvalidate = async (\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey\n) => {\n  const tokenManagerId = findTokenManagerAddress(mintId);\n  const [tokenManagerInfo, metadataInfo] =\n    await connection.getMultipleAccountsInfo([\n      tokenManagerId,\n      findMintMetadataId(mintId),\n    ]);\n  if (!tokenManagerInfo) throw \"Token manager not found\";\n  const tokenManagerData = decodeIdlAccount<\n    \"tokenManager\",\n    CardinalTokenManager\n  >(tokenManagerInfo, \"tokenManager\", TOKEN_MANAGER_IDL);\n  if (!metadataInfo) throw \"Metadata not found\";\n  const metadata = Metadata.deserialize(metadataInfo.data)[0];\n\n  const receipientTokenAccount = await getAccount(\n    connection,\n    tokenManagerData.parsed.recipientTokenAccount\n  );\n\n  return await withRemainingAccountsForInvalidate(\n    new Transaction(),\n    connection,\n    wallet,\n    mintId,\n    { ...tokenManagerData, pubkey: tokenManagerId },\n    receipientTokenAccount.owner,\n    metadata\n  );\n};\n\nexport const withRemainingAccountsForInvalidate = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mintId: PublicKey,\n  tokenManagerData: AccountData<TokenManagerData>,\n  recipientTokenAccountOwnerId: PublicKey,\n  metadata: Metadata | null\n): Promise<AccountMeta[]> => {\n  const remainingAccounts: AccountMeta[] = [];\n  if (\n    tokenManagerData.parsed.kind !== TokenManagerKind.Programmable &&\n    metadata?.tokenStandard === TokenStandard.ProgrammableNonFungible\n  ) {\n    // update kind\n    tokenManagerData.parsed.kind = TokenManagerKind.Programmable;\n    remainingAccounts.push({\n      pubkey: findMintMetadataId(mintId),\n      isSigner: false,\n      isWritable: false,\n    });\n  }\n\n  if (tokenManagerData.parsed.state === TokenManagerState.Claimed) {\n    remainingAccounts.push(\n      ...getRemainingAccountsForKind(mintId, tokenManagerData.parsed.kind)\n    );\n  }\n\n  if (\n    tokenManagerData.parsed.kind === TokenManagerKind.Programmable &&\n    (tokenManagerData.parsed.invalidationType === InvalidationType.Release ||\n      tokenManagerData.parsed.invalidationType === InvalidationType.Reissue)\n  ) {\n    const releaseAccounts = remainingAccountForProgrammableUnlockAndTransfer(\n      recipientTokenAccountOwnerId,\n      wallet.publicKey,\n      mintId,\n      tokenManagerData.parsed.recipientTokenAccount,\n      metadata?.programmableConfig?.ruleSet\n    );\n    remainingAccounts.push(...releaseAccounts);\n  } else {\n    const returnAccounts = await withRemainingAccountsForReturn(\n      transaction,\n      connection,\n      wallet,\n      tokenManagerData,\n      recipientTokenAccountOwnerId,\n      metadata?.programmableConfig?.ruleSet ?? undefined\n    );\n    remainingAccounts.push(...returnAccounts);\n  }\n  return remainingAccounts;\n};\n\nexport const withRemainingAccountsForReturn = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerData: AccountData<TokenManagerData>,\n  recipientTokenAccountOwnerId?: PublicKey,\n  rulesetId?: PublicKey\n): Promise<AccountMeta[]> => {\n  const {\n    issuer,\n    mint,\n    claimApprover,\n    recipientTokenAccount,\n    invalidationType,\n    kind,\n    receiptMint,\n    state,\n  } = tokenManagerData.parsed;\n  if (\n    invalidationType === InvalidationType.Vest &&\n    state === TokenManagerState.Issued\n  ) {\n    if (!claimApprover) throw \"Claim approver must be set\";\n    const claimApproverTokenAccountId =\n      await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        mint,\n        claimApprover,\n        wallet.publicKey,\n        true\n      );\n    return [\n      {\n        pubkey: claimApproverTokenAccountId,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n  } else if (\n    invalidationType === InvalidationType.Return ||\n    state === TokenManagerState.Issued\n  ) {\n    if (kind === TokenManagerKind.Programmable || rulesetId) {\n      if (!recipientTokenAccountOwnerId)\n        throw \"Recipient token account owner not specified\";\n      const remainingAccounts: AccountMeta[] = [];\n      let returnTokenAccountId;\n      if (receiptMint) {\n        const receiptMintLargestAccount =\n          await connection.getTokenLargestAccounts(receiptMint);\n\n        // get holder of receipt mint\n        const receiptTokenAccountId =\n          receiptMintLargestAccount.value[0]?.address;\n        if (!receiptTokenAccountId) throw new Error(\"No token accounts found\");\n        const receiptTokenAccount = await getAccount(\n          connection,\n          receiptTokenAccountId\n        );\n\n        // get ATA for this mint of receipt mint holder\n        returnTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          mint,\n          receiptTokenAccount.owner,\n          wallet.publicKey,\n          true\n        );\n        remainingAccounts.push(\n          {\n            pubkey: returnTokenAccountId,\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: receiptTokenAccount.owner,\n            isSigner: false,\n            isWritable: false,\n          },\n          {\n            pubkey: receiptTokenAccountId,\n            isSigner: false,\n            isWritable: true,\n          }\n        );\n      } else {\n        returnTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          mint,\n          issuer,\n          wallet.publicKey,\n          true\n        );\n        remainingAccounts.push(\n          {\n            pubkey: returnTokenAccountId,\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: issuer,\n            isSigner: false,\n            isWritable: false,\n          }\n        );\n      }\n      remainingAccounts.push(\n        {\n          pubkey: recipientTokenAccountOwnerId,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: wallet.publicKey,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: findTokenRecordId(\n            mint,\n            getAssociatedTokenAddressSync(mint, tokenManagerData.pubkey, true)\n          ),\n          isSigner: false,\n          isWritable: true,\n        },\n        ...remainingAccountForProgrammable(\n          mint,\n          recipientTokenAccount,\n          returnTokenAccountId,\n          rulesetId\n        )\n      );\n      return remainingAccounts;\n    } else {\n      if (receiptMint) {\n        const receiptMintLargestAccount =\n          await connection.getTokenLargestAccounts(receiptMint);\n\n        // get holder of receipt mint\n        const receiptTokenAccountId =\n          receiptMintLargestAccount.value[0]?.address;\n        if (!receiptTokenAccountId) throw new Error(\"No token accounts found\");\n        const receiptTokenAccount = await getAccount(\n          connection,\n          receiptTokenAccountId\n        );\n\n        // get ATA for this mint of receipt mint holder\n        const returnTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          mint,\n          receiptTokenAccount.owner,\n          wallet.publicKey,\n          true\n        );\n        return [\n          {\n            pubkey: returnTokenAccountId,\n            isSigner: false,\n            isWritable: true,\n          },\n          {\n            pubkey: receiptTokenAccountId,\n            isSigner: false,\n            isWritable: true,\n          },\n        ];\n      } else {\n        const issuerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          mint,\n          issuer,\n          wallet.publicKey,\n          true\n        );\n        return [\n          {\n            pubkey: issuerTokenAccountId,\n            isSigner: false,\n            isWritable: true,\n          },\n        ];\n      }\n    }\n  } else {\n    return [];\n  }\n};\n\nexport const getRemainingAccountsForTransfer = (\n  transferAuthority: PublicKey | null,\n  tokenManagerId: PublicKey\n): AccountMeta[] => {\n  if (transferAuthority) {\n    const transferReceiptId = findTransferReceiptId(tokenManagerId);\n    return [\n      {\n        pubkey: transferReceiptId,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\nexport const remainingAccountForProgrammable = (\n  mintId: PublicKey,\n  fromTokenAccountId: PublicKey,\n  toTokenAccountId: PublicKey,\n  rulesetId: PublicKey | undefined | null\n): AccountMeta[] => {\n  return [\n    {\n      pubkey: mintId,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: findMintMetadataId(mintId),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: findMintEditionId(mintId),\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: findTokenRecordId(mintId, fromTokenAccountId),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: findTokenRecordId(mintId, toTokenAccountId),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: SYSVAR_INSTRUCTIONS_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: ASSOCIATED_TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_AUTH_RULES_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: rulesetId ?? METADATA_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: METADATA_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n};\n\nexport const remainingAccountForProgrammableUnlockAndTransfer = (\n  recipient: PublicKey,\n  payer: PublicKey,\n  mintId: PublicKey,\n  fromTokenAccountId: PublicKey,\n  rulesetId?: PublicKey | null\n): AccountMeta[] => {\n  return [\n    {\n      pubkey: recipient,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: findTokenRecordId(\n        mintId,\n        getAssociatedTokenAddressSync(\n          mintId,\n          findTokenManagerAddress(mintId),\n          true\n        )\n      ),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: mintId,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: findMintMetadataId(mintId),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: findMintEditionId(mintId),\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: findTokenRecordId(mintId, fromTokenAccountId),\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: SYSVAR_INSTRUCTIONS_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: ASSOCIATED_TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_AUTH_RULES_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: rulesetId ?? METADATA_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: METADATA_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n};\n\nexport const getRemainingAccountsForIssue = (\n  tokenManagerKind: TokenManagerKind,\n  mintId: PublicKey,\n  issuerTokenAccountId: PublicKey,\n  tokenManagerTokenAccountId: PublicKey,\n  rulesetId?: PublicKey\n): AccountMeta[] => {\n  if (tokenManagerKind === TokenManagerKind.Permissioned) {\n    return [\n      {\n        pubkey: CRANK_KEY,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n  } else if (tokenManagerKind === TokenManagerKind.Programmable) {\n    return remainingAccountForProgrammable(\n      mintId,\n      issuerTokenAccountId,\n      tokenManagerTokenAccountId,\n      rulesetId\n    );\n  } else {\n    return [];\n  }\n};\n\nexport const getRemainingAccountsForClaim = (\n  tokenManagerData: AccountData<TokenManagerData>,\n  recipientTokenAccountId: PublicKey,\n  metadata: Metadata | null,\n  claimReceiptId?: PublicKey\n): AccountMeta[] => {\n  const remainingAccounts: AccountMeta[] = [];\n  if (\n    tokenManagerData.parsed.kind !== TokenManagerKind.Programmable &&\n    metadata?.tokenStandard === TokenStandard.ProgrammableNonFungible\n  ) {\n    // update kind\n    tokenManagerData.parsed.kind = TokenManagerKind.Programmable;\n    remainingAccounts.push({\n      pubkey: findMintMetadataId(tokenManagerData.parsed.mint),\n      isSigner: false,\n      isWritable: false,\n    });\n  }\n\n  if (\n    tokenManagerData.parsed.kind === TokenManagerKind.Managed ||\n    tokenManagerData.parsed.kind === TokenManagerKind.Permissioned\n  ) {\n    const mintManagerId = findMintManagerId(tokenManagerData.parsed.mint);\n    remainingAccounts.push({\n      pubkey: mintManagerId,\n      isSigner: false,\n      isWritable: true,\n    });\n  } else if (tokenManagerData.parsed.kind === TokenManagerKind.Edition) {\n    const editionId = findMintEditionId(tokenManagerData.parsed.mint);\n    remainingAccounts.push(\n      {\n        pubkey: editionId,\n        isSigner: false,\n        isWritable: false,\n      },\n      {\n        pubkey: METADATA_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false,\n      }\n    );\n  } else if (tokenManagerData.parsed.kind === TokenManagerKind.Programmable) {\n    remainingAccounts.push(\n      ...remainingAccountForProgrammable(\n        tokenManagerData.parsed.mint,\n        getAssociatedTokenAddressSync(\n          tokenManagerData.parsed.mint,\n          tokenManagerData.pubkey,\n          true\n        ),\n        recipientTokenAccountId,\n        metadata?.programmableConfig?.ruleSet\n      )\n    );\n  }\n  if (claimReceiptId) {\n    remainingAccounts.push({\n      pubkey: claimReceiptId,\n      isSigner: false,\n      isWritable: true,\n    });\n  }\n  return remainingAccounts;\n};\n\nexport function findTokenRecordId(\n  mint: PublicKey,\n  token: PublicKey\n): PublicKey {\n  return PublicKey.findProgramAddressSync(\n    [\n      Buffer.from(\"metadata\"),\n      METADATA_PROGRAM_ID.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from(\"token_record\"),\n      token.toBuffer(),\n    ],\n    METADATA_PROGRAM_ID\n  )[0];\n}\n\nexport const findRuleSetId = (authority: PublicKey, name: string) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      Buffer.from(TOKEN_AUTH_RULESET_PREFIX),\n      authority.toBuffer(),\n      Buffer.from(name),\n    ],\n    TOKEN_AUTH_RULES_ID\n  )[0];\n};\n"]}