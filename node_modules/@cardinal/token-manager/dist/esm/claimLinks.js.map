{"version":3,"file":"claimLinks.js","sourceRoot":"","sources":["../../src/claimLinks.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,uBAAuB,CAAC;AAGxD,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAEvD,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,GAAG,CAAC;AACnD,OAAO,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,MAAM,yBAAyB,CAAC;AAG7E,MAAM,CAAC,MAAM,OAAO,GAAG,CACrB,cAAyB,EACzB,GAAwB,EACxB,OAAO,GAAG,QAAQ,EAClB,OAAO,GAAG,0BAA0B,EACpC,UAAU,GAAG,OAAO,EACZ,EAAE;IACV,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,OAAO,IAAI,UAAU,IAAI,cAAc,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;IAC7E,IAAI,GAAG,EAAE;QACP,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;KACxE;IACD,IAAI,OAAO,KAAK,QAAQ,EAAE;QACxB,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;KAC9C;IACD,OAAO,GAAG,CAAC,QAAQ,EAAE,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,IAAY,EAAwB,EAAE;IAC7D,IAAI;QACF,oEAAoE;QACpE,MAAM,OAAO,GAAG,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAE,CAAC;QACzD,oEAAoE;QACpE,MAAM,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAE,CAAC;QAC3C,OAAO;YACL,IAAI,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC;YACxC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAW,CAAC,CAAC;SACtE,CAAC;KACH;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;QAC9C,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,KAAK,EAC7B,UAAsB,EACtB,MAAc,EACd,EACE,IAAI,EACJ,oBAAoB,EACpB,eAAe,GAAG,EAAE,WAAW,EAAE,CAAC,EAAE,EACpC,MAAM,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,EAClB,IAAI,GAAG,gBAAgB,CAAC,OAAO,EAC/B,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,GAQ3C,EAC2C,EAAE;IAC9C,MAAM,CAAC,WAAW,EAAE,cAAc,EAAE,GAAG,CAAC,GAAG,MAAM,cAAc,CAC7D,IAAI,WAAW,EAAE,EACjB,UAAU,EACV,MAAM,EACN;QACE,IAAI;QACJ,oBAAoB;QACpB,eAAe;QACf,MAAM;QACN,IAAI;QACJ,gBAAgB;QAChB,UAAU,EAAE,SAAS;KACtB,CACF,CAAC;IACF,OAAO,CAAC,WAAW,EAAE,cAAc,EAAE,GAAI,CAAC,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,KAAK,EAChC,UAAsB,EACtB,MAAc,EACd,cAAyB,EACH,EAAE,CACxB,cAAc,CAAC,IAAI,WAAW,EAAE,EAAE,UAAU,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC","sourcesContent":["import { BN, utils, web3 } from \"@project-serum/anchor\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport { Keypair, Transaction } from \"@solana/web3.js\";\n\nimport { withClaimToken, withIssueToken } from \".\";\nimport { InvalidationType, TokenManagerKind } from \"./programs/tokenManager\";\nimport type { UseInvalidationParams } from \"./programs/useInvalidator\";\n\nexport const getLink = (\n  tokenManagerId: PublicKey,\n  otp: Keypair | undefined,\n  cluster = \"devnet\",\n  baseUrl = \"https://rent.cardinal.so\",\n  collection = \"claim\"\n): string => {\n  const url = new URL(`${baseUrl}/${collection}/${tokenManagerId.toString()}`);\n  if (otp) {\n    url.searchParams.append(\"otp\", utils.bytes.bs58.encode(otp.secretKey));\n  }\n  if (cluster === \"devnet\") {\n    url.searchParams.append(\"cluster\", \"devnet\");\n  }\n  return url.toString();\n};\n\nexport const fromLink = (link: string): [PublicKey, Keypair] => {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const idRegex = new RegExp(`/claim/([^?]*)`).exec(link)!;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const otpRegex = /otp=([^&]*)/.exec(link)!;\n    return [\n      new web3.PublicKey(idRegex[1] as string),\n      Keypair.fromSecretKey(utils.bytes.bs58.decode(otpRegex[1] as string)),\n    ];\n  } catch (e) {\n    console.log(\"Error decoding link: \", e, link);\n    throw e;\n  }\n};\n\nexport const issueToken = async (\n  connection: Connection,\n  wallet: Wallet,\n  {\n    mint,\n    issuerTokenAccountId,\n    useInvalidation = { totalUsages: 1 },\n    amount = new BN(1),\n    kind = TokenManagerKind.Managed,\n    invalidationType = InvalidationType.Return,\n  }: {\n    mint: PublicKey;\n    issuerTokenAccountId: PublicKey;\n    useInvalidation?: UseInvalidationParams;\n    amount?: BN;\n    kind?: TokenManagerKind;\n    invalidationType?: InvalidationType;\n  }\n): Promise<[Transaction, PublicKey, Keypair]> => {\n  const [transaction, tokenManagerId, otp] = await withIssueToken(\n    new Transaction(),\n    connection,\n    wallet,\n    {\n      mint,\n      issuerTokenAccountId,\n      useInvalidation,\n      amount,\n      kind,\n      invalidationType,\n      visibility: \"private\",\n    }\n  );\n  return [transaction, tokenManagerId, otp!];\n};\n\nexport const claimFromLink = async (\n  connection: Connection,\n  wallet: Wallet,\n  tokenManagerId: PublicKey\n): Promise<Transaction> =>\n  withClaimToken(new Transaction(), connection, wallet, tokenManagerId);\n"]}