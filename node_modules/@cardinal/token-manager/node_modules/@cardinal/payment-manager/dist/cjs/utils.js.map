{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../sdk/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findAta,\n  findMintMetadataId,\n  tryNull,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { Metadata } from \"@metaplex-foundation/mpl-token-metadata\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport { getAccount } from \"@solana/spl-token\";\nimport type { AccountMeta, Connection, Transaction } from \"@solana/web3.js\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { getPaymentManager } from \"./accounts\";\n\nexport const withRemainingAccountsForPayment = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mint: PublicKey,\n  paymentMint: PublicKey,\n  issuerId: PublicKey,\n  paymentManagerId: PublicKey,\n  buySideTokenAccountId?: PublicKey,\n  options?: {\n    payer?: PublicKey;\n    receiptMint?: PublicKey | null;\n  }\n): Promise<[PublicKey, PublicKey, AccountMeta[]]> => {\n  const payer = options?.payer ?? wallet.publicKey;\n  const royaltiesRemainingAccounts =\n    await withRemainingAccountsForHandlePaymentWithRoyalties(\n      transaction,\n      connection,\n      wallet,\n      mint,\n      paymentMint,\n      buySideTokenAccountId,\n      [issuerId.toString()]\n    );\n  const mintMetadataId = findMintMetadataId(mint);\n  const paymentRemainingAccounts = [\n    {\n      pubkey: paymentMint,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: mint,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: mintMetadataId,\n      isSigner: false,\n      isWritable: true,\n    },\n  ];\n\n  if (options?.receiptMint) {\n    const receiptMintLargestAccount = await connection.getTokenLargestAccounts(\n      options.receiptMint\n    );\n    // get holder of receipt mint\n    const receiptTokenAccountId = receiptMintLargestAccount.value[0]?.address;\n    if (!receiptTokenAccountId) throw new Error(\"No token accounts found\");\n    const receiptTokenAccount = await getAccount(\n      connection,\n      receiptTokenAccountId\n    );\n\n    // get ATA for this mint of receipt mint holder\n    const returnTokenAccountId = receiptTokenAccount.owner.equals(\n      wallet.publicKey\n    )\n      ? await findAta(paymentMint, receiptTokenAccount.owner, true)\n      : await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          paymentMint,\n          receiptTokenAccount.owner,\n          payer,\n          true\n        );\n\n    const paymentManager = await tryNull(\n      getPaymentManager(connection, paymentManagerId)\n    );\n    const feeCollectorTokenAccountId =\n      await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        paymentMint,\n        paymentManager ? paymentManager.parsed.feeCollector : paymentManagerId,\n        payer,\n        true\n      );\n    return [\n      returnTokenAccountId,\n      feeCollectorTokenAccountId,\n      [\n        {\n          pubkey: receiptTokenAccountId,\n          isSigner: false,\n          isWritable: true,\n        },\n        ...paymentRemainingAccounts,\n        ...royaltiesRemainingAccounts,\n      ],\n    ];\n  } else {\n    const issuerTokenAccountId = issuerId.equals(wallet.publicKey)\n      ? await findAta(paymentMint, issuerId, true)\n      : await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          paymentMint,\n          issuerId,\n          payer,\n          true\n        );\n    const paymentManager = await tryNull(\n      getPaymentManager(connection, paymentManagerId)\n    );\n    const feeCollectorTokenAccountId =\n      await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        paymentMint,\n        paymentManager ? paymentManager.parsed.feeCollector : paymentManagerId,\n        payer,\n        true\n      );\n    return [\n      issuerTokenAccountId,\n      feeCollectorTokenAccountId,\n      [...paymentRemainingAccounts, ...royaltiesRemainingAccounts],\n    ];\n  }\n};\n\nexport const withRemainingAccountsForHandlePaymentWithRoyalties = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  mint: PublicKey,\n  paymentMint: PublicKey,\n  buySideTokenAccountId?: PublicKey,\n  excludeCreators?: string[]\n): Promise<AccountMeta[]> => {\n  const remainingAccounts: AccountMeta[] = [];\n  let metaplexMintData: Metadata | undefined;\n  try {\n    const mintMetadataId = findMintMetadataId(mint);\n    metaplexMintData = await Metadata.fromAccountAddress(\n      connection,\n      mintMetadataId\n    );\n  } catch (e) {\n    // pass\n  }\n  if (metaplexMintData && metaplexMintData.data.creators) {\n    for (const creator of metaplexMintData.data.creators) {\n      if (creator.share !== 0) {\n        const creatorAddress = new PublicKey(creator.address);\n        if (paymentMint.toString() === PublicKey.default.toString()) {\n          remainingAccounts.push({\n            pubkey: new PublicKey(creator.address),\n            isSigner: false,\n            isWritable: true,\n          });\n        } else {\n          const creatorMintTokenAccount = excludeCreators?.includes(\n            creator.address.toString()\n          )\n            ? await findAta(paymentMint, creatorAddress, true)\n            : await withFindOrInitAssociatedTokenAccount(\n                transaction,\n                connection,\n                paymentMint,\n                creatorAddress,\n                wallet.publicKey,\n                true\n              );\n          remainingAccounts.push({\n            pubkey: creatorMintTokenAccount,\n            isSigner: false,\n            isWritable: true,\n          });\n        }\n      }\n    }\n  }\n\n  return [\n    ...remainingAccounts,\n    ...(buySideTokenAccountId\n      ? [\n          {\n            pubkey: buySideTokenAccountId,\n            isSigner: false,\n            isWritable: true,\n          },\n        ]\n      : []),\n  ];\n};\n"]}