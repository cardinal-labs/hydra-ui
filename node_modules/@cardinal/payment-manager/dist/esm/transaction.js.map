{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../sdk/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import { findMintMetadataId, tryGetAccount } from \"@cardinal/common\";\nimport type { Wallet } from \"@project-serum/anchor/dist/cjs/provider\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { PublicKey, SystemProgram, Transaction } from \"@solana/web3.js\";\nimport type BN from \"bn.js\";\n\nimport { getPaymentManager } from \"./accounts\";\nimport { paymentManagerProgram } from \"./constants\";\nimport { findPaymentManagerAddress } from \"./pda\";\nimport { withRemainingAccountsForHandlePaymentWithRoyalties } from \"./utils\";\n\nexport const withInit = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    paymentManagerName: string;\n    feeCollectorId: PublicKey;\n    makerFeeBasisPoints: number;\n    takerFeeBasisPoints: number;\n    includeSellerFeeBasisPoints: boolean;\n    royaltyFeeShare?: BN;\n    payer?: PublicKey;\n    authority?: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const paymentManagerId = findPaymentManagerAddress(params.paymentManagerName);\n  transaction.add(\n    await paymentManagerProgram(connection, wallet)\n      .methods.init({\n        name: params.paymentManagerName,\n        feeCollector: params.feeCollectorId,\n        makerFeeBasisPoints: params.makerFeeBasisPoints,\n        takerFeeBasisPoints: params.takerFeeBasisPoints,\n        includeSellerFeeBasisPoints: params.includeSellerFeeBasisPoints,\n        royaltyFeeShare: params.royaltyFeeShare ?? null,\n      })\n      .accounts({\n        paymentManager: findPaymentManagerAddress(params.paymentManagerName),\n        authority: params.authority ?? wallet.publicKey,\n        payer: params.payer ?? wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction()\n  );\n  return [transaction, paymentManagerId];\n};\n\nexport const withManagePayment = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    paymentManagerName: string;\n    paymentAmount: BN;\n    payerTokenAccountId: PublicKey;\n    feeCollectorTokenAccountId: PublicKey;\n    paymentTokenAccountId: PublicKey;\n  }\n): Promise<Transaction> => {\n  return transaction.add(\n    await paymentManagerProgram(connection, wallet)\n      .methods.managePayment(params.paymentAmount)\n      .accounts({\n        paymentManager: findPaymentManagerAddress(params.paymentManagerName),\n        payerTokenAccount: params.payerTokenAccountId,\n        feeCollectorTokenAccount: params.feeCollectorTokenAccountId,\n        paymentTokenAccount: params.paymentTokenAccountId,\n        payer: wallet.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .instruction()\n  );\n};\n\nexport const withHandlePaymentWithRoyalties = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    paymentManagerName: string;\n    paymentAmount: BN;\n    mintId: PublicKey;\n    paymentMintId: PublicKey;\n    payerTokenAccountId: PublicKey;\n    feeCollectorTokenAccountId: PublicKey;\n    paymentTokenAccountId: PublicKey;\n    buySideTokenAccountId?: PublicKey;\n    excludeCretors?: string[];\n  }\n): Promise<Transaction> => {\n  const paymentManagerId = findPaymentManagerAddress(params.paymentManagerName);\n\n  const remainingAccounts =\n    await withRemainingAccountsForHandlePaymentWithRoyalties(\n      new Transaction(),\n      connection,\n      wallet,\n      params.mintId,\n      params.paymentMintId,\n      params.buySideTokenAccountId,\n      params.excludeCretors ?? []\n    );\n  transaction.add(\n    await paymentManagerProgram(connection, wallet)\n      .methods.handlePaymentWithRoyalties(params.paymentAmount)\n      .accounts({\n        paymentManager: paymentManagerId,\n        payerTokenAccount: params.payerTokenAccountId,\n        feeCollectorTokenAccount: params.feeCollectorTokenAccountId,\n        paymentTokenAccount: params.paymentTokenAccountId,\n        paymentMint: params.paymentMintId,\n        mint: params.mintId,\n        mintMetadata: findMintMetadataId(params.mintId),\n        payer: wallet.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .remainingAccounts(remainingAccounts)\n      .instruction()\n  );\n  return transaction;\n};\n\nexport const withHandleNativePaymentWithRoyalties = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    paymentManagerName: string;\n    paymentAmount: BN;\n    mintId: PublicKey;\n    feeCollectorId: PublicKey;\n    paymentTargetId: PublicKey;\n    buySideTokenAccountId?: PublicKey;\n    excludeCretors?: string[];\n  }\n): Promise<Transaction> => {\n  const paymentManagerId = findPaymentManagerAddress(params.paymentManagerName);\n\n  const remainingAccounts =\n    await withRemainingAccountsForHandlePaymentWithRoyalties(\n      new Transaction(),\n      connection,\n      wallet,\n      params.mintId,\n      PublicKey.default,\n      params.buySideTokenAccountId,\n      params.excludeCretors ?? []\n    );\n\n  transaction.add(\n    await paymentManagerProgram(connection, wallet)\n      .methods.handleNativePaymentWithRoyalties(params.paymentAmount)\n      .accounts({\n        paymentManager: paymentManagerId,\n        feeCollector: params.feeCollectorId,\n        paymentTarget: params.paymentTargetId,\n        payer: wallet.publicKey,\n        mint: params.mintId,\n        mintMetadata: findMintMetadataId(params.mintId),\n        systemProgram: SystemProgram.programId,\n      })\n      .remainingAccounts(remainingAccounts)\n      .instruction()\n  );\n  return transaction;\n};\n\nexport const withClose = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    paymentManagerName: string;\n    collectorId?: PublicKey;\n  }\n): Promise<Transaction> => {\n  transaction.add(\n    await paymentManagerProgram(connection, wallet)\n      .methods.close()\n      .accounts({\n        paymentManager: findPaymentManagerAddress(params.paymentManagerName),\n        collector: params.collectorId ?? wallet.publicKey,\n        closer: wallet.publicKey,\n      })\n      .instruction()\n  );\n  return transaction;\n};\n\nexport const withUpdate = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    paymentManagerName: string;\n    authority?: PublicKey;\n    feeCollectorId?: PublicKey;\n    makerFeeBasisPoints?: number;\n    takerFeeBasisPoints?: number;\n    royaltyFeeShare?: BN;\n  }\n): Promise<Transaction> => {\n  const paymentManagerId = findPaymentManagerAddress(params.paymentManagerName);\n  const checkPaymentManager = await tryGetAccount(() =>\n    getPaymentManager(connection, paymentManagerId)\n  );\n  if (!checkPaymentManager) {\n    throw `No payment manager found with name ${params.paymentManagerName}`;\n  }\n\n  transaction.add(\n    await paymentManagerProgram(connection, wallet)\n      .methods.update({\n        authority: params.authority ?? checkPaymentManager.parsed.authority,\n        feeCollector:\n          checkPaymentManager.parsed.feeCollector ?? params.feeCollectorId,\n        makerFeeBasisPoints:\n          checkPaymentManager.parsed.makerFeeBasisPoints ??\n          params.makerFeeBasisPoints,\n        takerFeeBasisPoints:\n          checkPaymentManager.parsed.takerFeeBasisPoints ??\n          params.takerFeeBasisPoints,\n        royaltyFeeShare:\n          checkPaymentManager.parsed.royaltyFeeShare ??\n          params.royaltyFeeShare ??\n          null,\n      })\n      .accounts({\n        paymentManager: paymentManagerId,\n        payer: wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction()\n  );\n  return transaction;\n};\n"]}