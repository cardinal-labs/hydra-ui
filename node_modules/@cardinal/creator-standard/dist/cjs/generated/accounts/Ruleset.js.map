{"version":3,"file":"Ruleset.js","sourceRoot":"","sources":["../../../../sdk/generated/accounts/Ruleset.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as web3 from '@solana/web3.js'\nimport * as beet from '@metaplex-foundation/beet'\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\n\n/**\n * Arguments used to create {@link Ruleset}\n * @category Accounts\n * @category generated\n */\nexport type RulesetArgs = {\n  accountType: number[] /* size: 8 */\n  version: number\n  authority: web3.PublicKey\n  name: string\n  allowedPrograms: web3.PublicKey[]\n  disallowedAddresses: web3.PublicKey[]\n  extensions: web3.PublicKey[]\n}\n/**\n * Holds the data for the {@link Ruleset} Account and provides de/serialization\n * functionality for that data\n *\n * @category Accounts\n * @category generated\n */\nexport class Ruleset implements RulesetArgs {\n  private constructor(\n    readonly accountType: number[] /* size: 8 */,\n    readonly version: number,\n    readonly authority: web3.PublicKey,\n    readonly name: string,\n    readonly allowedPrograms: web3.PublicKey[],\n    readonly disallowedAddresses: web3.PublicKey[],\n    readonly extensions: web3.PublicKey[]\n  ) {}\n\n  /**\n   * Creates a {@link Ruleset} instance from the provided args.\n   */\n  static fromArgs(args: RulesetArgs) {\n    return new Ruleset(\n      args.accountType,\n      args.version,\n      args.authority,\n      args.name,\n      args.allowedPrograms,\n      args.disallowedAddresses,\n      args.extensions\n    )\n  }\n\n  /**\n   * Deserializes the {@link Ruleset} from the data of the provided {@link web3.AccountInfo}.\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\n   */\n  static fromAccountInfo(\n    accountInfo: web3.AccountInfo<Buffer>,\n    offset = 0\n  ): [Ruleset, number] {\n    return Ruleset.deserialize(accountInfo.data, offset)\n  }\n\n  /**\n   * Retrieves the account info from the provided address and deserializes\n   * the {@link Ruleset} from its data.\n   *\n   * @throws Error if no account info is found at the address or if deserialization fails\n   */\n  static async fromAccountAddress(\n    connection: web3.Connection,\n    address: web3.PublicKey\n  ): Promise<Ruleset> {\n    const accountInfo = await connection.getAccountInfo(address)\n    if (accountInfo == null) {\n      throw new Error(`Unable to find Ruleset account at ${address}`)\n    }\n    return Ruleset.fromAccountInfo(accountInfo, 0)[0]\n  }\n\n  /**\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\n   * to fetch accounts matching filters that can be specified via that builder.\n   *\n   * @param programId - the program that owns the accounts we are filtering\n   */\n  static gpaBuilder(\n    programId: web3.PublicKey = new web3.PublicKey(\n      'creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez'\n    )\n  ) {\n    return beetSolana.GpaBuilder.fromStruct(programId, rulesetBeet)\n  }\n\n  /**\n   * Deserializes the {@link Ruleset} from the provided data Buffer.\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\n   */\n  static deserialize(buf: Buffer, offset = 0): [Ruleset, number] {\n    return rulesetBeet.deserialize(buf, offset)\n  }\n\n  /**\n   * Serializes the {@link Ruleset} into a Buffer.\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\n   */\n  serialize(): [Buffer, number] {\n    return rulesetBeet.serialize(this)\n  }\n\n  /**\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\n   * {@link Ruleset} for the provided args.\n   *\n   * @param args need to be provided since the byte size for this account\n   * depends on them\n   */\n  static byteSize(args: RulesetArgs) {\n    const instance = Ruleset.fromArgs(args)\n    return rulesetBeet.toFixedFromValue(instance).byteSize\n  }\n\n  /**\n   * Fetches the minimum balance needed to exempt an account holding\n   * {@link Ruleset} data from rent\n   *\n   * @param args need to be provided since the byte size for this account\n   * depends on them\n   * @param connection used to retrieve the rent exemption information\n   */\n  static async getMinimumBalanceForRentExemption(\n    args: RulesetArgs,\n    connection: web3.Connection,\n    commitment?: web3.Commitment\n  ): Promise<number> {\n    return connection.getMinimumBalanceForRentExemption(\n      Ruleset.byteSize(args),\n      commitment\n    )\n  }\n\n  /**\n   * Returns a readable version of {@link Ruleset} properties\n   * and can be used to convert to JSON and/or logging\n   */\n  pretty() {\n    return {\n      accountType: this.accountType,\n      version: this.version,\n      authority: this.authority.toBase58(),\n      name: this.name,\n      allowedPrograms: this.allowedPrograms,\n      disallowedAddresses: this.disallowedAddresses,\n      extensions: this.extensions,\n    }\n  }\n}\n\n/**\n * @category Accounts\n * @category generated\n */\nexport const rulesetBeet = new beet.FixableBeetStruct<Ruleset, RulesetArgs>(\n  [\n    ['accountType', beet.uniformFixedSizeArray(beet.u8, 8)],\n    ['version', beet.u8],\n    ['authority', beetSolana.publicKey],\n    ['name', beet.utf8String],\n    ['allowedPrograms', beet.array(beetSolana.publicKey)],\n    ['disallowedAddresses', beet.array(beetSolana.publicKey)],\n    ['extensions', beet.array(beetSolana.publicKey)],\n  ],\n  Ruleset.fromArgs,\n  'Ruleset'\n)\n"]}