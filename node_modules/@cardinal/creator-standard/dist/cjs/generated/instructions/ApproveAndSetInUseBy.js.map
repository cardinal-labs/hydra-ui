{"version":3,"file":"ApproveAndSetInUseBy.js","sourceRoot":"","sources":["../../../../sdk/generated/instructions/ApproveAndSetInUseBy.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;AAEH,oEAA6C;AAC7C,wEAAiD;AACjD,8DAAuC;AACvC,4EAGwC;AAUxC;;;;GAIG;AACU,QAAA,0BAA0B,GAAG,IAAI,IAAI,CAAC,cAAc,CAK/D;IACE,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,CAAC;IACrC,CAAC,wBAAwB,EAAE,mDAA0B,CAAC;CACvD,EACD,qCAAqC,CACtC,CAAA;AA0BY,QAAA,4CAA4C,GAAG,CAAC,CAAA;AAE7D;;;;;;;;;GASG;AACH,SAAgB,qCAAqC,CACnD,QAAiD,EACjD,IAAyC,EACzC,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,6CAA6C,CAAC;;IAE7E,MAAM,CAAC,IAAI,CAAC,GAAG,kCAA0B,CAAC,SAAS,CAAC;QAClD,wBAAwB,EAAE,oDAA4C;QACtE,GAAG,IAAI;KACR,CAAC,CAAA;IACF,MAAM,IAAI,GAAuB;QAC/B;YACE,MAAM,EAAE,QAAQ,CAAC,WAAW;YAC5B,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,OAAO;YACxB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,IAAI;YACrB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,cAAc;YAC/B,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,kBAAkB;YACnC,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,MAAM;YACvB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,IAAI;SACf;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,QAAQ;YACzB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,MAAA,QAAQ,CAAC,YAAY,mCAAI,QAAQ,CAAC,gBAAgB;YAC1D,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;KACF,CAAA;IAED,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC;QACzC,SAAS;QACT,IAAI;QACJ,IAAI;KACL,CAAC,CAAA;IACF,OAAO,EAAE,CAAA;AACX,CAAC;AA1DD,sFA0DC","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as splToken from '@solana/spl-token'\nimport * as beet from '@metaplex-foundation/beet'\nimport * as web3 from '@solana/web3.js'\nimport {\n  ApproveAndSetInUseByIx,\n  approveAndSetInUseByIxBeet,\n} from '../types/ApproveAndSetInUseByIx'\n\n/**\n * @category Instructions\n * @category ApproveAndSetInUseBy\n * @category generated\n */\nexport type ApproveAndSetInUseByInstructionArgs = {\n  approveAndSetInUseByIx: ApproveAndSetInUseByIx\n}\n/**\n * @category Instructions\n * @category ApproveAndSetInUseBy\n * @category generated\n */\nexport const ApproveAndSetInUseByStruct = new beet.BeetArgsStruct<\n  ApproveAndSetInUseByInstructionArgs & {\n    instructionDiscriminator: number\n  }\n>(\n  [\n    ['instructionDiscriminator', beet.u8],\n    ['approveAndSetInUseByIx', approveAndSetInUseByIxBeet],\n  ],\n  'ApproveAndSetInUseByInstructionArgs'\n)\n/**\n * Accounts required by the _ApproveAndSetInUseBy_ instruction\n *\n * @property [_writable_] mintManager\n * @property [] ruleset\n * @property [] mint\n * @property [] inUseByAddress\n * @property [_writable_] holderTokenAccount\n * @property [**signer**] holder\n * @property [] delegate\n * @category Instructions\n * @category ApproveAndSetInUseBy\n * @category generated\n */\nexport type ApproveAndSetInUseByInstructionAccounts = {\n  mintManager: web3.PublicKey\n  ruleset: web3.PublicKey\n  mint: web3.PublicKey\n  inUseByAddress: web3.PublicKey\n  holderTokenAccount: web3.PublicKey\n  holder: web3.PublicKey\n  delegate: web3.PublicKey\n  tokenProgram?: web3.PublicKey\n}\n\nexport const approveAndSetInUseByInstructionDiscriminator = 8\n\n/**\n * Creates a _ApproveAndSetInUseBy_ instruction.\n *\n * @param accounts that will be accessed while the instruction is processed\n * @param args to provide as instruction data to the program\n *\n * @category Instructions\n * @category ApproveAndSetInUseBy\n * @category generated\n */\nexport function createApproveAndSetInUseByInstruction(\n  accounts: ApproveAndSetInUseByInstructionAccounts,\n  args: ApproveAndSetInUseByInstructionArgs,\n  programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')\n) {\n  const [data] = ApproveAndSetInUseByStruct.serialize({\n    instructionDiscriminator: approveAndSetInUseByInstructionDiscriminator,\n    ...args,\n  })\n  const keys: web3.AccountMeta[] = [\n    {\n      pubkey: accounts.mintManager,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.ruleset,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.mint,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.inUseByAddress,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.holderTokenAccount,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.holder,\n      isWritable: false,\n      isSigner: true,\n    },\n    {\n      pubkey: accounts.delegate,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    },\n  ]\n\n  const ix = new web3.TransactionInstruction({\n    programId,\n    keys,\n    data,\n  })\n  return ix\n}\n"]}