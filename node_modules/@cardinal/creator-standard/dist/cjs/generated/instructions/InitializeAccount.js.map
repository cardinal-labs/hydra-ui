{"version":3,"file":"InitializeAccount.js","sourceRoot":"","sources":["../../../../sdk/generated/instructions/InitializeAccount.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;AAEH,oEAA6C;AAC7C,wEAAiD;AACjD,8DAAuC;AAEvC;;;;GAIG;AACU,QAAA,uBAAuB,GAAG,IAAI,IAAI,CAAC,cAAc,CAE3D,CAAC,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,kCAAkC,CAAC,CAAA;AAwBlE,QAAA,yCAAyC,GAAG,EAAE,CAAA;AAE3D;;;;;;;GAOG;AACH,SAAgB,kCAAkC,CAChD,QAA8C,EAC9C,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,6CAA6C,CAAC;;IAE7E,MAAM,CAAC,IAAI,CAAC,GAAG,+BAAuB,CAAC,SAAS,CAAC;QAC/C,wBAAwB,EAAE,iDAAyC;KACpE,CAAC,CAAA;IACF,MAAM,IAAI,GAAuB;QAC/B;YACE,MAAM,EAAE,QAAQ,CAAC,IAAI;YACrB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,YAAY;YAC7B,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,KAAK;YACtB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,KAAK;YACtB,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,IAAI;SACf;QACD;YACE,MAAM,EAAE,MAAA,QAAQ,CAAC,IAAI,mCAAI,IAAI,CAAC,kBAAkB;YAChD,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,MAAA,QAAQ,CAAC,YAAY,mCAAI,QAAQ,CAAC,gBAAgB;YAC1D,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,sBAAsB;YACvC,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,MAAA,QAAQ,CAAC,aAAa,mCAAI,IAAI,CAAC,aAAa,CAAC,SAAS;YAC9D,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;KACF,CAAA;IAED,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC;QACzC,SAAS;QACT,IAAI;QACJ,IAAI;KACL,CAAC,CAAA;IACF,OAAO,EAAE,CAAA;AACX,CAAC;AAxDD,gFAwDC","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as splToken from '@solana/spl-token'\nimport * as beet from '@metaplex-foundation/beet'\nimport * as web3 from '@solana/web3.js'\n\n/**\n * @category Instructions\n * @category InitializeAccount\n * @category generated\n */\nexport const InitializeAccountStruct = new beet.BeetArgsStruct<{\n  instructionDiscriminator: number\n}>([['instructionDiscriminator', beet.u8]], 'InitializeAccountInstructionArgs')\n/**\n * Accounts required by the _InitializeAccount_ instruction\n *\n * @property [] mint\n * @property [_writable_] tokenAccount\n * @property [] owner\n * @property [_writable_, **signer**] payer\n * @property [] associatedTokenProgram\n * @category Instructions\n * @category InitializeAccount\n * @category generated\n */\nexport type InitializeAccountInstructionAccounts = {\n  mint: web3.PublicKey\n  tokenAccount: web3.PublicKey\n  owner: web3.PublicKey\n  payer: web3.PublicKey\n  rent?: web3.PublicKey\n  tokenProgram?: web3.PublicKey\n  associatedTokenProgram: web3.PublicKey\n  systemProgram?: web3.PublicKey\n}\n\nexport const initializeAccountInstructionDiscriminator = 11\n\n/**\n * Creates a _InitializeAccount_ instruction.\n *\n * @param accounts that will be accessed while the instruction is processed\n * @category Instructions\n * @category InitializeAccount\n * @category generated\n */\nexport function createInitializeAccountInstruction(\n  accounts: InitializeAccountInstructionAccounts,\n  programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')\n) {\n  const [data] = InitializeAccountStruct.serialize({\n    instructionDiscriminator: initializeAccountInstructionDiscriminator,\n  })\n  const keys: web3.AccountMeta[] = [\n    {\n      pubkey: accounts.mint,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.tokenAccount,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.owner,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.payer,\n      isWritable: true,\n      isSigner: true,\n    },\n    {\n      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.associatedTokenProgram,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\n      isWritable: false,\n      isSigner: false,\n    },\n  ]\n\n  const ix = new web3.TransactionInstruction({\n    programId,\n    keys,\n    data,\n  })\n  return ix\n}\n"]}