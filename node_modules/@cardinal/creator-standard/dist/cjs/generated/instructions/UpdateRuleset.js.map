{"version":3,"file":"UpdateRuleset.js","sourceRoot":"","sources":["../../../../sdk/generated/instructions/UpdateRuleset.ts"],"names":[],"mappings":";AAAA;;;;;GAKG;;;;AAEH,wEAAiD;AACjD,8DAAuC;AACvC,8DAA+E;AAU/E;;;;GAIG;AACU,QAAA,mBAAmB,GAAG,IAAI,IAAI,CAAC,qBAAqB,CAK/D;IACE,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,CAAC;IACrC,CAAC,iBAAiB,EAAE,qCAAmB,CAAC;CACzC,EACD,8BAA8B,CAC/B,CAAA;AAkBY,QAAA,qCAAqC,GAAG,CAAC,CAAA;AAEtD;;;;;;;;;GASG;AACH,SAAgB,8BAA8B,CAC5C,QAA0C,EAC1C,IAAkC,EAClC,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,6CAA6C,CAAC;;IAE7E,MAAM,CAAC,IAAI,CAAC,GAAG,2BAAmB,CAAC,SAAS,CAAC;QAC3C,wBAAwB,EAAE,6CAAqC;QAC/D,GAAG,IAAI;KACR,CAAC,CAAA;IACF,MAAM,IAAI,GAAuB;QAC/B;YACE,MAAM,EAAE,QAAQ,CAAC,OAAO;YACxB,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,SAAS;YAC1B,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,IAAI;SACf;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,KAAK;YACtB,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,IAAI;SACf;QACD;YACE,MAAM,EAAE,MAAA,QAAQ,CAAC,aAAa,mCAAI,IAAI,CAAC,aAAa,CAAC,SAAS;YAC9D,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;KACF,CAAA;IAED,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC;QACzC,SAAS;QACT,IAAI;QACJ,IAAI;KACL,CAAC,CAAA;IACF,OAAO,EAAE,CAAA;AACX,CAAC;AAtCD,wEAsCC","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as beet from '@metaplex-foundation/beet'\nimport * as web3 from '@solana/web3.js'\nimport { UpdateRulesetIx, updateRulesetIxBeet } from '../types/UpdateRulesetIx'\n\n/**\n * @category Instructions\n * @category UpdateRuleset\n * @category generated\n */\nexport type UpdateRulesetInstructionArgs = {\n  updateRulesetIx: UpdateRulesetIx\n}\n/**\n * @category Instructions\n * @category UpdateRuleset\n * @category generated\n */\nexport const UpdateRulesetStruct = new beet.FixableBeetArgsStruct<\n  UpdateRulesetInstructionArgs & {\n    instructionDiscriminator: number\n  }\n>(\n  [\n    ['instructionDiscriminator', beet.u8],\n    ['updateRulesetIx', updateRulesetIxBeet],\n  ],\n  'UpdateRulesetInstructionArgs'\n)\n/**\n * Accounts required by the _UpdateRuleset_ instruction\n *\n * @property [_writable_] ruleset\n * @property [**signer**] authority\n * @property [_writable_, **signer**] payer\n * @category Instructions\n * @category UpdateRuleset\n * @category generated\n */\nexport type UpdateRulesetInstructionAccounts = {\n  ruleset: web3.PublicKey\n  authority: web3.PublicKey\n  payer: web3.PublicKey\n  systemProgram?: web3.PublicKey\n}\n\nexport const updateRulesetInstructionDiscriminator = 1\n\n/**\n * Creates a _UpdateRuleset_ instruction.\n *\n * @param accounts that will be accessed while the instruction is processed\n * @param args to provide as instruction data to the program\n *\n * @category Instructions\n * @category UpdateRuleset\n * @category generated\n */\nexport function createUpdateRulesetInstruction(\n  accounts: UpdateRulesetInstructionAccounts,\n  args: UpdateRulesetInstructionArgs,\n  programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')\n) {\n  const [data] = UpdateRulesetStruct.serialize({\n    instructionDiscriminator: updateRulesetInstructionDiscriminator,\n    ...args,\n  })\n  const keys: web3.AccountMeta[] = [\n    {\n      pubkey: accounts.ruleset,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.authority,\n      isWritable: false,\n      isSigner: true,\n    },\n    {\n      pubkey: accounts.payer,\n      isWritable: true,\n      isSigner: true,\n    },\n    {\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\n      isWritable: false,\n      isSigner: false,\n    },\n  ]\n\n  const ix = new web3.TransactionInstruction({\n    programId,\n    keys,\n    data,\n  })\n  return ix\n}\n"]}