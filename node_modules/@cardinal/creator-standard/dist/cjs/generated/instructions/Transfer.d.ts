/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category Transfer
 * @category generated
 */
export declare const TransferStruct: beet.BeetArgsStruct<{
    instructionDiscriminator: number;
}>;
/**
 * Accounts required by the _Transfer_ instruction
 *
 * @property [] mintManager
 * @property [] mint
 * @property [] mintMetadata Mint metadata
 * @property [] ruleset
 * @property [_writable_] from
 * @property [_writable_] to
 * @property [**signer**] authority
 * @property [] instructions
 * @category Instructions
 * @category Transfer
 * @category generated
 */
export declare type TransferInstructionAccounts = {
    mintManager: web3.PublicKey;
    mint: web3.PublicKey;
    mintMetadata: web3.PublicKey;
    ruleset: web3.PublicKey;
    from: web3.PublicKey;
    to: web3.PublicKey;
    authority: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    systemProgram?: web3.PublicKey;
    instructions: web3.PublicKey;
};
export declare const transferInstructionDiscriminator = 13;
/**
 * Creates a _Transfer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Transfer
 * @category generated
 */
export declare function createTransferInstruction(accounts: TransferInstructionAccounts, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=Transfer.d.ts.map