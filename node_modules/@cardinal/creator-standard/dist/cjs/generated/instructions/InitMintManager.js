"use strict";
/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createInitMintManagerInstruction = exports.initMintManagerInstructionDiscriminator = exports.InitMintManagerStruct = void 0;
const tslib_1 = require("tslib");
const splToken = tslib_1.__importStar(require("@solana/spl-token"));
const beet = tslib_1.__importStar(require("@metaplex-foundation/beet"));
const web3 = tslib_1.__importStar(require("@solana/web3.js"));
/**
 * @category Instructions
 * @category InitMintManager
 * @category generated
 */
exports.InitMintManagerStruct = new beet.BeetArgsStruct([['instructionDiscriminator', beet.u8]], 'InitMintManagerInstructionArgs');
exports.initMintManagerInstructionDiscriminator = 3;
/**
 * Creates a _InitMintManager_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitMintManager
 * @category generated
 */
function createInitMintManagerInstruction(accounts, programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')) {
    var _a, _b;
    const [data] = exports.InitMintManagerStruct.serialize({
        instructionDiscriminator: exports.initMintManagerInstructionDiscriminator,
    });
    const keys = [
        {
            pubkey: accounts.mintManager,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.mint,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.mintMetadata,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.ruleset,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.holderTokenAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.tokenAuthority,
            isWritable: false,
            isSigner: true,
        },
        {
            pubkey: accounts.authority,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.payer,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: (_b = accounts.systemProgram) !== null && _b !== void 0 ? _b : web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false,
        },
    ];
    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
exports.createInitMintManagerInstruction = createInitMintManagerInstruction;
//# sourceMappingURL=InitMintManager.js.map