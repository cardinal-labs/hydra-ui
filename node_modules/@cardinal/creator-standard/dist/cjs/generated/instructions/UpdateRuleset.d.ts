/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { UpdateRulesetIx } from '../types/UpdateRulesetIx';
/**
 * @category Instructions
 * @category UpdateRuleset
 * @category generated
 */
export declare type UpdateRulesetInstructionArgs = {
    updateRulesetIx: UpdateRulesetIx;
};
/**
 * @category Instructions
 * @category UpdateRuleset
 * @category generated
 */
export declare const UpdateRulesetStruct: beet.FixableBeetArgsStruct<UpdateRulesetInstructionArgs & {
    instructionDiscriminator: number;
}>;
/**
 * Accounts required by the _UpdateRuleset_ instruction
 *
 * @property [_writable_] ruleset
 * @property [**signer**] authority
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category UpdateRuleset
 * @category generated
 */
export declare type UpdateRulesetInstructionAccounts = {
    ruleset: web3.PublicKey;
    authority: web3.PublicKey;
    payer: web3.PublicKey;
    systemProgram?: web3.PublicKey;
};
export declare const updateRulesetInstructionDiscriminator = 1;
/**
 * Creates a _UpdateRuleset_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateRuleset
 * @category generated
 */
export declare function createUpdateRulesetInstruction(accounts: UpdateRulesetInstructionAccounts, args: UpdateRulesetInstructionArgs, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=UpdateRuleset.d.ts.map