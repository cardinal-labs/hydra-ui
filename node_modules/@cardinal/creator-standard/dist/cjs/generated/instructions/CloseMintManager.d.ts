/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category CloseMintManager
 * @category generated
 */
export declare const CloseMintManagerStruct: beet.BeetArgsStruct<{
    instructionDiscriminator: number;
}>;
/**
 * Accounts required by the _CloseMintManager_ instruction
 *
 * @property [_writable_] mintManager
 * @property [_writable_] mint
 * @property [_writable_] holderTokenAccount
 * @property [] newTokenAuthority
 * @property [] authority
 * @property [_writable_, **signer**] payer
 * @category Instructions
 * @category CloseMintManager
 * @category generated
 */
export declare type CloseMintManagerInstructionAccounts = {
    mintManager: web3.PublicKey;
    mint: web3.PublicKey;
    holderTokenAccount: web3.PublicKey;
    newTokenAuthority: web3.PublicKey;
    authority: web3.PublicKey;
    payer: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    systemProgram?: web3.PublicKey;
};
export declare const closeMintManagerInstructionDiscriminator = 14;
/**
 * Creates a _CloseMintManager_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CloseMintManager
 * @category generated
 */
export declare function createCloseMintManagerInstruction(accounts: CloseMintManagerInstructionAccounts, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=CloseMintManager.d.ts.map