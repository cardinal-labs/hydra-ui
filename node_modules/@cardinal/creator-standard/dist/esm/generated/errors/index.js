/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
const createErrorFromCodeLookup = new Map();
const createErrorFromNameLookup = new Map();
/**
 * InvalidAccountType: 'Invalid account type'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAccountTypeError extends Error {
    constructor() {
        super('Invalid account type');
        this.code = 0x1770;
        this.name = 'InvalidAccountType';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidAccountTypeError);
        }
    }
}
createErrorFromCodeLookup.set(0x1770, () => new InvalidAccountTypeError());
createErrorFromNameLookup.set('InvalidAccountType', () => new InvalidAccountTypeError());
/**
 * DataTypeMismatch: 'Data type mismatch'
 *
 * @category Errors
 * @category generated
 */
export class DataTypeMismatchError extends Error {
    constructor() {
        super('Data type mismatch');
        this.code = 0x1771;
        this.name = 'DataTypeMismatch';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, DataTypeMismatchError);
        }
    }
}
createErrorFromCodeLookup.set(0x1771, () => new DataTypeMismatchError());
createErrorFromNameLookup.set('DataTypeMismatch', () => new DataTypeMismatchError());
/**
 * InvalidMint: 'Invalid mint'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintError extends Error {
    constructor() {
        super('Invalid mint');
        this.code = 0x1772;
        this.name = 'InvalidMint';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMintError);
        }
    }
}
createErrorFromCodeLookup.set(0x1772, () => new InvalidMintError());
createErrorFromNameLookup.set('InvalidMint', () => new InvalidMintError());
/**
 * InvalidAmount: 'Invalid amount'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAmountError extends Error {
    constructor() {
        super('Invalid amount');
        this.code = 0x1773;
        this.name = 'InvalidAmount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidAmountError);
        }
    }
}
createErrorFromCodeLookup.set(0x1773, () => new InvalidAmountError());
createErrorFromNameLookup.set('InvalidAmount', () => new InvalidAmountError());
/**
 * InvalidTokenAccount: 'Invalid token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenAccountError extends Error {
    constructor() {
        super('Invalid token account');
        this.code = 0x1774;
        this.name = 'InvalidTokenAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidTokenAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x1774, () => new InvalidTokenAccountError());
createErrorFromNameLookup.set('InvalidTokenAccount', () => new InvalidTokenAccountError());
/**
 * InvalidAuthority: 'Invalid authority address'
 *
 * @category Errors
 * @category generated
 */
export class InvalidAuthorityError extends Error {
    constructor() {
        super('Invalid authority address');
        this.code = 0x1775;
        this.name = 'InvalidAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidAuthorityError);
        }
    }
}
createErrorFromCodeLookup.set(0x1775, () => new InvalidAuthorityError());
createErrorFromNameLookup.set('InvalidAuthority', () => new InvalidAuthorityError());
/**
 * InvalidMintManager: 'Invalid mint manager'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintManagerError extends Error {
    constructor() {
        super('Invalid mint manager');
        this.code = 0x1776;
        this.name = 'InvalidMintManager';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMintManagerError);
        }
    }
}
createErrorFromCodeLookup.set(0x1776, () => new InvalidMintManagerError());
createErrorFromNameLookup.set('InvalidMintManager', () => new InvalidMintManagerError());
/**
 * InvalidMintMetadata: 'Invalid mint metadata'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintMetadataError extends Error {
    constructor() {
        super('Invalid mint metadata');
        this.code = 0x1777;
        this.name = 'InvalidMintMetadata';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMintMetadataError);
        }
    }
}
createErrorFromCodeLookup.set(0x1777, () => new InvalidMintMetadataError());
createErrorFromNameLookup.set('InvalidMintMetadata', () => new InvalidMintMetadataError());
/**
 * InusufficientMinimumCreatorShare: 'Insufficient minimum creator share'
 *
 * @category Errors
 * @category generated
 */
export class InusufficientMinimumCreatorShareError extends Error {
    constructor() {
        super('Insufficient minimum creator share');
        this.code = 0x1778;
        this.name = 'InusufficientMinimumCreatorShare';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InusufficientMinimumCreatorShareError);
        }
    }
}
createErrorFromCodeLookup.set(0x1778, () => new InusufficientMinimumCreatorShareError());
createErrorFromNameLookup.set('InusufficientMinimumCreatorShare', () => new InusufficientMinimumCreatorShareError());
/**
 * InvlaidHolderTokenAccount: 'Invalid holder token account'
 *
 * @category Errors
 * @category generated
 */
export class InvlaidHolderTokenAccountError extends Error {
    constructor() {
        super('Invalid holder token account');
        this.code = 0x1779;
        this.name = 'InvlaidHolderTokenAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvlaidHolderTokenAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x1779, () => new InvlaidHolderTokenAccountError());
createErrorFromNameLookup.set('InvlaidHolderTokenAccount', () => new InvlaidHolderTokenAccountError());
/**
 * InvalidTargetTokenAccount: 'Invalid target token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTargetTokenAccountError extends Error {
    constructor() {
        super('Invalid target token account');
        this.code = 0x177a;
        this.name = 'InvalidTargetTokenAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidTargetTokenAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x177a, () => new InvalidTargetTokenAccountError());
createErrorFromNameLookup.set('InvalidTargetTokenAccount', () => new InvalidTargetTokenAccountError());
/**
 * InvalidCloseTokenAccount: 'Invalid token account to close'
 *
 * @category Errors
 * @category generated
 */
export class InvalidCloseTokenAccountError extends Error {
    constructor() {
        super('Invalid token account to close');
        this.code = 0x177b;
        this.name = 'InvalidCloseTokenAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidCloseTokenAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x177b, () => new InvalidCloseTokenAccountError());
createErrorFromNameLookup.set('InvalidCloseTokenAccount', () => new InvalidCloseTokenAccountError());
/**
 * InvalidHolderTokenAccount: 'Invalid holder token account'
 *
 * @category Errors
 * @category generated
 */
export class InvalidHolderTokenAccountError extends Error {
    constructor() {
        super('Invalid holder token account');
        this.code = 0x177c;
        this.name = 'InvalidHolderTokenAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidHolderTokenAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x177c, () => new InvalidHolderTokenAccountError());
createErrorFromNameLookup.set('InvalidHolderTokenAccount', () => new InvalidHolderTokenAccountError());
/**
 * InvalidRuleset: 'Invalid ruleset'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRulesetError extends Error {
    constructor() {
        super('Invalid ruleset');
        this.code = 0x177d;
        this.name = 'InvalidRuleset';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidRulesetError);
        }
    }
}
createErrorFromCodeLookup.set(0x177d, () => new InvalidRulesetError());
createErrorFromNameLookup.set('InvalidRuleset', () => new InvalidRulesetError());
/**
 * InvalidPreTransferInstruction: 'Invalid pre transfer instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPreTransferInstructionError extends Error {
    constructor() {
        super('Invalid pre transfer instruction');
        this.code = 0x177e;
        this.name = 'InvalidPreTransferInstruction';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidPreTransferInstructionError);
        }
    }
}
createErrorFromCodeLookup.set(0x177e, () => new InvalidPreTransferInstructionError());
createErrorFromNameLookup.set('InvalidPreTransferInstruction', () => new InvalidPreTransferInstructionError());
/**
 * InvalidPostTransferInstruction: 'Invalid post transfer instruction'
 *
 * @category Errors
 * @category generated
 */
export class InvalidPostTransferInstructionError extends Error {
    constructor() {
        super('Invalid post transfer instruction');
        this.code = 0x177f;
        this.name = 'InvalidPostTransferInstruction';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidPostTransferInstructionError);
        }
    }
}
createErrorFromCodeLookup.set(0x177f, () => new InvalidPostTransferInstructionError());
createErrorFromNameLookup.set('InvalidPostTransferInstruction', () => new InvalidPostTransferInstructionError());
/**
 * AddressDisallowed: 'Disallowed address included'
 *
 * @category Errors
 * @category generated
 */
export class AddressDisallowedError extends Error {
    constructor() {
        super('Disallowed address included');
        this.code = 0x1780;
        this.name = 'AddressDisallowed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AddressDisallowedError);
        }
    }
}
createErrorFromCodeLookup.set(0x1780, () => new AddressDisallowedError());
createErrorFromNameLookup.set('AddressDisallowed', () => new AddressDisallowedError());
/**
 * ProgramNotAllowed: 'Program not allowed in allowed programs to transfer'
 *
 * @category Errors
 * @category generated
 */
export class ProgramNotAllowedError extends Error {
    constructor() {
        super('Program not allowed in allowed programs to transfer');
        this.code = 0x1781;
        this.name = 'ProgramNotAllowed';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, ProgramNotAllowedError);
        }
    }
}
createErrorFromCodeLookup.set(0x1781, () => new ProgramNotAllowedError());
createErrorFromNameLookup.set('ProgramNotAllowed', () => new ProgramNotAllowedError());
/**
 * UnknownAccount: 'Unknown account found in instruction'
 *
 * @category Errors
 * @category generated
 */
export class UnknownAccountError extends Error {
    constructor() {
        super('Unknown account found in instruction');
        this.code = 0x1782;
        this.name = 'UnknownAccount';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, UnknownAccountError);
        }
    }
}
createErrorFromCodeLookup.set(0x1782, () => new UnknownAccountError());
createErrorFromNameLookup.set('UnknownAccount', () => new UnknownAccountError());
/**
 * AccountNotFound: 'Account not found in instruction'
 *
 * @category Errors
 * @category generated
 */
export class AccountNotFoundError extends Error {
    constructor() {
        super('Account not found in instruction');
        this.code = 0x1783;
        this.name = 'AccountNotFound';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, AccountNotFoundError);
        }
    }
}
createErrorFromCodeLookup.set(0x1783, () => new AccountNotFoundError());
createErrorFromNameLookup.set('AccountNotFound', () => new AccountNotFoundError());
/**
 * TokenAlreadyInUse: 'Token already in use'
 *
 * @category Errors
 * @category generated
 */
export class TokenAlreadyInUseError extends Error {
    constructor() {
        super('Token already in use');
        this.code = 0x1784;
        this.name = 'TokenAlreadyInUse';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, TokenAlreadyInUseError);
        }
    }
}
createErrorFromCodeLookup.set(0x1784, () => new TokenAlreadyInUseError());
createErrorFromNameLookup.set('TokenAlreadyInUse', () => new TokenAlreadyInUseError());
/**
 * InvalidTokenUser: 'Invalid token user'
 *
 * @category Errors
 * @category generated
 */
export class InvalidTokenUserError extends Error {
    constructor() {
        super('Invalid token user');
        this.code = 0x1785;
        this.name = 'InvalidTokenUser';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidTokenUserError);
        }
    }
}
createErrorFromCodeLookup.set(0x1785, () => new InvalidTokenUserError());
createErrorFromNameLookup.set('InvalidTokenUser', () => new InvalidTokenUserError());
/**
 * TokenCurentlyInUse: 'Token currently in use'
 *
 * @category Errors
 * @category generated
 */
export class TokenCurentlyInUseError extends Error {
    constructor() {
        super('Token currently in use');
        this.code = 0x1786;
        this.name = 'TokenCurentlyInUse';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, TokenCurentlyInUseError);
        }
    }
}
createErrorFromCodeLookup.set(0x1786, () => new TokenCurentlyInUseError());
createErrorFromNameLookup.set('TokenCurentlyInUse', () => new TokenCurentlyInUseError());
/**
 * InvalidRulesetAuthority: 'Invalid ruleset authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidRulesetAuthorityError extends Error {
    constructor() {
        super('Invalid ruleset authority');
        this.code = 0x1787;
        this.name = 'InvalidRulesetAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidRulesetAuthorityError);
        }
    }
}
createErrorFromCodeLookup.set(0x1787, () => new InvalidRulesetAuthorityError());
createErrorFromNameLookup.set('InvalidRulesetAuthority', () => new InvalidRulesetAuthorityError());
/**
 * InvalidFreezeAuthority: 'Invalid freeze authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidFreezeAuthorityError extends Error {
    constructor() {
        super('Invalid freeze authority');
        this.code = 0x1788;
        this.name = 'InvalidFreezeAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidFreezeAuthorityError);
        }
    }
}
createErrorFromCodeLookup.set(0x1788, () => new InvalidFreezeAuthorityError());
createErrorFromNameLookup.set('InvalidFreezeAuthority', () => new InvalidFreezeAuthorityError());
/**
 * InvalidMintAuthority: 'Invalid mint authority'
 *
 * @category Errors
 * @category generated
 */
export class InvalidMintAuthorityError extends Error {
    constructor() {
        super('Invalid mint authority');
        this.code = 0x1789;
        this.name = 'InvalidMintAuthority';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, InvalidMintAuthorityError);
        }
    }
}
createErrorFromCodeLookup.set(0x1789, () => new InvalidMintAuthorityError());
createErrorFromNameLookup.set('InvalidMintAuthority', () => new InvalidMintAuthorityError());
/**
 * NotEnoughRemainingAccounts: 'Not enought remaining accounts'
 *
 * @category Errors
 * @category generated
 */
export class NotEnoughRemainingAccountsError extends Error {
    constructor() {
        super('Not enought remaining accounts');
        this.code = 0x178a;
        this.name = 'NotEnoughRemainingAccounts';
        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(this, NotEnoughRemainingAccountsError);
        }
    }
}
createErrorFromCodeLookup.set(0x178a, () => new NotEnoughRemainingAccountsError());
createErrorFromNameLookup.set('NotEnoughRemainingAccounts', () => new NotEnoughRemainingAccountsError());
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 * @category generated
 */
export function errorFromCode(code) {
    const createError = createErrorFromCodeLookup.get(code);
    return createError != null ? createError() : null;
}
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 * @category generated
 */
export function errorFromName(name) {
    const createError = createErrorFromNameLookup.get(name);
    return createError != null ? createError() : null;
}
//# sourceMappingURL=index.js.map