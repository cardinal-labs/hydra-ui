/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';
/**
 * Holds the data for the {@link Ruleset} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Ruleset {
    constructor(accountType /* size: 8 */, version, authority, name, allowedPrograms, disallowedAddresses, extensions) {
        this.accountType = accountType;
        this.version = version;
        this.authority = authority;
        this.name = name;
        this.allowedPrograms = allowedPrograms;
        this.disallowedAddresses = disallowedAddresses;
        this.extensions = extensions;
    }
    /**
     * Creates a {@link Ruleset} instance from the provided args.
     */
    static fromArgs(args) {
        return new Ruleset(args.accountType, args.version, args.authority, args.name, args.allowedPrograms, args.disallowedAddresses, args.extensions);
    }
    /**
     * Deserializes the {@link Ruleset} from the data of the provided {@link web3.AccountInfo}.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static fromAccountInfo(accountInfo, offset = 0) {
        return Ruleset.deserialize(accountInfo.data, offset);
    }
    /**
     * Retrieves the account info from the provided address and deserializes
     * the {@link Ruleset} from its data.
     *
     * @throws Error if no account info is found at the address or if deserialization fails
     */
    static async fromAccountAddress(connection, address) {
        const accountInfo = await connection.getAccountInfo(address);
        if (accountInfo == null) {
            throw new Error(`Unable to find Ruleset account at ${address}`);
        }
        return Ruleset.fromAccountInfo(accountInfo, 0)[0];
    }
    /**
     * Provides a {@link web3.Connection.getProgramAccounts} config builder,
     * to fetch accounts matching filters that can be specified via that builder.
     *
     * @param programId - the program that owns the accounts we are filtering
     */
    static gpaBuilder(programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')) {
        return beetSolana.GpaBuilder.fromStruct(programId, rulesetBeet);
    }
    /**
     * Deserializes the {@link Ruleset} from the provided data Buffer.
     * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
     */
    static deserialize(buf, offset = 0) {
        return rulesetBeet.deserialize(buf, offset);
    }
    /**
     * Serializes the {@link Ruleset} into a Buffer.
     * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
     */
    serialize() {
        return rulesetBeet.serialize(this);
    }
    /**
     * Returns the byteSize of a {@link Buffer} holding the serialized data of
     * {@link Ruleset} for the provided args.
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     */
    static byteSize(args) {
        const instance = Ruleset.fromArgs(args);
        return rulesetBeet.toFixedFromValue(instance).byteSize;
    }
    /**
     * Fetches the minimum balance needed to exempt an account holding
     * {@link Ruleset} data from rent
     *
     * @param args need to be provided since the byte size for this account
     * depends on them
     * @param connection used to retrieve the rent exemption information
     */
    static async getMinimumBalanceForRentExemption(args, connection, commitment) {
        return connection.getMinimumBalanceForRentExemption(Ruleset.byteSize(args), commitment);
    }
    /**
     * Returns a readable version of {@link Ruleset} properties
     * and can be used to convert to JSON and/or logging
     */
    pretty() {
        return {
            accountType: this.accountType,
            version: this.version,
            authority: this.authority.toBase58(),
            name: this.name,
            allowedPrograms: this.allowedPrograms,
            disallowedAddresses: this.disallowedAddresses,
            extensions: this.extensions,
        };
    }
}
/**
 * @category Accounts
 * @category generated
 */
export const rulesetBeet = new beet.FixableBeetStruct([
    ['accountType', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['version', beet.u8],
    ['authority', beetSolana.publicKey],
    ['name', beet.utf8String],
    ['allowedPrograms', beet.array(beetSolana.publicKey)],
    ['disallowedAddresses', beet.array(beetSolana.publicKey)],
    ['extensions', beet.array(beetSolana.publicKey)],
], Ruleset.fromArgs, 'Ruleset');
//# sourceMappingURL=Ruleset.js.map