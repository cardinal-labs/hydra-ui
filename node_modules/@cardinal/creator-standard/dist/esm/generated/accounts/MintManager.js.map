{"version":3,"file":"MintManager.js","sourceRoot":"","sources":["../../../../sdk/generated/accounts/MintManager.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as web3 from '@solana/web3.js'\nimport * as beet from '@metaplex-foundation/beet'\nimport * as beetSolana from '@metaplex-foundation/beet-solana'\n\n/**\n * Arguments used to create {@link MintManager}\n * @category Accounts\n * @category generated\n */\nexport type MintManagerArgs = {\n  accountType: number[] /* size: 8 */\n  version: number\n  mint: web3.PublicKey\n  authority: web3.PublicKey\n  ruleset: web3.PublicKey\n  inUseBy: beet.COption<web3.PublicKey>\n}\n/**\n * Holds the data for the {@link MintManager} Account and provides de/serialization\n * functionality for that data\n *\n * @category Accounts\n * @category generated\n */\nexport class MintManager implements MintManagerArgs {\n  private constructor(\n    readonly accountType: number[] /* size: 8 */,\n    readonly version: number,\n    readonly mint: web3.PublicKey,\n    readonly authority: web3.PublicKey,\n    readonly ruleset: web3.PublicKey,\n    readonly inUseBy: beet.COption<web3.PublicKey>\n  ) {}\n\n  /**\n   * Creates a {@link MintManager} instance from the provided args.\n   */\n  static fromArgs(args: MintManagerArgs) {\n    return new MintManager(\n      args.accountType,\n      args.version,\n      args.mint,\n      args.authority,\n      args.ruleset,\n      args.inUseBy\n    )\n  }\n\n  /**\n   * Deserializes the {@link MintManager} from the data of the provided {@link web3.AccountInfo}.\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\n   */\n  static fromAccountInfo(\n    accountInfo: web3.AccountInfo<Buffer>,\n    offset = 0\n  ): [MintManager, number] {\n    return MintManager.deserialize(accountInfo.data, offset)\n  }\n\n  /**\n   * Retrieves the account info from the provided address and deserializes\n   * the {@link MintManager} from its data.\n   *\n   * @throws Error if no account info is found at the address or if deserialization fails\n   */\n  static async fromAccountAddress(\n    connection: web3.Connection,\n    address: web3.PublicKey\n  ): Promise<MintManager> {\n    const accountInfo = await connection.getAccountInfo(address)\n    if (accountInfo == null) {\n      throw new Error(`Unable to find MintManager account at ${address}`)\n    }\n    return MintManager.fromAccountInfo(accountInfo, 0)[0]\n  }\n\n  /**\n   * Provides a {@link web3.Connection.getProgramAccounts} config builder,\n   * to fetch accounts matching filters that can be specified via that builder.\n   *\n   * @param programId - the program that owns the accounts we are filtering\n   */\n  static gpaBuilder(\n    programId: web3.PublicKey = new web3.PublicKey(\n      'creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez'\n    )\n  ) {\n    return beetSolana.GpaBuilder.fromStruct(programId, mintManagerBeet)\n  }\n\n  /**\n   * Deserializes the {@link MintManager} from the provided data Buffer.\n   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.\n   */\n  static deserialize(buf: Buffer, offset = 0): [MintManager, number] {\n    return mintManagerBeet.deserialize(buf, offset)\n  }\n\n  /**\n   * Serializes the {@link MintManager} into a Buffer.\n   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.\n   */\n  serialize(): [Buffer, number] {\n    return mintManagerBeet.serialize(this)\n  }\n\n  /**\n   * Returns the byteSize of a {@link Buffer} holding the serialized data of\n   * {@link MintManager} for the provided args.\n   *\n   * @param args need to be provided since the byte size for this account\n   * depends on them\n   */\n  static byteSize(args: MintManagerArgs) {\n    const instance = MintManager.fromArgs(args)\n    return mintManagerBeet.toFixedFromValue(instance).byteSize\n  }\n\n  /**\n   * Fetches the minimum balance needed to exempt an account holding\n   * {@link MintManager} data from rent\n   *\n   * @param args need to be provided since the byte size for this account\n   * depends on them\n   * @param connection used to retrieve the rent exemption information\n   */\n  static async getMinimumBalanceForRentExemption(\n    args: MintManagerArgs,\n    connection: web3.Connection,\n    commitment?: web3.Commitment\n  ): Promise<number> {\n    return connection.getMinimumBalanceForRentExemption(\n      MintManager.byteSize(args),\n      commitment\n    )\n  }\n\n  /**\n   * Returns a readable version of {@link MintManager} properties\n   * and can be used to convert to JSON and/or logging\n   */\n  pretty() {\n    return {\n      accountType: this.accountType,\n      version: this.version,\n      mint: this.mint.toBase58(),\n      authority: this.authority.toBase58(),\n      ruleset: this.ruleset.toBase58(),\n      inUseBy: this.inUseBy,\n    }\n  }\n}\n\n/**\n * @category Accounts\n * @category generated\n */\nexport const mintManagerBeet = new beet.FixableBeetStruct<\n  MintManager,\n  MintManagerArgs\n>(\n  [\n    ['accountType', beet.uniformFixedSizeArray(beet.u8, 8)],\n    ['version', beet.u8],\n    ['mint', beetSolana.publicKey],\n    ['authority', beetSolana.publicKey],\n    ['ruleset', beetSolana.publicKey],\n    ['inUseBy', beet.coption(beetSolana.publicKey)],\n  ],\n  MintManager.fromArgs,\n  'MintManager'\n)\n"]}