{"version":3,"file":"SetInUseBy.js","sourceRoot":"","sources":["../../../../sdk/generated/instructions/SetInUseBy.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,KAAK,IAAI,MAAM,2BAA2B,CAAA;AACjD,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAA;AAEvC;;;;GAIG;AACH,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,IAAI,CAAC,cAAc,CAEpD,CAAC,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,2BAA2B,CAAC,CAAA;AAqBxE,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAAC,CAAA;AAEnD;;;;;;;GAOG;AACH,MAAM,UAAU,2BAA2B,CACzC,QAAuC,EACvC,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,6CAA6C,CAAC;IAE7E,MAAM,CAAC,IAAI,CAAC,GAAG,gBAAgB,CAAC,SAAS,CAAC;QACxC,wBAAwB,EAAE,kCAAkC;KAC7D,CAAC,CAAA;IACF,MAAM,IAAI,GAAuB;QAC/B;YACE,MAAM,EAAE,QAAQ,CAAC,WAAW;YAC5B,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,OAAO;YACxB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,cAAc;YAC/B,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,MAAM;YACvB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,IAAI;SACf;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,kBAAkB;YACnC,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;KACF,CAAA;IAED,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC;QACzC,SAAS;QACT,IAAI;QACJ,IAAI;KACL,CAAC,CAAA;IACF,OAAO,EAAE,CAAA;AACX,CAAC","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as beet from '@metaplex-foundation/beet'\nimport * as web3 from '@solana/web3.js'\n\n/**\n * @category Instructions\n * @category SetInUseBy\n * @category generated\n */\nexport const SetInUseByStruct = new beet.BeetArgsStruct<{\n  instructionDiscriminator: number\n}>([['instructionDiscriminator', beet.u8]], 'SetInUseByInstructionArgs')\n/**\n * Accounts required by the _SetInUseBy_ instruction\n *\n * @property [_writable_] mintManager\n * @property [] ruleset\n * @property [] inUseByAddress\n * @property [**signer**] holder\n * @property [] holderTokenAccount\n * @category Instructions\n * @category SetInUseBy\n * @category generated\n */\nexport type SetInUseByInstructionAccounts = {\n  mintManager: web3.PublicKey\n  ruleset: web3.PublicKey\n  inUseByAddress: web3.PublicKey\n  holder: web3.PublicKey\n  holderTokenAccount: web3.PublicKey\n}\n\nexport const setInUseByInstructionDiscriminator = 5\n\n/**\n * Creates a _SetInUseBy_ instruction.\n *\n * @param accounts that will be accessed while the instruction is processed\n * @category Instructions\n * @category SetInUseBy\n * @category generated\n */\nexport function createSetInUseByInstruction(\n  accounts: SetInUseByInstructionAccounts,\n  programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')\n) {\n  const [data] = SetInUseByStruct.serialize({\n    instructionDiscriminator: setInUseByInstructionDiscriminator,\n  })\n  const keys: web3.AccountMeta[] = [\n    {\n      pubkey: accounts.mintManager,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.ruleset,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.inUseByAddress,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.holder,\n      isWritable: false,\n      isSigner: true,\n    },\n    {\n      pubkey: accounts.holderTokenAccount,\n      isWritable: false,\n      isSigner: false,\n    },\n  ]\n\n  const ix = new web3.TransactionInstruction({\n    programId,\n    keys,\n    data,\n  })\n  return ix\n}\n"]}