/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { updateRulesetIxBeet } from '../types/UpdateRulesetIx';
/**
 * @category Instructions
 * @category UpdateRuleset
 * @category generated
 */
export const UpdateRulesetStruct = new beet.FixableBeetArgsStruct([
    ['instructionDiscriminator', beet.u8],
    ['updateRulesetIx', updateRulesetIxBeet],
], 'UpdateRulesetInstructionArgs');
export const updateRulesetInstructionDiscriminator = 1;
/**
 * Creates a _UpdateRuleset_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateRuleset
 * @category generated
 */
export function createUpdateRulesetInstruction(accounts, args, programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')) {
    var _a;
    const [data] = UpdateRulesetStruct.serialize({
        instructionDiscriminator: updateRulesetInstructionDiscriminator,
        ...args,
    });
    const keys = [
        {
            pubkey: accounts.ruleset,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.authority,
            isWritable: false,
            isSigner: true,
        },
        {
            pubkey: accounts.payer,
            isWritable: true,
            isSigner: true,
        },
        {
            pubkey: (_a = accounts.systemProgram) !== null && _a !== void 0 ? _a : web3.SystemProgram.programId,
            isWritable: false,
            isSigner: false,
        },
    ];
    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
//# sourceMappingURL=UpdateRuleset.js.map