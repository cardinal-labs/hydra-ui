{"version":3,"file":"Approve.js","sourceRoot":"","sources":["../../../../sdk/generated/instructions/Approve.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAA;AAC7C,OAAO,KAAK,IAAI,MAAM,2BAA2B,CAAA;AACjD,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAA;AACvC,OAAO,EAAa,aAAa,EAAE,MAAM,oBAAoB,CAAA;AAU7D;;;;GAIG;AACH,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,IAAI,CAAC,cAAc,CAKlD;IACE,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,CAAC;IACrC,CAAC,WAAW,EAAE,aAAa,CAAC;CAC7B,EACD,wBAAwB,CACzB,CAAA;AAwBD,MAAM,CAAC,MAAM,+BAA+B,GAAG,CAAC,CAAA;AAEhD;;;;;;;;;GASG;AACH,MAAM,UAAU,wBAAwB,CACtC,QAAoC,EACpC,IAA4B,EAC5B,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,6CAA6C,CAAC;;IAE7E,MAAM,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,SAAS,CAAC;QACrC,wBAAwB,EAAE,+BAA+B;QACzD,GAAG,IAAI;KACR,CAAC,CAAA;IACF,MAAM,IAAI,GAAuB;QAC/B;YACE,MAAM,EAAE,QAAQ,CAAC,WAAW;YAC5B,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,OAAO;YACxB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,IAAI;YACrB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,kBAAkB;YACnC,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,MAAM;YACvB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,IAAI;SACf;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,QAAQ;YACzB,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,MAAA,QAAQ,CAAC,YAAY,mCAAI,QAAQ,CAAC,gBAAgB;YAC1D,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;KACF,CAAA;IAED,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC;QACzC,SAAS;QACT,IAAI;QACJ,IAAI;KACL,CAAC,CAAA;IACF,OAAO,EAAE,CAAA;AACX,CAAC","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as splToken from '@solana/spl-token'\nimport * as beet from '@metaplex-foundation/beet'\nimport * as web3 from '@solana/web3.js'\nimport { ApproveIx, approveIxBeet } from '../types/ApproveIx'\n\n/**\n * @category Instructions\n * @category Approve\n * @category generated\n */\nexport type ApproveInstructionArgs = {\n  approveIx: ApproveIx\n}\n/**\n * @category Instructions\n * @category Approve\n * @category generated\n */\nexport const ApproveStruct = new beet.BeetArgsStruct<\n  ApproveInstructionArgs & {\n    instructionDiscriminator: number\n  }\n>(\n  [\n    ['instructionDiscriminator', beet.u8],\n    ['approveIx', approveIxBeet],\n  ],\n  'ApproveInstructionArgs'\n)\n/**\n * Accounts required by the _Approve_ instruction\n *\n * @property [] mintManager\n * @property [] ruleset\n * @property [] mint\n * @property [_writable_] holderTokenAccount\n * @property [**signer**] holder\n * @property [] delegate\n * @category Instructions\n * @category Approve\n * @category generated\n */\nexport type ApproveInstructionAccounts = {\n  mintManager: web3.PublicKey\n  ruleset: web3.PublicKey\n  mint: web3.PublicKey\n  holderTokenAccount: web3.PublicKey\n  holder: web3.PublicKey\n  delegate: web3.PublicKey\n  tokenProgram?: web3.PublicKey\n}\n\nexport const approveInstructionDiscriminator = 7\n\n/**\n * Creates a _Approve_ instruction.\n *\n * @param accounts that will be accessed while the instruction is processed\n * @param args to provide as instruction data to the program\n *\n * @category Instructions\n * @category Approve\n * @category generated\n */\nexport function createApproveInstruction(\n  accounts: ApproveInstructionAccounts,\n  args: ApproveInstructionArgs,\n  programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')\n) {\n  const [data] = ApproveStruct.serialize({\n    instructionDiscriminator: approveInstructionDiscriminator,\n    ...args,\n  })\n  const keys: web3.AccountMeta[] = [\n    {\n      pubkey: accounts.mintManager,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.ruleset,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.mint,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.holderTokenAccount,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.holder,\n      isWritable: false,\n      isSigner: true,\n    },\n    {\n      pubkey: accounts.delegate,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    },\n  ]\n\n  const ix = new web3.TransactionInstruction({\n    programId,\n    keys,\n    data,\n  })\n  return ix\n}\n"]}