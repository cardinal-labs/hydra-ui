{"version":3,"file":"Burn.js","sourceRoot":"","sources":["../../../../sdk/generated/instructions/Burn.ts"],"names":[],"mappings":"AAAA;;;;;GAKG;AAEH,OAAO,KAAK,QAAQ,MAAM,mBAAmB,CAAA;AAC7C,OAAO,KAAK,IAAI,MAAM,2BAA2B,CAAA;AACjD,OAAO,KAAK,IAAI,MAAM,iBAAiB,CAAA;AAEvC;;;;GAIG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,cAAc,CAE9C,CAAC,CAAC,0BAA0B,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,qBAAqB,CAAC,CAAA;AAqBlE,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,CAAA;AAE7C;;;;;;;GAOG;AACH,MAAM,UAAU,qBAAqB,CACnC,QAAiC,EACjC,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,CAAC,6CAA6C,CAAC;;IAE7E,MAAM,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,SAAS,CAAC;QAClC,wBAAwB,EAAE,4BAA4B;KACvD,CAAC,CAAA;IACF,MAAM,IAAI,GAAuB;QAC/B;YACE,MAAM,EAAE,QAAQ,CAAC,WAAW;YAC5B,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,IAAI;YACrB,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,kBAAkB;YACnC,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,QAAQ,CAAC,MAAM;YACvB,UAAU,EAAE,IAAI;YAChB,QAAQ,EAAE,IAAI;SACf;QACD;YACE,MAAM,EAAE,MAAA,QAAQ,CAAC,YAAY,mCAAI,QAAQ,CAAC,gBAAgB;YAC1D,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;QACD;YACE,MAAM,EAAE,MAAA,QAAQ,CAAC,aAAa,mCAAI,IAAI,CAAC,aAAa,CAAC,SAAS;YAC9D,UAAU,EAAE,KAAK;YACjB,QAAQ,EAAE,KAAK;SAChB;KACF,CAAA;IAED,MAAM,EAAE,GAAG,IAAI,IAAI,CAAC,sBAAsB,CAAC;QACzC,SAAS;QACT,IAAI;QACJ,IAAI;KACL,CAAC,CAAA;IACF,OAAO,EAAE,CAAA;AACX,CAAC","sourcesContent":["/**\n * This code was GENERATED using the solita package.\n * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.\n *\n * See: https://github.com/metaplex-foundation/solita\n */\n\nimport * as splToken from '@solana/spl-token'\nimport * as beet from '@metaplex-foundation/beet'\nimport * as web3 from '@solana/web3.js'\n\n/**\n * @category Instructions\n * @category Burn\n * @category generated\n */\nexport const BurnStruct = new beet.BeetArgsStruct<{\n  instructionDiscriminator: number\n}>([['instructionDiscriminator', beet.u8]], 'BurnInstructionArgs')\n/**\n * Accounts required by the _Burn_ instruction\n *\n * @property [_writable_] mintManager\n * @property [_writable_] mint\n * @property [_writable_] holderTokenAccount\n * @property [_writable_, **signer**] holder\n * @category Instructions\n * @category Burn\n * @category generated\n */\nexport type BurnInstructionAccounts = {\n  mintManager: web3.PublicKey\n  mint: web3.PublicKey\n  holderTokenAccount: web3.PublicKey\n  holder: web3.PublicKey\n  tokenProgram?: web3.PublicKey\n  systemProgram?: web3.PublicKey\n}\n\nexport const burnInstructionDiscriminator = 9\n\n/**\n * Creates a _Burn_ instruction.\n *\n * @param accounts that will be accessed while the instruction is processed\n * @category Instructions\n * @category Burn\n * @category generated\n */\nexport function createBurnInstruction(\n  accounts: BurnInstructionAccounts,\n  programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')\n) {\n  const [data] = BurnStruct.serialize({\n    instructionDiscriminator: burnInstructionDiscriminator,\n  })\n  const keys: web3.AccountMeta[] = [\n    {\n      pubkey: accounts.mintManager,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.mint,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.holderTokenAccount,\n      isWritable: true,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.holder,\n      isWritable: true,\n      isSigner: true,\n    },\n    {\n      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,\n      isWritable: false,\n      isSigner: false,\n    },\n    {\n      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,\n      isWritable: false,\n      isSigner: false,\n    },\n  ]\n\n  const ix = new web3.TransactionInstruction({\n    programId,\n    keys,\n    data,\n  })\n  return ix\n}\n"]}