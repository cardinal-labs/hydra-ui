/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category InitializeAccount
 * @category generated
 */
export declare const InitializeAccountStruct: beet.BeetArgsStruct<{
    instructionDiscriminator: number;
}>;
/**
 * Accounts required by the _InitializeAccount_ instruction
 *
 * @property [] mint
 * @property [_writable_] tokenAccount
 * @property [] owner
 * @property [_writable_, **signer**] payer
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category InitializeAccount
 * @category generated
 */
export declare type InitializeAccountInstructionAccounts = {
    mint: web3.PublicKey;
    tokenAccount: web3.PublicKey;
    owner: web3.PublicKey;
    payer: web3.PublicKey;
    rent?: web3.PublicKey;
    tokenProgram?: web3.PublicKey;
    associatedTokenProgram: web3.PublicKey;
    systemProgram?: web3.PublicKey;
};
export declare const initializeAccountInstructionDiscriminator = 11;
/**
 * Creates a _InitializeAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category InitializeAccount
 * @category generated
 */
export declare function createInitializeAccountInstruction(accounts: InitializeAccountInstructionAccounts, programId?: web3.PublicKey): web3.TransactionInstruction;
//# sourceMappingURL=InitializeAccount.d.ts.map