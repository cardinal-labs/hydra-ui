/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */
import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
/**
 * @category Instructions
 * @category Revoke
 * @category generated
 */
export const RevokeStruct = new beet.BeetArgsStruct([['instructionDiscriminator', beet.u8]], 'RevokeInstructionArgs');
export const revokeInstructionDiscriminator = 12;
/**
 * Creates a _Revoke_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category Revoke
 * @category generated
 */
export function createRevokeInstruction(accounts, programId = new web3.PublicKey('creatS3mfzrTGjwuLD1Pa2HXJ1gmq6WXb4ssnwUbJez')) {
    var _a;
    const [data] = RevokeStruct.serialize({
        instructionDiscriminator: revokeInstructionDiscriminator,
    });
    const keys = [
        {
            pubkey: accounts.mintManager,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.mint,
            isWritable: false,
            isSigner: false,
        },
        {
            pubkey: accounts.holderTokenAccount,
            isWritable: true,
            isSigner: false,
        },
        {
            pubkey: accounts.holder,
            isWritable: false,
            isSigner: true,
        },
        {
            pubkey: (_a = accounts.tokenProgram) !== null && _a !== void 0 ? _a : splToken.TOKEN_PROGRAM_ID,
            isWritable: false,
            isSigner: false,
        },
    ];
    const ix = new web3.TransactionInstruction({
        programId,
        keys,
        data,
    });
    return ix;
}
//# sourceMappingURL=Revoke.js.map