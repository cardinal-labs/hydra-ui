"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccountPopover = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const polished_1 = require("polished");
const fa_1 = require("react-icons/fa");
const __1 = require("../");
const AccountPopover = ({ connection, environment, wallet, style, dark, handleDisconnect, }) => {
    var _a;
    const { show } = (0, __1.useWalletIdentity)();
    const { displayName, loadingName } = (0, __1.useAddressName)(connection, (_a = wallet === null || wallet === void 0 ? void 0 : wallet.publicKey) !== null && _a !== void 0 ? _a : undefined);
    if (!wallet.publicKey)
        return (0, jsx_runtime_1.jsx)(jsx_runtime_1.Fragment, {});
    return ((0, jsx_runtime_1.jsx)("div", Object.assign({ className: "w-screen max-w-[300px] " }, { children: (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "w-full rounded-lg shadow-2xl", style: Object.assign(Object.assign({}, style), { backgroundColor: dark ? 'rgb(42, 44, 52)' : 'rgb(255, 255, 255)', color: dark ? '#fff' : '#333' }) }, { children: [(0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "flex items-center justify-between p-7 pb-0" }, { children: [(0, jsx_runtime_1.jsx)("div", Object.assign({ className: "grid gap-2 text-base" }, { children: (0, jsx_runtime_1.jsx)("div", Object.assign({ className: "flex items-center" }, { children: (0, jsx_runtime_1.jsx)(__1.ProfileSmall, { dark: dark, connection: connection, address: wallet.publicKey }) })) })), (0, jsx_runtime_1.jsx)("div", { className: "flex gap-3" })] })), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: "flex flex-col gap-1 p-5" }, { children: [wallet && ((0, jsx_runtime_1.jsxs)(MenuItem, Object.assign({ dark: dark, onClick: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return show(wallet, connection, environment); }) }, { children: [(0, jsx_runtime_1.jsx)(fa_1.FaTwitter, {}), (0, jsx_runtime_1.jsx)("span", { children: loadingName ? ((0, jsx_runtime_1.jsx)("div", { className: "animate h-4 w-24 animate-pulse", style: { background: (0, polished_1.rgba)(0, 0, 0, 0.1) } })) : displayName ? ('Edit Twitter') : ('Link Twitter') })] }))), (0, jsx_runtime_1.jsxs)(MenuItem, Object.assign({ onClick: handleDisconnect, dark: dark }, { children: [(0, jsx_runtime_1.jsx)(fa_1.FaPowerOff, {}), (0, jsx_runtime_1.jsx)("span", { children: "Disconnect" })] }))] }))] })) })));
};
exports.AccountPopover = AccountPopover;
const MenuItem = ({ children, onClick, dark, }) => ((0, jsx_runtime_1.jsx)("div", Object.assign({ onClick: onClick, className: `flex h-10 w-full cursor-pointer appearance-none items-center gap-3 rounded border-none bg-none p-3 text-base leading-4 outline-none ${dark ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}` }, { children: children })));
//# sourceMappingURL=AccountPopover.js.map