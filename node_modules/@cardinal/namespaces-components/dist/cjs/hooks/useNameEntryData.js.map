{"version":3,"file":"useNameEntryData.js","sourceRoot":"","sources":["../../../src/hooks/useNameEntryData.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountData,\n  CertificateData} from \"@cardinal/certificates\";\nimport {\n  certificateIdForMint,\n  getCertificate,\n} from \"@cardinal/certificates\";\nimport type {\n  EntryData} from \"@cardinal/namespaces\";\nimport {\n  getNameEntry,\n  NAMESPACES_PROGRAM_ID,\n} from \"@cardinal/namespaces\";\nimport * as metaplex from \"@metaplex/js\";\nimport * as anchor from \"@project-serum/anchor\";\nimport * as splToken from \"@solana/spl-token\";\nimport type {\n  Connection,\n  TokenAccountBalancePair} from \"@solana/web3.js\";\nimport {\n  PublicKey\n} from \"@solana/web3.js\";\nimport { useMemo, useState } from \"react\";\n\nexport type NameEntryData = {\n  nameEntry: AccountData<EntryData>;\n  certificate: AccountData<CertificateData>;\n  metaplexData: any;\n  arweaveData: { pubkey: PublicKey; parsed: any };\n  largestHolders: TokenAccountBalancePair[];\n  owner: PublicKey | undefined;\n  isOwnerPDA: boolean;\n};\n\nexport async function getNameEntryData(\n  connection: Connection,\n  namespaceName: string,\n  entryName: string\n): Promise<NameEntryData> {\n  const nameEntry = await getNameEntry(connection, namespaceName, entryName);\n  const { mint } = nameEntry.parsed;\n\n  const [[metaplexId], [certificateId]] = await Promise.all([\n    PublicKey.findProgramAddress(\n      [\n        anchor.utils.bytes.utf8.encode(\n          metaplex.programs.metadata.MetadataProgram.PREFIX\n        ),\n        metaplex.programs.metadata.MetadataProgram.PUBKEY.toBuffer(),\n        mint.toBuffer(),\n      ],\n      metaplex.programs.metadata.MetadataProgram.PUBKEY\n    ),\n    certificateIdForMint(mint),\n  ]);\n  const [metaplexData, certificate] = await Promise.all([\n    metaplex.programs.metadata.Metadata.load(connection, metaplexId),\n    getCertificate(connection, certificateId),\n  ]);\n  let json;\n  try {\n    json =\n      metaplexData.data.data.uri &&\n      (await fetch(metaplexData.data.data.uri).then((r) => r.json()));\n  } catch (e) {\n    console.log(\"Failed to get json\", json);\n  }\n\n  const largestHolders = await connection.getTokenLargestAccounts(mint);\n  const certificateMintToken = new splToken.Token(\n    connection,\n    mint,\n    splToken.TOKEN_PROGRAM_ID,\n    // not used\n    anchor.web3.Keypair.generate()\n  );\n\n  const largestTokenAccount =\n    largestHolders?.value[0]?.address &&\n    (await certificateMintToken.getAccountInfo(\n      largestHolders?.value[0]?.address\n    ));\n\n  let isOwnerPDA = false;\n  if (largestTokenAccount?.owner) {\n    const ownerAccountInfo = await connection.getAccountInfo(\n      largestTokenAccount?.owner\n    );\n    isOwnerPDA =\n      ownerAccountInfo?.owner.toString() === NAMESPACES_PROGRAM_ID.toString();\n  }\n\n  return {\n    nameEntry,\n    certificate,\n    metaplexData,\n    arweaveData: { pubkey: metaplexId, parsed: json },\n    largestHolders: largestHolders.value,\n    owner: largestTokenAccount?.owner,\n    isOwnerPDA,\n  };\n}\n\nexport const useNameEntryData = (\n  connection: Connection | null,\n  namespaceName: string,\n  entryName: string | undefined\n) => {\n  const [loadingNameEntry, setLoadingNameEntry] = useState<boolean | undefined>(\n    undefined\n  );\n  const [nameEntryData, setNameEntryData] = useState<NameEntryData | undefined>(\n    undefined\n  );\n\n  const refreshNameEntryData = async () => {\n    if (!entryName || !connection) return;\n    setLoadingNameEntry(true);\n    try {\n      const data = await getNameEntryData(connection, namespaceName, entryName);\n      setNameEntryData(data);\n    } catch (e) {\n      setNameEntryData(undefined);\n      console.log(\"Failed to get name entry: \", e);\n    } finally {\n      setLoadingNameEntry(false);\n    }\n  };\n\n  useMemo(async () => {\n    refreshNameEntryData();\n  }, [connection, namespaceName, entryName]);\n\n  return {\n    nameEntryData,\n    refreshNameEntryData,\n    loadingNameEntry,\n  };\n};\n"]}