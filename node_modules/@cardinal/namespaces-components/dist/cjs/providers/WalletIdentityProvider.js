"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWalletIdentity = exports.WalletIdentityProvider = exports.WalletIdentityContext = void 0;
const tslib_1 = require("tslib");
const jsx_runtime_1 = require("@emotion/react/jsx-runtime");
const react_1 = tslib_1.__importStar(require("react"));
const __1 = require("..");
const modal_1 = require("../modal");
const transactions_1 = require("../utils/transactions");
exports.WalletIdentityContext = react_1.default.createContext(null);
const WalletIdentityProvider = ({ appName, appTwitter, children, }) => {
    const [wallet, setWallet] = (0, react_1.useState)();
    const [connection, setConnection] = (0, react_1.useState)();
    const [secondaryConnection, setSecondaryConnection] = (0, react_1.useState)();
    const [cluster, setCluster] = (0, react_1.useState)(undefined);
    const [dev, setDev] = (0, react_1.useState)(undefined);
    const [showIdentityModal, setShowIdentityModal] = (0, react_1.useState)(false);
    const [handle, setHandle] = (0, react_1.useState)(undefined);
    return ((0, jsx_runtime_1.jsxs)(exports.WalletIdentityContext.Provider, Object.assign({ value: {
            show: (wallet, connection, cluster, secondaryConnection, dev) => {
                setWallet(wallet);
                setConnection(connection);
                setCluster(cluster);
                setSecondaryConnection(secondaryConnection);
                setDev(dev);
                setShowIdentityModal(true);
            },
            handle,
            showIdentityModal,
        } }, { children: [(0, jsx_runtime_1.jsx)(modal_1.Modal, Object.assign({ isOpen: showIdentityModal, onDismiss: () => setShowIdentityModal(false), darkenOverlay: true }, { children: (0, jsx_runtime_1.jsx)(__1.ClaimCard, { dev: dev, cluster: cluster, wallet: wallet, connection: connection, secondaryConnection: secondaryConnection, appName: appName, appTwitter: appTwitter, onComplete: (handle) => {
                        setHandle(handle);
                        (0, transactions_1.withSleep)(() => {
                            setShowIdentityModal(false);
                        }, 1000);
                    } }) })), children] })));
};
exports.WalletIdentityProvider = WalletIdentityProvider;
const useWalletIdentity = () => {
    const identity = (0, react_1.useContext)(exports.WalletIdentityContext);
    if (!identity) {
        throw new Error('Not in WalletIdentity context');
    }
    return identity;
};
exports.useWalletIdentity = useWalletIdentity;
//# sourceMappingURL=WalletIdentityProvider.js.map