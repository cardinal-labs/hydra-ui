{"version":3,"file":"api.js","sourceRoot":"","sources":["../../../src/utils/api.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData, EntryData } from '@cardinal/namespaces'\nimport * as namespaces from '@cardinal/namespaces'\nimport type { Wallet } from '@saberhq/solana-contrib'\nimport * as web3 from '@solana/web3.js'\n\nimport { signAndSendTransaction } from './transactions'\n\nexport function apiBase(dev?: boolean): string {\n  return `https://${dev ? 'dev-api' : 'api'}.cardinal.so`\n}\n\nexport async function tryGetNameEntry(\n  connection: web3.Connection,\n  namespaceName: string,\n  entryName: string\n): Promise<AccountData<EntryData> | null> {\n  try {\n    const entry = await namespaces.getNameEntry(\n      connection,\n      namespaceName,\n      entryName\n    )\n    return entry\n  } catch (e) {\n    return null\n  }\n}\n\nexport async function revokeAndClaim(\n  cluster: string,\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  duration: number | null,\n  reverseEntryId: web3.PublicKey,\n  claimRequestId: web3.PublicKey,\n  certificateMintId: web3.PublicKey,\n  certificateOwnerId: web3.PublicKey\n): Promise<string> {\n  const entry = await tryGetNameEntry(connection, namespaceName, entryName)\n  const transaction = new web3.Transaction()\n  if (!entry?.parsed.reverseEntry) {\n    await namespaces.withRevokeReverseEntry(\n      connection,\n      wallet,\n      namespaceName,\n      entryName,\n      reverseEntryId,\n      claimRequestId,\n      transaction\n    )\n  }\n  await namespaces.withRevokeEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    certificateOwnerId,\n    claimRequestId,\n    transaction\n  )\n  transaction.feePayer = wallet.publicKey\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash\n  await wallet.signTransaction(transaction)\n  const txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  )\n\n  const transaction2 = new web3.Transaction()\n  await namespaces.withClaimEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    duration || 0,\n    transaction2\n  )\n  await namespaces.withSetReverseEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    transaction2\n  )\n  transaction2.feePayer = wallet.publicKey\n  transaction2.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash\n  await wallet.signTransaction(transaction2)\n  return web3.sendAndConfirmRawTransaction(connection, transaction2.serialize())\n}\n\nexport async function setReverseEntry(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  certificateMintId: web3.PublicKey\n): Promise<string> {\n  const transaction = await namespaces.withSetReverseEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    new web3.Transaction()\n  )\n  transaction.feePayer = wallet.publicKey\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash\n  await wallet.signTransaction(transaction)\n  let txid = null\n  txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  )\n  return txid\n}\n\nexport async function initAndClaimEntry(\n  cluster: string,\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  duration: number | null\n): Promise<string> {\n  const certificateMint = web3.Keypair.generate()\n  const transaction = new web3.Transaction()\n  await namespaces.withInitEntry(\n    connection,\n    wallet,\n    certificateMint.publicKey,\n    namespaceName,\n    entryName,\n    transaction\n  )\n  await namespaces.withClaimEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMint.publicKey,\n    duration || 0,\n    transaction\n  )\n  await namespaces.withSetReverseEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMint.publicKey,\n    transaction\n  )\n  transaction.feePayer = wallet.publicKey\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash\n  await wallet.signTransaction(transaction)\n  await transaction.partialSign(certificateMint)\n  return web3.sendAndConfirmRawTransaction(connection, transaction.serialize())\n}\n\nexport async function claimEntry(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  certificateMintId: web3.PublicKey,\n  duration: number | null\n): Promise<string> {\n  const transaction = await namespaces.withClaimEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    duration || 0,\n    new web3.Transaction()\n  )\n  await namespaces.withSetReverseEntry(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    certificateMintId,\n    transaction\n  )\n  transaction.feePayer = wallet.publicKey\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash\n  await wallet.signTransaction(transaction)\n  let txid = null\n  txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  )\n  return txid\n}\n\nexport async function setEntryData(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string,\n  entryData: string\n): Promise<string> {\n  const transaction = await namespaces.withSetEntryData(\n    connection,\n    wallet,\n    namespaceName,\n    entryName,\n    new web3.PublicKey(entryData),\n    new web3.Transaction()\n  )\n  transaction.feePayer = wallet.publicKey\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash\n  await wallet.signTransaction(transaction)\n  let txid = null\n  txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  )\n  return txid\n}\n\nexport async function approveClaimRequest(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  claimRequestId: web3.PublicKey\n): Promise<string> {\n  const transaction = await namespaces.withUpdateClaimRequest(\n    connection,\n    wallet,\n    namespaceName,\n    claimRequestId,\n    true,\n    new web3.Transaction()\n  )\n  transaction.feePayer = wallet.publicKey\n  transaction.recentBlockhash = (\n    await connection.getRecentBlockhash('max')\n  ).blockhash\n  await wallet.signTransaction(transaction)\n  let txid = null\n  txid = await web3.sendAndConfirmRawTransaction(\n    connection,\n    transaction.serialize()\n  )\n  return txid\n}\n\nexport async function getPendingClaimRequests(connection: web3.Connection) {\n  return namespaces.getPendingClaimRequests(connection)\n}\n\nexport async function createClaimRequest(\n  connection: web3.Connection,\n  wallet: Wallet,\n  namespaceName: string,\n  entryName: string\n): Promise<string> {\n  return await signAndSendTransaction(\n    connection,\n    wallet,\n    await namespaces.withCreateClaimRequest(\n      connection,\n      wallet,\n      namespaceName,\n      entryName,\n      wallet.publicKey,\n      new web3.Transaction()\n    )\n  )\n}\n"]}