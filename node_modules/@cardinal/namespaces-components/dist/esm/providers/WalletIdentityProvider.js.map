{"version":3,"file":"WalletIdentityProvider.js","sourceRoot":"","sources":["../../../src/providers/WalletIdentityProvider.tsx"],"names":[],"mappings":";AAEA,OAAO,KAAK,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AAEnD,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAA;AAC9B,OAAO,EAAE,KAAK,EAAE,MAAM,UAAU,CAAA;AAChC,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAA;AAcjD,MAAM,CAAC,MAAM,qBAAqB,GAAG,KAAK,CAAC,aAAa,CACtD,IAAI,CACL,CAAA;AAQD,MAAM,CAAC,MAAM,sBAAsB,GAAoB,CAAC,EACtD,OAAO,EACP,UAAU,EACV,QAAQ,GACF,EAAE,EAAE;IACV,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,EAAU,CAAA;IAC9C,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,EAAc,CAAA;IAC1D,MAAM,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,GAAG,QAAQ,EAAc,CAAA;IAC5E,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAsB,SAAS,CAAC,CAAA;IACtE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAsB,SAAS,CAAC,CAAA;IAC9D,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,QAAQ,CAAU,KAAK,CAAC,CAAA;IAC1E,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAqB,SAAS,CAAC,CAAA;IAEnE,OAAO,CACL,MAAC,qBAAqB,CAAC,QAAQ,kBAC7B,KAAK,EAAE;YACL,IAAI,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,mBAAmB,EAAE,GAAG,EAAE,EAAE;gBAC9D,SAAS,CAAC,MAAM,CAAC,CAAA;gBACjB,aAAa,CAAC,UAAU,CAAC,CAAA;gBACzB,UAAU,CAAC,OAAO,CAAC,CAAA;gBACnB,sBAAsB,CAAC,mBAAmB,CAAC,CAAA;gBAC3C,MAAM,CAAC,GAAG,CAAC,CAAA;gBACX,oBAAoB,CAAC,IAAI,CAAC,CAAA;YAC5B,CAAC;YACD,MAAM;YACN,iBAAiB;SAClB,iBAED,KAAC,KAAK,kBACJ,MAAM,EAAE,iBAAiB,EACzB,SAAS,EAAE,GAAG,EAAE,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAC5C,aAAa,EAAE,IAAI,gBAEnB,KAAC,SAAS,IACR,GAAG,EAAE,GAAG,EACR,OAAO,EAAE,OAAO,EAChB,MAAM,EAAE,MAAM,EACd,UAAU,EAAE,UAAU,EACtB,mBAAmB,EAAE,mBAAmB,EACxC,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,CAAC,MAAc,EAAE,EAAE;wBAC7B,SAAS,CAAC,MAAM,CAAC,CAAA;wBACjB,SAAS,CAAC,GAAG,EAAE;4BACb,oBAAoB,CAAC,KAAK,CAAC,CAAA;wBAC7B,CAAC,EAAE,IAAI,CAAC,CAAA;oBACV,CAAC,GACD,IACI,EACP,QAAQ,KACsB,CAClC,CAAA;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,iBAAiB,GAAG,GAAmB,EAAE;IACpD,MAAM,QAAQ,GAAG,UAAU,CAAC,qBAAqB,CAAC,CAAA;IAClD,IAAI,CAAC,QAAQ,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAA;KACjD;IACD,OAAO,QAAQ,CAAA;AACjB,CAAC,CAAA","sourcesContent":["import type { Wallet } from '@saberhq/solana-contrib'\nimport type { Cluster, Connection } from '@solana/web3.js'\nimport React, { useContext, useState } from 'react'\n\nimport { ClaimCard } from '..'\nimport { Modal } from '../modal'\nimport { withSleep } from '../utils/transactions'\n\nexport interface WalletIdentity {\n  show: (\n    wallet: Wallet,\n    connection: Connection,\n    cluster: Cluster,\n    secondaryConnection?: Connection,\n    dev?: boolean\n  ) => void\n  handle: string | undefined\n  showIdentityModal: boolean\n}\n\nexport const WalletIdentityContext = React.createContext<WalletIdentity | null>(\n  null\n)\n\ninterface Props {\n  appName?: string\n  appTwitter?: string\n  children: React.ReactNode\n}\n\nexport const WalletIdentityProvider: React.FC<Props> = ({\n  appName,\n  appTwitter,\n  children,\n}: Props) => {\n  const [wallet, setWallet] = useState<Wallet>()\n  const [connection, setConnection] = useState<Connection>()\n  const [secondaryConnection, setSecondaryConnection] = useState<Connection>()\n  const [cluster, setCluster] = useState<Cluster | undefined>(undefined)\n  const [dev, setDev] = useState<boolean | undefined>(undefined)\n  const [showIdentityModal, setShowIdentityModal] = useState<boolean>(false)\n  const [handle, setHandle] = useState<string | undefined>(undefined)\n\n  return (\n    <WalletIdentityContext.Provider\n      value={{\n        show: (wallet, connection, cluster, secondaryConnection, dev) => {\n          setWallet(wallet)\n          setConnection(connection)\n          setCluster(cluster)\n          setSecondaryConnection(secondaryConnection)\n          setDev(dev)\n          setShowIdentityModal(true)\n        },\n        handle,\n        showIdentityModal,\n      }}\n    >\n      <Modal\n        isOpen={showIdentityModal}\n        onDismiss={() => setShowIdentityModal(false)}\n        darkenOverlay={true}\n      >\n        <ClaimCard\n          dev={dev}\n          cluster={cluster}\n          wallet={wallet}\n          connection={connection}\n          secondaryConnection={secondaryConnection}\n          appName={appName}\n          appTwitter={appTwitter}\n          onComplete={(handle: string) => {\n            setHandle(handle)\n            withSleep(() => {\n              setShowIdentityModal(false)\n            }, 1000)\n          }}\n        />\n      </Modal>\n      {children}\n    </WalletIdentityContext.Provider>\n  )\n}\n\nexport const useWalletIdentity = (): WalletIdentity => {\n  const identity = useContext(WalletIdentityContext)\n  if (!identity) {\n    throw new Error('Not in WalletIdentity context')\n  }\n  return identity\n}\n"]}