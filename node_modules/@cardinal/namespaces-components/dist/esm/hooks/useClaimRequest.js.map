{"version":3,"file":"useClaimRequest.js","sourceRoot":"","sources":["../../../src/hooks/useClaimRequest.ts"],"names":[],"mappings":";AAEA,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AAEvD,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE1C,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,UAA6B,EAC7B,aAAqB,EACrB,SAA6B,EAC7B,MAA6B,EAC7B,EAAE;IACF,MAAM,CAAC,mBAAmB,EAAE,sBAAsB,CAAC,GAAG,QAAQ,CAE5D,SAAS,CAAC,CAAC;IACb,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAE9C,SAAS,CAAC,CAAC;IAEb,MAAM,mBAAmB,GAAG,GAAS,EAAE;QACrC,sBAAsB,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI;YACF,IAAI,CAAC,MAAM,IAAI,CAAC,SAAS,IAAI,CAAC,UAAU;gBAAE,OAAO;YACjD,MAAM,IAAI,GAAG,MAAM,eAAe,CAChC,UAAU,EACV,aAAa,EACb,SAAS,EACT,MAAM,CACP,CAAC;YACF,eAAe,CAAC,IAAI,CAAC,CAAC;SACvB;QAAC,OAAO,CAAC,EAAE;YACV,eAAe,CAAC,SAAS,CAAC,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,gCAAgC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;SACrD;gBAAS;YACR,sBAAsB,CAAC,KAAK,CAAC,CAAC;SAC/B;IACH,CAAC,CAAA,CAAC;IAEF,OAAO,CAAC,GAAS,EAAE;QACjB,mBAAmB,EAAE,CAAC;IACxB,CAAC,CAAA,EAAE,CAAC,UAAU,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;IAEnD,OAAO;QACL,YAAY;QACZ,mBAAmB;QACnB,mBAAmB;KACpB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { AccountData } from \"@cardinal/certificates\";\nimport type { ClaimRequestData} from \"@cardinal/namespaces\";\nimport { getClaimRequest } from \"@cardinal/namespaces\";\nimport type { Connection, PublicKey } from \"@solana/web3.js\";\nimport { useMemo, useState } from \"react\";\n\nexport const useClaimRequest = (\n  connection: Connection | null,\n  namespaceName: string,\n  entryName: string | undefined,\n  pubkey: PublicKey | undefined\n) => {\n  const [loadingClaimRequest, setLoadingClaimRequest] = useState<\n    boolean | undefined\n  >(undefined);\n  const [claimRequest, setClaimRequest] = useState<\n    AccountData<ClaimRequestData> | undefined\n  >(undefined);\n\n  const getClaimRequestData = async () => {\n    setLoadingClaimRequest(true);\n    try {\n      if (!pubkey || !entryName || !connection) return;\n      const data = await getClaimRequest(\n        connection,\n        namespaceName,\n        entryName,\n        pubkey\n      );\n      setClaimRequest(data);\n    } catch (e) {\n      setClaimRequest(undefined);\n      console.log(`Failed to get claim request: ${e}`, e);\n    } finally {\n      setLoadingClaimRequest(false);\n    }\n  };\n\n  useMemo(async () => {\n    getClaimRequestData();\n  }, [connection, namespaceName, entryName, pubkey]);\n\n  return {\n    claimRequest,\n    loadingClaimRequest,\n    getClaimRequestData,\n  };\n};\n"]}