{"version":3,"file":"useAddressImage.js","sourceRoot":"","sources":["../../../src/hooks/useAddressImage.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AAEjD,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE1C,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAElD,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,UAAsB,EACtB,OAA8B,EAC9B,GAAa,EACgD,EAAE;IAC/D,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAC9C,SAAS,CACV,CAAC;IACF,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAU,IAAI,CAAC,CAAC;IAChE,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,GAAG,cAAc,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IAEzE,MAAM,YAAY,GAAG,CAAO,WAA+B,EAAE,EAAE;QAC7D,IAAI;YACF,eAAe,CAAC,IAAI,CAAC,CAAC;YACtB,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YACvE,IAAI,MAAM,EAAE;gBACV,MAAM,QAAQ,GAAG,MAAM,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBACnD,eAAe,CAAC,QAAQ,CAAC,CAAC;aAC3B;iBAAM;gBACL,eAAe,CAAC,SAAS,CAAC,CAAC;aAC5B;SACF;gBAAS;YACR,eAAe,CAAC,KAAK,CAAC,CAAC;SACxB;IACH,CAAC,CAAA,CAAC;IAEF,OAAO,CAAC,GAAG,EAAE;QACX,KAAK,YAAY,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC;IAClB,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,YAAY,IAAI,WAAW,EAAE,CAAC;AACrE,CAAC,CAAC","sourcesContent":["import { breakName } from \"@cardinal/namespaces\";\nimport type { Connection,PublicKey } from \"@solana/web3.js\";\nimport { useMemo, useState } from \"react\";\n\nimport { tryGetImageUrl } from \"../utils/format\";\nimport { useAddressName } from \"./useAddressName\";\n\nexport const useAddressImage = (\n  connection: Connection,\n  address: PublicKey | undefined,\n  dev?: boolean\n): { addressImage: string | undefined; loadingImage: boolean } => {\n  const [addressImage, setAddressImage] = useState<string | undefined>(\n    undefined\n  );\n  const [loadingImage, setLoadingImage] = useState<boolean>(true);\n  const { displayName, loadingName } = useAddressName(connection, address);\n\n  const refreshImage = async (displayName: string | undefined) => {\n    try {\n      setLoadingImage(true);\n      const [_namespace, handle] = displayName ? breakName(displayName) : [];\n      if (handle) {\n        const imageUrl = await tryGetImageUrl(handle, dev);\n        setAddressImage(imageUrl);\n      } else {\n        setAddressImage(undefined);\n      }\n    } finally {\n      setLoadingImage(false);\n    }\n  };\n\n  useMemo(() => {\n    void refreshImage(displayName);\n  }, [displayName]);\n  return { addressImage, loadingImage: loadingImage || loadingName };\n};\n"]}