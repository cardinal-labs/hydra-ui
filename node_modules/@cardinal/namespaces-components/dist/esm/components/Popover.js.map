{"version":3,"file":"Popover.js","sourceRoot":"","sources":["../../../src/components/Popover.tsx"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,iBAAiB,CAAA;AACpC,OAAO,EAAE,OAAO,IAAI,eAAe,EAAE,MAAM,mBAAmB,CAAA;AAE9D,OAAc,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AACjD,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAExC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA4CvB,CAAA;AAUD,MAAM,CAAC,MAAM,OAAO,GAA2B,CAAC,EAC9C,OAAO,EACP,QAAQ,EACR,SAAS,GAAG,OAAO,EACnB,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAClB,EAAE,EAAE;;IACH,MAAM,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,GAC3C,QAAQ,CAAwB,IAAI,CAAC,CAAA;IACvC,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,QAAQ,CAChD,IAAI,CACL,CAAA;IACD,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,QAAQ,CAAwB,IAAI,CAAC,CAAA;IAC7E,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,SAAS,CAAC,gBAAgB,EAAE,aAAa,EAAE;QACxE,SAAS;QACT,SAAS,EAAE;YACT,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,EAAE;YACvC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE;SACtD;KACF,CAAC,CAAA;IAEF,OAAO,CACL,MAAC,eAAe,eAEd,KAAC,eAAe,CAAC,MAAM,kBAAC,EAAE,EAAE,QAAQ,EAAE,GAAG,EAAE,mBAAmB,gBAC3D,QAAQ,IACc,EACzB,MAAC,eAAe,CAAC,KAAK,kBACpB,GAAG,EAAE,gBAAgB,EACrB,KAAK,kCAAO,MAAM,CAAC,MAAM,KAAE,MAAM,EAAE,GAAG,OAClC,UAAU,CAAC,MAAM,eAEpB,OAAO,EACR,KAAC,KAAK,kBACJ,SAAS,EAAE,SACT,MAAA,MAAA,UAAU,CAAC,MAAM,0CAAG,uBAAuB,CAAC,mCAAI,EAClD,EAAE,EACF,GAAG,EAAE,eAAe,EACpB,KAAK,oBAAO,MAAM,CAAC,KAAK,KACpB,UAAU,CAAC,KAAK,EACpB,KACoB,IACR,CACnB,CAAA;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,EAC1B,SAAS,EACT,QAAQ,GAIT,EAAE,EAAE,CAAC,CACJ,4BACE,SAAS,EAAE,GAAG,SAAS,wDAAwD,gBAE9E,QAAQ,IACL,CACP,CAAA","sourcesContent":["import styled from '@emotion/styled'\nimport { Popover as HeadlessPopover } from '@headlessui/react'\nimport type { Placement } from '@popperjs/core'\nimport React, { Fragment, useState } from 'react'\nimport { usePopper } from 'react-popper'\n\nconst Arrow = styled.div`\n  ::before {\n    position: absolute;\n    width: 8px;\n    height: 8px;\n    z-index: -1;\n    content: '';\n    transform: rotate(45deg);\n  }\n  &.arrow-top {\n    bottom: -5px;\n    ::before {\n      border-top: none;\n      border-left: none;\n    }\n  }\n  &.arrow-bottom {\n    top: -5px;\n    ::before {\n      border-bottom: none;\n      border-right: none;\n    }\n  }\n  &.arrow-bottom-end {\n    top: -5px;\n    ::before {\n      border-bottom: none;\n      border-right: none;\n    }\n  }\n  &.arrow-left {\n    right: -5px;\n    ::before {\n      border-bottom: none;\n      border-left: none;\n    }\n  }\n  &.arrow-right {\n    left: -5px;\n    ::before {\n      border-right: none;\n      border-top: none;\n    }\n  }\n`\n\nexport interface PopoverProps {\n  content: React.ReactNode\n  guide?: boolean\n  children: React.ReactNode\n  placement?: Placement\n  offset?: [number, number]\n}\n\nexport const Popover: React.FC<PopoverProps> = ({\n  content,\n  children,\n  placement = 'right',\n  offset = [-25, 5],\n}) => {\n  const [referenceElement, setReferenceElement] =\n    useState<HTMLDivElement | null>(null)\n  const [popperElement, setPopperElement] = useState<HTMLDivElement | null>(\n    null\n  )\n  const [arrowElement, setArrowElement] = useState<HTMLDivElement | null>(null)\n  const { styles, attributes } = usePopper(referenceElement, popperElement, {\n    placement,\n    modifiers: [\n      { name: 'offset', options: { offset } },\n      { name: 'arrow', options: { element: arrowElement } },\n    ],\n  })\n\n  return (\n    <HeadlessPopover>\n      {/* @ts-ignore */}\n      <HeadlessPopover.Button as={Fragment} ref={setReferenceElement}>\n        {children}\n      </HeadlessPopover.Button>\n      <HeadlessPopover.Panel\n        ref={setPopperElement}\n        style={{ ...styles.popper, zIndex: 100 }}\n        {...attributes.popper}\n      >\n        {content}\n        <Arrow\n          className={`arrow-${\n            attributes.popper?.['data-popper-placement'] ?? ''\n          }`}\n          ref={setArrowElement}\n          style={{ ...styles.arrow }}\n          {...attributes.arrow}\n        />\n      </HeadlessPopover.Panel>\n    </HeadlessPopover>\n  )\n}\n\nexport const PopoverItem = ({\n  className,\n  children,\n}: {\n  className?: string\n  children: React.ReactNode\n}) => (\n  <div\n    className={`${className} rounded-md px-2 py-1 hover:bg-[rgba(255,255,255,0.1)]`}\n  >\n    {children}\n  </div>\n)\n"]}