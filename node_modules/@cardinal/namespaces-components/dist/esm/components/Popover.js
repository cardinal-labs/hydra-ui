import { jsx as _jsx, jsxs as _jsxs } from "@emotion/react/jsx-runtime";
import styled from '@emotion/styled';
import { Popover as HeadlessPopover } from '@headlessui/react';
import { Fragment, useState } from 'react';
import { usePopper } from 'react-popper';
const Arrow = styled.div `
  ::before {
    position: absolute;
    width: 8px;
    height: 8px;
    z-index: -1;
    content: '';
    transform: rotate(45deg);
  }
  &.arrow-top {
    bottom: -5px;
    ::before {
      border-top: none;
      border-left: none;
    }
  }
  &.arrow-bottom {
    top: -5px;
    ::before {
      border-bottom: none;
      border-right: none;
    }
  }
  &.arrow-bottom-end {
    top: -5px;
    ::before {
      border-bottom: none;
      border-right: none;
    }
  }
  &.arrow-left {
    right: -5px;
    ::before {
      border-bottom: none;
      border-left: none;
    }
  }
  &.arrow-right {
    left: -5px;
    ::before {
      border-right: none;
      border-top: none;
    }
  }
`;
export const Popover = ({ content, children, placement = 'right', offset = [-25, 5], }) => {
    var _a, _b;
    const [referenceElement, setReferenceElement] = useState(null);
    const [popperElement, setPopperElement] = useState(null);
    const [arrowElement, setArrowElement] = useState(null);
    const { styles, attributes } = usePopper(referenceElement, popperElement, {
        placement,
        modifiers: [
            { name: 'offset', options: { offset } },
            { name: 'arrow', options: { element: arrowElement } },
        ],
    });
    return (_jsxs(HeadlessPopover, { children: [_jsx(HeadlessPopover.Button, Object.assign({ as: Fragment, ref: setReferenceElement }, { children: children })), _jsxs(HeadlessPopover.Panel, Object.assign({ ref: setPopperElement, style: Object.assign(Object.assign({}, styles.popper), { zIndex: 100 }) }, attributes.popper, { children: [content, _jsx(Arrow, Object.assign({ className: `arrow-${(_b = (_a = attributes.popper) === null || _a === void 0 ? void 0 : _a['data-popper-placement']) !== null && _b !== void 0 ? _b : ''}`, ref: setArrowElement, style: Object.assign({}, styles.arrow) }, attributes.arrow))] }))] }));
};
export const PopoverItem = ({ className, children, }) => (_jsx("div", Object.assign({ className: `${className} rounded-md px-2 py-1 hover:bg-[rgba(255,255,255,0.1)]` }, { children: children })));
//# sourceMappingURL=Popover.js.map