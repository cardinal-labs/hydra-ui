{"version":3,"file":"misc.js","sourceRoot":"","sources":["../../../src/utils/misc.ts"],"names":[],"mappings":"AAAA,MAAM,IAAI,GAAG,GAAG,EAAE;IAChB,OAAO;AACT,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,KAAK,EAC5C,EAAoB,EACR,EAAE;IACd,MAAM,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC;IACtC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;IACrB,IAAI;QACF,MAAM,MAAM,GAAG,MAAM,EAAE,EAAE,CAAC;QAC1B,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAI,EAAW,EAAK,EAAE;IACxD,MAAM,eAAe,GAAG,OAAO,CAAC,KAAK,CAAC;IACtC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;IACrB,IAAI;QACF,MAAM,MAAM,GAAG,EAAE,EAAE,CAAC;QACpB,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,OAAO,MAAM,CAAC;KACf;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,CAAC,KAAK,GAAG,eAAe,CAAC;QAChC,MAAM,CAAC,CAAC;KACT;AACH,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,CAAS,KAAoB,EAAmB,EAAE;IACzE,OAAO,KAAK,KAAK,IAAI,CAAC;AACxB,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,KAAyB,EACR,EAAE;IACnB,OAAO,KAAK,KAAK,SAAS,CAAC;AAC7B,CAAC,CAAC;AAEF;;;;;GAKG;AACH,MAAM,CAAC,MAAM,MAAM,GAAG,CACpB,KAAgC,EACf,EAAE;IACnB,OAAO,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;AAC/C,CAAC,CAAC;AAEF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,CACrB,GAAsC,EACtC,EAA8B,EACR,EAAE,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAEzD;;GAEG;AACH,MAAM,CAAC,MAAM,IAAI,GAAG,CAClB,EAIM,EACN,GAAG,IAAO,EACY,EAAE;IACxB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,SAAS,CAAC,EAAE;QAC3C,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,IAAI,CAAC,EAAE;QACtC,OAAO,IAAI,CAAC;KACb;IACD,OAAO,EAAE,CACP,GAAI,IAEF,CACH,CAAC;AACJ,CAAC,CAAC","sourcesContent":["const noop = () => {\n  // noop\n};\n\n/**\n * Hide the console.error because @solana/web3.js often emits noisy errors as a\n * side effect.\n */\nexport const suppressConsoleErrorAsync = async <T>(\n  fn: () => Promise<T>\n): Promise<T> => {\n  const oldConsoleError = console.error;\n  console.error = noop;\n  try {\n    const result = await fn();\n    console.error = oldConsoleError;\n    return result;\n  } catch (e) {\n    console.error = oldConsoleError;\n    throw e;\n  }\n};\n\n/**\n * Hide the console.error because @solana/web3.js often emits noisy errors as a\n * side effect.\n */\nexport const suppressConsoleError = <T>(fn: () => T): T => {\n  const oldConsoleError = console.error;\n  console.error = noop;\n  try {\n    const result = fn();\n    console.error = oldConsoleError;\n    return result;\n  } catch (e) {\n    console.error = oldConsoleError;\n    throw e;\n  }\n};\n\n/**\n * Checks to see if the provided value is not null.\n *\n * Useful for preserving types in filtering out non-null values.\n *\n * @param value\n * @returns\n */\nexport const isNotNull = <TValue>(value: TValue | null): value is TValue => {\n  return value !== null;\n};\n\n/**\n * Checks to see if the provided value is not undefined.\n *\n * @param value\n * @returns\n */\nexport const isNotUndefined = <TValue>(\n  value: TValue | undefined\n): value is TValue => {\n  return value !== undefined;\n};\n\n/**\n * Checks to see if the provided value is not null or undefined.\n *\n * @param value\n * @returns\n */\nexport const exists = <TValue>(\n  value: TValue | null | undefined\n): value is TValue => {\n  return value !== null && value !== undefined;\n};\n\n/**\n * Applies a function to a null/undefined inner value if it is null or undefined,\n * otherwise returns null/undefined.\n *\n * @param obj\n * @param fn\n * @returns\n */\nexport const mapSome = <T, U>(\n  obj: NonNullable<T> | null | undefined,\n  fn: (obj: NonNullable<T>) => U\n): U | null | undefined => (exists(obj) ? fn(obj) : obj);\n\n/**\n * Applies a function to a list of null/undefined values, unwrapping the null/undefined value or passing it through.\n */\nexport const mapN = <T extends unknown[], U>(\n  fn: (\n    ...a: {\n      [K in keyof T]: NonNullable<T[K]>;\n    }\n  ) => U,\n  ...args: T\n): U | null | undefined => {\n  if (!args.every((arg) => arg !== undefined)) {\n    return undefined;\n  }\n  if (!args.every((arg) => arg !== null)) {\n    return null;\n  }\n  return fn(\n    ...(args as {\n      [K in keyof T]: NonNullable<T[K]>;\n    })\n  );\n};\n"]}