"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapN = exports.mapSome = exports.exists = exports.isNotUndefined = exports.isNotNull = exports.suppressConsoleError = exports.suppressConsoleErrorAsync = void 0;
const noop = () => {
    // noop
};
/**
 * Hide the console.error because @solana/web3.js often emits noisy errors as a
 * side effect.
 */
const suppressConsoleErrorAsync = async (fn) => {
    const oldConsoleError = console.error;
    console.error = noop;
    try {
        const result = await fn();
        console.error = oldConsoleError;
        return result;
    }
    catch (e) {
        console.error = oldConsoleError;
        throw e;
    }
};
exports.suppressConsoleErrorAsync = suppressConsoleErrorAsync;
/**
 * Hide the console.error because @solana/web3.js often emits noisy errors as a
 * side effect.
 */
const suppressConsoleError = (fn) => {
    const oldConsoleError = console.error;
    console.error = noop;
    try {
        const result = fn();
        console.error = oldConsoleError;
        return result;
    }
    catch (e) {
        console.error = oldConsoleError;
        throw e;
    }
};
exports.suppressConsoleError = suppressConsoleError;
/**
 * Checks to see if the provided value is not null.
 *
 * Useful for preserving types in filtering out non-null values.
 *
 * @param value
 * @returns
 */
const isNotNull = (value) => {
    return value !== null;
};
exports.isNotNull = isNotNull;
/**
 * Checks to see if the provided value is not undefined.
 *
 * @param value
 * @returns
 */
const isNotUndefined = (value) => {
    return value !== undefined;
};
exports.isNotUndefined = isNotUndefined;
/**
 * Checks to see if the provided value is not null or undefined.
 *
 * @param value
 * @returns
 */
const exists = (value) => {
    return value !== null && value !== undefined;
};
exports.exists = exists;
/**
 * Applies a function to a null/undefined inner value if it is null or undefined,
 * otherwise returns null/undefined.
 *
 * @param obj
 * @param fn
 * @returns
 */
const mapSome = (obj, fn) => ((0, exports.exists)(obj) ? fn(obj) : obj);
exports.mapSome = mapSome;
/**
 * Applies a function to a list of null/undefined values, unwrapping the null/undefined value or passing it through.
 */
const mapN = (fn, ...args) => {
    if (!args.every((arg) => arg !== undefined)) {
        return undefined;
    }
    if (!args.every((arg) => arg !== null)) {
        return null;
    }
    return fn(...args);
};
exports.mapN = mapN;
//# sourceMappingURL=misc.js.map