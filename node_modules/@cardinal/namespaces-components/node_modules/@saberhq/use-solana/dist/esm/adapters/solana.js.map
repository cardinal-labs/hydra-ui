{"version":3,"file":"solana.js","sourceRoot":"","sources":["../../../src/adapters/solana.tsx"],"names":[],"mappings":"AASA,MAAM,OAAO,mBAAmB;IAC9B,YACW,OAI0B;QAJ1B,YAAO,GAAP,OAAO,CAImB;QA6BrC,YAAO,GAAG,KAAK,IAAmB,EAAE;YAClC,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QAC/B,CAAC,CAAC;IA9BC,CAAC;IAEJ,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;IAChC,CAAC;IAED,IAAI,WAAW;QACb,OAAO,KAAK,CAAC;IACf,CAAC;IAED,KAAK,CAAC,mBAAmB,CACvB,YAA2B;QAE3B,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IACxD,CAAC;IAED,IAAI,SAAS;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;IAChC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,WAAwB;QAC5C,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACjB,OAAO,WAAW,CAAC;SACpB;QAED,OAAO,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC;IAMD,KAAK,CAAC,UAAU;QACd,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;IAClC,CAAC;IAED,EAAE,CAAC,KAA+B,EAAE,EAAc;QAChD,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC7B,CAAC;CACF","sourcesContent":["import type {\n  EventEmitter,\n  SignerWalletAdapter,\n  WalletAdapterEvents,\n} from \"@solana/wallet-adapter-base\";\nimport type { PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport type { WalletAdapter } from \"./types\";\n\nexport class SolanaWalletAdapter implements WalletAdapter {\n  constructor(\n    readonly adapter: Omit<\n      SignerWalletAdapter,\n      \"sendTransaction\" | keyof EventEmitter\n    > &\n      EventEmitter<WalletAdapterEvents>\n  ) {}\n\n  get connected(): boolean {\n    return this.adapter.connected;\n  }\n\n  get autoApprove(): boolean {\n    return false;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    return this.adapter.signAllTransactions(transactions);\n  }\n\n  get publicKey(): PublicKey | null {\n    return this.adapter.publicKey;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    if (!this.adapter) {\n      return transaction;\n    }\n\n    return this.adapter.signTransaction(transaction);\n  }\n\n  connect = async (): Promise<void> => {\n    await this.adapter.connect();\n  };\n\n  async disconnect(): Promise<void> {\n    await this.adapter.disconnect();\n  }\n\n  on(event: \"connect\" | \"disconnect\", fn: () => void): void {\n    this.adapter.on(event, fn);\n  }\n}\n"]}