{"version":3,"file":"useProviderInternal.js","sourceRoot":"","sources":["../../../src/utils/useProviderInternal.ts"],"names":[],"mappings":";;;AAIA,4DAKiC;AAEjC,iCAAgC;AAyCzB,MAAM,mBAAmB,GAAG,CAAC,EAClC,UAAU,EACV,cAAc,GAAG,UAAU,EAC3B,MAAM,EACN,UAAU,GAAG,WAAW,EACxB,cAAc,GAAG,yCAAwB,GACzB,EAAe,EAAE;IACjC,MAAM,QAAQ,GAAG,IAAA,eAAO,EACtB,GAAG,EAAE,CACH,IAAI,uCAAsB,CAAC,UAAU,EAAE;QACrC,UAAU;KACX,CAAC,EACJ,CAAC,UAAU,EAAE,UAAU,CAAC,CACzB,CAAC;IAEF,MAAM,SAAS,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAC;IACpC,MAAM,SAAS,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,SAAS,CAAC;IACpC,MAAM,WAAW,GAAG,IAAA,eAAO,EACzB,GAAG,EAAE,CACH,MAAM,IAAI,SAAS,IAAI,SAAS;QAC9B,CAAC,CAAC,IAAI,wCAAuB,CACzB,+BAAc,CAAC,IAAI,CAAC;YAClB,UAAU;YACV,cAAc;YACd,MAAM,EAAE,MAAyB;YACjC,IAAI,EAAE,cAAc;SACrB,CAAC,CACH;QACH,CAAC,CAAC,IAAI,EACV,CAAC,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,EAAE,cAAc,EAAE,cAAc,CAAC,CAC3E,CAAC;IAEF,OAAO;QACL,QAAQ;QACR,WAAW;KACZ,CAAC;AACJ,CAAC,CAAC;AApCW,QAAA,mBAAmB,uBAoC9B","sourcesContent":["import type {\n  AugmentedProvider,\n  ReadonlyProvider,\n} from \"@saberhq/solana-contrib\";\nimport {\n  DEFAULT_PROVIDER_OPTIONS,\n  SolanaAugmentedProvider,\n  SolanaProvider,\n  SolanaReadonlyProvider,\n} from \"@saberhq/solana-contrib\";\nimport type { Commitment, ConfirmOptions, Connection } from \"@solana/web3.js\";\nimport { useMemo } from \"react\";\n\nimport type { ConnectedWallet, WalletAdapter } from \"../adapters/types\";\n\n/**\n * Wallet-related information.\n */\nexport interface UseProvider {\n  /**\n   * Read-only provider.\n   */\n  provider: ReadonlyProvider;\n  /**\n   * {@link Provider} of the currently connected wallet.\n   */\n  providerMut: AugmentedProvider | null;\n}\n\nexport interface UseProviderArgs {\n  /**\n   * Connection.\n   */\n  connection: Connection;\n  /**\n   * Send connection.\n   */\n  sendConnection?: Connection;\n  /**\n   * Wallet.\n   */\n  wallet?: WalletAdapter<boolean>;\n  /**\n   * Commitment for the read-only provider.\n   */\n  commitment?: Commitment;\n  /**\n   * Confirm options for the mutable provider.\n   */\n  confirmOptions?: ConfirmOptions;\n}\n\nexport const useProviderInternal = ({\n  connection,\n  sendConnection = connection,\n  wallet,\n  commitment = \"confirmed\",\n  confirmOptions = DEFAULT_PROVIDER_OPTIONS,\n}: UseProviderArgs): UseProvider => {\n  const provider = useMemo(\n    () =>\n      new SolanaReadonlyProvider(connection, {\n        commitment,\n      }),\n    [commitment, connection]\n  );\n\n  const connected = wallet?.connected;\n  const publicKey = wallet?.publicKey;\n  const providerMut = useMemo(\n    () =>\n      wallet && connected && publicKey\n        ? new SolanaAugmentedProvider(\n            SolanaProvider.load({\n              connection,\n              sendConnection,\n              wallet: wallet as ConnectedWallet,\n              opts: confirmOptions,\n            })\n          )\n        : null,\n    [wallet, connected, publicKey, connection, sendConnection, confirmOptions]\n  );\n\n  return {\n    provider,\n    providerMut,\n  };\n};\n"]}