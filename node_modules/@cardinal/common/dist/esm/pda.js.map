{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../src/pda.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,SAAS,CAC9C,6CAA6C,CAC9C,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,IAAI,SAAS,CAC9C,6CAA6C,CAC9C,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,MAAiB,EAAa,EAAE;IACjE,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACnC,mBAAmB,CAAC,QAAQ,EAAE;QAC9B,MAAM,CAAC,QAAQ,EAAE;KAClB,EACD,mBAAmB,CACpB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,MAAiB,EAAa,EAAE;IAChE,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;QACnC,mBAAmB,CAAC,QAAQ,EAAE;QAC9B,MAAM,CAAC,QAAQ,EAAE;QACjB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;KACnC,EACD,mBAAmB,CACpB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,MAAM,UAAU,iBAAiB,CAC/B,IAAe,EACf,KAAgB;IAEhB,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;QACvB,mBAAmB,CAAC,QAAQ,EAAE;QAC9B,IAAI,CAAC,QAAQ,EAAE;QACf,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC;QAC3B,KAAK,CAAC,QAAQ,EAAE;KACjB,EACD,mBAAmB,CACpB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,SAAoB,EAAE,IAAY,EAAE,EAAE;IAClE,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAClE,mBAAmB,CACpB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { utils } from \"@coral-xyz/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nexport const METADATA_PROGRAM_ID = new PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport const TOKEN_AUTH_RULES_ID = new PublicKey(\n  \"auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg\"\n);\n\nexport const findMintMetadataId = (mintId: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(\"metadata\"),\n      METADATA_PROGRAM_ID.toBuffer(),\n      mintId.toBuffer(),\n    ],\n    METADATA_PROGRAM_ID\n  )[0];\n};\n\nexport const findMintEditionId = (mintId: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(\"metadata\"),\n      METADATA_PROGRAM_ID.toBuffer(),\n      mintId.toBuffer(),\n      utils.bytes.utf8.encode(\"edition\"),\n    ],\n    METADATA_PROGRAM_ID\n  )[0];\n};\n\nexport function findTokenRecordId(\n  mint: PublicKey,\n  token: PublicKey\n): PublicKey {\n  return PublicKey.findProgramAddressSync(\n    [\n      Buffer.from(\"metadata\"),\n      METADATA_PROGRAM_ID.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from(\"token_record\"),\n      token.toBuffer(),\n    ],\n    METADATA_PROGRAM_ID\n  )[0];\n}\n\nexport const findRuleSetId = (authority: PublicKey, name: string) => {\n  return PublicKey.findProgramAddressSync(\n    [Buffer.from(\"rule_set\"), authority.toBuffer(), Buffer.from(name)],\n    TOKEN_AUTH_RULES_ID\n  )[0];\n};\n"]}