{"version":3,"file":"transactions.js","sourceRoot":"","sources":["../../src/transactions.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport * as splToken from \"@solana/spl-token\";\nimport type {\n  AddressLookupTableAccount,\n  ConfirmOptions,\n  Connection,\n  PublicKey,\n  SendTransactionError,\n  Signer,\n  Transaction,\n} from \"@solana/web3.js\";\nimport {\n  sendAndConfirmRawTransaction,\n  TransactionMessage,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\n\nimport { chunkArray } from \"./utils\";\n\n/**\n * Utility function for adding a find or init associated token account instruction to a transaction\n * Useful when using associated token accounts so you can be sure they are created before hand\n * @param transaction\n * @param connection\n * @param mint\n * @param owner\n * @param payer\n * @param allowOwnerOffCurve\n * @returns The associated token account ID that was found or will be created. This also adds the relevent instruction to create it to the transaction if not found\n */\nexport async function withFindOrInitAssociatedTokenAccount(\n  transaction: Transaction,\n  connection: Connection,\n  mint: PublicKey,\n  owner: PublicKey,\n  payer: PublicKey,\n  allowOwnerOffCurve?: boolean\n): Promise<PublicKey> {\n  const associatedAddress = await splToken.getAssociatedTokenAddress(\n    mint,\n    owner,\n    allowOwnerOffCurve\n  );\n  const account = await connection.getAccountInfo(associatedAddress);\n  if (!account) {\n    transaction.add(\n      splToken.createAssociatedTokenAccountInstruction(\n        payer,\n        associatedAddress,\n        owner,\n        mint\n      )\n    );\n  }\n  return associatedAddress;\n}\n\nexport async function executeTransaction(\n  connection: Connection,\n  tx: Transaction,\n  wallet: Wallet,\n  config?: {\n    lookupTableIds?: PublicKey[];\n    signers?: Signer[];\n    silent?: boolean;\n    confirmOptions?: ConfirmOptions;\n  }\n): Promise<string> {\n  const blockhash = (await connection.getLatestBlockhash()).blockhash;\n  const lookupTableAccounts = config?.lookupTableIds\n    ? (\n        await Promise.all(\n          config?.lookupTableIds?.map((lookupTableId) =>\n            connection.getAddressLookupTable(lookupTableId)\n          ) ?? []\n        )\n      )\n        .map((lut) => lut.value)\n        .filter((x): x is AddressLookupTableAccount => x !== null)\n    : [];\n\n  const messageV0 = new TransactionMessage({\n    payerKey: wallet.publicKey,\n    recentBlockhash: blockhash,\n    instructions: tx.instructions,\n  }).compileToV0Message(lookupTableAccounts);\n  let transactionV0 = new VersionedTransaction(messageV0);\n  transactionV0 = await wallet.signTransaction(transactionV0);\n  if (config?.signers) {\n    transactionV0.sign(config?.signers ?? []);\n  }\n  try {\n    const txid = await sendAndConfirmRawTransaction(\n      connection,\n      Buffer.from(transactionV0.serialize()),\n      config?.confirmOptions\n    );\n    return txid;\n  } catch (e) {\n    if (!config?.silent) {\n      logError(e);\n    }\n    throw e;\n  }\n}\n\nexport async function executeTransactions<T = null>(\n  connection: Connection,\n  txs: Transaction[],\n  wallet: Wallet,\n  config?: {\n    signers?: Signer[];\n    batchSize?: number;\n    errorHandler?: (e: unknown) => T;\n    confirmOptions?: ConfirmOptions;\n  }\n): Promise<(string | null | T)[]> {\n  const latestBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  const signedTxs = await wallet.signAllTransactions(\n    txs.map((tx) => {\n      tx.recentBlockhash = latestBlockhash;\n      tx.feePayer = wallet.publicKey;\n      if (config?.signers) {\n        tx.partialSign(...(config?.signers ?? []));\n      }\n      return tx;\n    })\n  );\n  const batchedTxs = chunkArray(\n    signedTxs,\n    config?.batchSize ?? signedTxs.length\n  );\n\n  const txids: (string | T | null)[] = [];\n  for (let i = 0; i < batchedTxs.length; i++) {\n    const batch = batchedTxs[i];\n    if (batch) {\n      const batchTxids = await Promise.all(\n        batch.map(async (tx) => {\n          try {\n            const txid = await sendAndConfirmRawTransaction(\n              connection,\n              tx.serialize(),\n              config?.confirmOptions\n            );\n            return txid;\n          } catch (e) {\n            if (config?.errorHandler) {\n              return config?.errorHandler(e);\n            }\n            logError(e);\n            return null;\n          }\n        })\n      );\n      txids.push(...batchTxids);\n    }\n  }\n  return txids;\n}\n\nexport async function executeTransactionSequence<T = void>(\n  connection: Connection,\n  txs: { tx: Transaction; signers?: Signer[] }[][],\n  wallet: Wallet,\n  config?: {\n    batchSize?: number;\n    errorHandler?: (\n      e: unknown,\n      ix: { count: number; sequence: number; sequenceCount: number }\n    ) => T;\n    successHandler?: (ix: {\n      count: number;\n      sequence: number;\n      sequenceCount: number;\n    }) => T;\n    confirmOptions?: ConfirmOptions;\n  }\n): Promise<(string | null | T)[][]> {\n  const latestBlockhash = (await connection.getLatestBlockhash()).blockhash;\n  const signedTxs = await wallet.signAllTransactions(\n    txs.flat().map(({ tx, signers }) => {\n      tx.recentBlockhash = latestBlockhash;\n      tx.feePayer = wallet.publicKey;\n      if (signers) {\n        tx.partialSign(...signers);\n      }\n      return tx;\n    })\n  );\n\n  const txids: (string | T | null)[][] = [[]];\n  let count = 0;\n  for (let i = 0; i < txs.length; i++) {\n    const txChunk = txs[i];\n    if (!txChunk) continue;\n    const signedTxBatch = signedTxs.slice(count, count + txChunk.length);\n    count += txChunk.length;\n    const batchedTxs = chunkArray(\n      signedTxBatch,\n      config?.batchSize ?? signedTxBatch.length\n    );\n    const allBatchTxids: (string | T | null)[] = [];\n    for (let j = 0; j < batchedTxs.length; j++) {\n      const batch = batchedTxs[j];\n      if (batch) {\n        const batchTxids = await Promise.all(\n          batch.map(async (tx, k) => {\n            try {\n              const txid = await sendAndConfirmRawTransaction(\n                connection,\n                tx.serialize(),\n                config?.confirmOptions\n              );\n              if (config?.successHandler) {\n                config?.successHandler({\n                  count: count + (j + 1) * k,\n                  sequence: i,\n                  sequenceCount: (j + 1) * k,\n                });\n              }\n              return txid;\n            } catch (e) {\n              if (config?.errorHandler) {\n                return config?.errorHandler(e, {\n                  count: count + (j + 1) * k,\n                  sequence: i,\n                  sequenceCount: (j + 1) * k,\n                });\n              }\n              logError(e);\n              return null;\n            }\n          })\n        );\n        allBatchTxids.push(...batchTxids);\n      }\n    }\n    txids.push(allBatchTxids);\n  }\n  return txids;\n}\n\nexport const logError = (e: unknown) => {\n  const message = (e as SendTransactionError).message ?? \"\";\n  const logs = (e as SendTransactionError).logs;\n  if (logs) {\n    console.log(logs, message);\n  } else {\n    console.log(e, message);\n  }\n};\n"]}