"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryGetReverseEntry = exports.getReverseEntry = exports.getPendingClaimRequests = exports.getClaimRequest = exports.getNameEntries = exports.getNameEntry = exports.getNamespaces = exports.getNamespace = void 0;
const anchor = __importStar(require("@project-serum/anchor"));
const web3 = __importStar(require("@solana/web3.js"));
const utils_1 = require("./utils");
async function getNamespace(connection, namespaceName) {
    const provider = new anchor.Provider(connection, null, {});
    const namespacesProgram = new anchor.Program(utils_1.NAMESPACES_IDL, utils_1.NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(utils_1.NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const parsed = await namespacesProgram.account.namespace.fetch(namespaceId);
    return {
        parsed,
        pubkey: namespaceId,
    };
}
exports.getNamespace = getNamespace;
async function getNamespaces(connection) {
    const coder = new anchor.Coder(utils_1.NAMESPACES_IDL);
    const programAccounts = await connection.getProgramAccounts(utils_1.NAMESPACES_PROGRAM_ID);
    const namespaces = [];
    programAccounts.forEach((account) => {
        try {
            const namespace = coder.accounts.decode("namespace", account.account.data);
            namespaces.push({
                ...account,
                parsed: namespace,
            });
        }
        catch (e) {
            console.log(`Failed to decode namespace ${e}`);
        }
    });
    return namespaces;
}
exports.getNamespaces = getNamespaces;
async function getNameEntry(connection, namespaceName, entryName) {
    const provider = new anchor.Provider(connection, null, {});
    const namespacesProgram = new anchor.Program(utils_1.NAMESPACES_IDL, utils_1.NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(utils_1.NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [entryId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(utils_1.ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], namespacesProgram.programId);
    const parsed = await namespacesProgram.account.entry.fetch(entryId);
    return {
        parsed,
        pubkey: entryId,
    };
}
exports.getNameEntry = getNameEntry;
async function getNameEntries(connection, namespaceName, entryNames) {
    const provider = new anchor.Provider(connection, null, {});
    const namespacesProgram = new anchor.Program(utils_1.NAMESPACES_IDL, utils_1.NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(utils_1.NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const entryTuples = await Promise.all(entryNames.map((entryName) => web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(utils_1.ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], namespacesProgram.programId)));
    const entryIds = entryTuples.map((tuple) => tuple[0]);
    const result = await namespacesProgram.account.entry.fetchMultiple(entryIds);
    return result.map((parsed, i) => ({
        parsed,
        pubkey: entryIds[i],
        name: entryNames[i],
    }));
}
exports.getNameEntries = getNameEntries;
async function getClaimRequest(connection, namespaceName, entryName, requestor) {
    const provider = new anchor.Provider(connection, null, {});
    const namespacesProgram = new anchor.Program(utils_1.NAMESPACES_IDL, utils_1.NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(utils_1.NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [claimRequestId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(utils_1.CLAIM_REQUEST_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
        requestor.toBytes(),
    ], namespacesProgram.programId);
    const parsed = await namespacesProgram.account.claimRequest.fetch(claimRequestId);
    return {
        parsed,
        pubkey: claimRequestId,
    };
}
exports.getClaimRequest = getClaimRequest;
async function getPendingClaimRequests(connection) {
    const coder = new anchor.Coder(utils_1.NAMESPACES_IDL);
    const programAccounts = await connection.getProgramAccounts(utils_1.NAMESPACES_PROGRAM_ID);
    const pendingClaimRequests = [];
    programAccounts.forEach((account) => {
        try {
            const claimRequest = coder.accounts.decode("claimRequest", account.account.data);
            if (!claimRequest.isApproved) {
                pendingClaimRequests.push({
                    ...account,
                    parsed: claimRequest,
                });
            }
        }
        catch (e) {
            console.log(`Failed to decode claim request ${e}`);
        }
    });
    return pendingClaimRequests;
}
exports.getPendingClaimRequests = getPendingClaimRequests;
async function getReverseEntry(connection, pubkey) {
    const provider = new anchor.Provider(connection, null, {});
    const namespacesProgram = new anchor.Program(utils_1.NAMESPACES_IDL, utils_1.NAMESPACES_PROGRAM_ID, provider);
    const [reverseEntryId] = await web3.PublicKey.findProgramAddress([anchor.utils.bytes.utf8.encode(utils_1.REVERSE_ENTRY_SEED), pubkey.toBytes()], namespacesProgram.programId);
    const parsed = await namespacesProgram.account.reverseEntry.fetch(reverseEntryId);
    return {
        parsed,
        pubkey: reverseEntryId,
    };
}
exports.getReverseEntry = getReverseEntry;
async function tryGetReverseEntry(connection, pubkey) {
    try {
        return await getReverseEntry(connection, pubkey);
    }
    catch (e) {
        console.log(`Failed to get reverse entry ${e}`);
        return null;
    }
}
exports.tryGetReverseEntry = tryGetReverseEntry;
//# sourceMappingURL=accounts.js.map