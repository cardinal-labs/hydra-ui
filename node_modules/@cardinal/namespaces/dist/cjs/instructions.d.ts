/// <reference types="bn.js" />
import * as anchor from "@project-serum/anchor";
import * as web3 from "@solana/web3.js";
import { Wallet } from "@saberhq/solana-contrib";
export declare function withInit(connection: web3.Connection, wallet: Wallet, rentalPercentage: number, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withCreateNamespace(connection: web3.Connection, wallet: Wallet, name: string, updateAuthority: web3.PublicKey, rentAuthority: web3.PublicKey, approveAuthority: web3.PublicKey | null, schema: number, paymentAmountDaily: anchor.BN, paymentMint: web3.PublicKey, minRentalSeconds: anchor.BN, maxRentalSeconds: anchor.BN | null, transferableEntries: boolean, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withUpdateNamespace(connection: web3.Connection, wallet: Wallet, name: string, updateAuthority: web3.PublicKey, rentAuthority: web3.PublicKey, approveAuthority: web3.PublicKey | null, paymentAmountDaily: anchor.BN, paymentMint: web3.PublicKey, minRentalSeconds: anchor.BN, maxRentalSeconds: anchor.BN | null, transferableEntries: boolean, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withInitEntry(connection: web3.Connection, wallet: Wallet, certificateMintId: web3.PublicKey, namespaceName: string, entryName: string, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withCreateClaimRequest(connection: web3.Connection, wallet: Wallet, namespaceName: string, entryName: string, user: web3.PublicKey, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withUpdateClaimRequest(connection: web3.Connection, wallet: Wallet, namespaceName: string, claimRequestId: web3.PublicKey, isApproved: boolean, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withClaimEntry(connection: web3.Connection, wallet: Wallet, namespaceName: string, entryName: string, certificateMintId: web3.PublicKey, duration: number, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withSetEntryData(connection: web3.Connection, wallet: Wallet, namespaceName: string, entryName: string, entryData: web3.PublicKey, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withSetReverseEntry(connection: web3.Connection, wallet: Wallet, namespaceName: string, entryName: string, certificateMintId: web3.PublicKey, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withRevokeReverseEntry(connection: web3.Connection, wallet: Wallet, namespaceName: string, entryName: string, reverseEntryId: web3.PublicKey, claimRequestId: web3.PublicKey, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withRevokeEntry(connection: web3.Connection, wallet: Wallet, namespaceName: string, entryName: string, certificateMintId: web3.PublicKey, certificateOwnerId: web3.PublicKey, claimRequestId: web3.PublicKey, transaction: web3.Transaction): Promise<web3.Transaction>;
export declare function withUpdateMintMetadata(connection: web3.Connection, wallet: Wallet, namespaceId: web3.PublicKey, entryId: web3.PublicKey, certificateMintId: web3.PublicKey, transaction: web3.Transaction): Promise<web3.Transaction>;
//# sourceMappingURL=instructions.d.ts.map