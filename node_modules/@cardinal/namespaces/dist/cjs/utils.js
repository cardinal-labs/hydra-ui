"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reverseEntryId = exports.nameEntryId = exports.claimRequestId = exports.nameForDisplay = exports.tryGetName = exports.displayAddress = exports.shortenAddress = exports.breakName = exports.formatName = exports.CLAIM_REQUEST_SEED = exports.REVERSE_ENTRY_SEED = exports.ENTRY_SEED = exports.NAMESPACE_SEED = exports.GLOBAL_CONTEXT_SEED = exports.GLOBAL_RENTAL_PERCENTAGE = exports.NAMESPACES_IDL = exports.NAMESPACES_PROGRAM_ID = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const anchor = __importStar(require("@project-serum/anchor"));
const idl_1 = require("./types/idl");
const accounts_1 = require("./accounts");
exports.NAMESPACES_PROGRAM_ID = new web3.PublicKey("nameXpT2PwZ2iA6DTNYTotTmiMYusBCYqwBLN2QgF4w");
exports.NAMESPACES_IDL = idl_1.IDL;
exports.GLOBAL_RENTAL_PERCENTAGE = 0.2;
exports.GLOBAL_CONTEXT_SEED = "context";
exports.NAMESPACE_SEED = "namespace";
exports.ENTRY_SEED = "entry";
exports.REVERSE_ENTRY_SEED = "reverse-entry";
exports.CLAIM_REQUEST_SEED = "rent-request";
function formatName(namespace, name) {
    return namespace === "twitter" ? `@${name}` : `${name}.${namespace}`;
}
exports.formatName = formatName;
function breakName(fullName) {
    if (fullName.startsWith("@")) {
        return ["twitter", fullName.split("@")[1]];
    }
    const [entryName, namespace] = fullName.split(".");
    return [namespace, entryName];
}
exports.breakName = breakName;
/**
 * shorten the checksummed version of the input address to have 4 characters at start and end
 * @param address
 * @param chars
 * @returns
 */
function shortenAddress(address, chars = 5) {
    return `${address.substring(0, chars)}...${address.substring(address.length - chars)}`;
}
exports.shortenAddress = shortenAddress;
function displayAddress(address, shorten = true) {
    return shorten ? shortenAddress(address) : address;
}
exports.displayAddress = displayAddress;
async function tryGetName(connection, pubkey) {
    try {
        const reverseEntry = await (0, accounts_1.getReverseEntry)(connection, pubkey);
        return formatName(reverseEntry.parsed.namespaceName, reverseEntry.parsed.entryName);
    }
    catch (e) { }
    return undefined;
}
exports.tryGetName = tryGetName;
async function nameForDisplay(connection, pubkey) {
    const name = tryGetName(connection, pubkey);
    return name || displayAddress(pubkey.toString());
}
exports.nameForDisplay = nameForDisplay;
async function claimRequestId(namespaceName, entryName, user) {
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(exports.NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], exports.NAMESPACES_PROGRAM_ID);
    return web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(exports.CLAIM_REQUEST_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
        user.toBytes(),
    ], exports.NAMESPACES_PROGRAM_ID);
}
exports.claimRequestId = claimRequestId;
async function nameEntryId(namespaceName, entryName) {
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(exports.NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], exports.NAMESPACES_PROGRAM_ID);
    return web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(exports.ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], exports.NAMESPACES_PROGRAM_ID);
}
exports.nameEntryId = nameEntryId;
const reverseEntryId = (address) => {
    return web3.PublicKey.findProgramAddress([anchor.utils.bytes.utf8.encode(exports.REVERSE_ENTRY_SEED), address.toBytes()], exports.NAMESPACES_PROGRAM_ID);
};
exports.reverseEntryId = reverseEntryId;
//# sourceMappingURL=utils.js.map