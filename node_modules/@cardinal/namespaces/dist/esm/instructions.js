import * as anchor from "@project-serum/anchor";
import * as certificate from "@cardinal/certificates";
import * as web3 from "@solana/web3.js";
import * as splToken from "@solana/spl-token";
import * as mplTokenMetadata from "@metaplex-foundation/mpl-token-metadata";
import { CERTIFICATE_PROGRAM_ID, CERTIFICATE_SEED, MINT_MANAGER_SEED, withFindOrInitAssociatedTokenAccount, } from "@cardinal/certificates";
import { NAMESPACES_PROGRAM_ID, NAMESPACES_IDL, ENTRY_SEED, REVERSE_ENTRY_SEED, GLOBAL_CONTEXT_SEED, NAMESPACE_SEED, CLAIM_REQUEST_SEED, } from "./utils";
export async function withInit(connection, wallet, rentalPercentage, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [globalContextId, bump] = await web3.PublicKey.findProgramAddress([anchor.utils.bytes.utf8.encode(GLOBAL_CONTEXT_SEED)], namespacesProgram.programId);
    transaction.add(namespacesProgram.instruction.init({
        rentPercentage: new anchor.BN(rentalPercentage),
        bump,
    }, {
        accounts: {
            globalContext: globalContextId,
            authority: provider.wallet.publicKey,
            payer: provider.wallet.publicKey,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
export async function withCreateNamespace(connection, wallet, name, updateAuthority, rentAuthority, approveAuthority, schema, paymentAmountDaily, paymentMint, minRentalSeconds, maxRentalSeconds, transferableEntries, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId, bump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(name),
    ], namespacesProgram.programId);
    transaction.add(namespacesProgram.instruction.createNamespace({
        bump,
        name,
        updateAuthority,
        rentAuthority,
        approveAuthority,
        schema,
        paymentAmountDaily,
        paymentMint,
        minRentalSeconds,
        maxRentalSeconds,
        transferableEntries,
    }, {
        accounts: {
            namespace: namespaceId,
            authority: provider.wallet.publicKey,
            payer: provider.wallet.publicKey,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
export async function withUpdateNamespace(connection, wallet, name, updateAuthority, rentAuthority, approveAuthority, paymentAmountDaily, paymentMint, minRentalSeconds, maxRentalSeconds, transferableEntries, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(name),
    ], namespacesProgram.programId);
    transaction.add(namespacesProgram.instruction.updateNamespace({
        updateAuthority,
        rentAuthority,
        approveAuthority,
        paymentAmountDaily,
        paymentMint,
        minRentalSeconds,
        maxRentalSeconds,
        transferableEntries,
    }, {
        accounts: {
            namespace: namespaceId,
            updateAuthority: provider.wallet.publicKey,
        },
    }));
    return transaction;
}
export async function withInitEntry(connection, wallet, certificateMintId, namespaceName, entryName, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [entryId, entryBump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], namespacesProgram.programId);
    const [mintManagerId, mintManagerBump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(MINT_MANAGER_SEED),
        certificateMintId.toBytes(),
    ], CERTIFICATE_PROGRAM_ID);
    const [certificateMintMetadataId] = await web3.PublicKey.findProgramAddress([
        Buffer.from(mplTokenMetadata.MetadataProgram.PREFIX),
        mplTokenMetadata.MetadataProgram.PUBKEY.toBuffer(),
        certificateMintId.toBuffer(),
    ], mplTokenMetadata.MetadataProgram.PUBKEY);
    const mintBalanceNeeded = await splToken.Token.getMinBalanceRentForExemptMint(provider.connection);
    transaction.add(web3.SystemProgram.createAccount({
        fromPubkey: provider.wallet.publicKey,
        newAccountPubkey: certificateMintId,
        lamports: mintBalanceNeeded,
        space: splToken.MintLayout.span,
        programId: splToken.TOKEN_PROGRAM_ID,
    }));
    const namespaceCertificateTokenAccountId = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, certificateMintId, namespaceId, true);
    transaction.add(namespacesProgram.instruction.initEntry({
        name: entryName,
        entryBump,
        mintManagerBump,
    }, {
        accounts: {
            namespace: namespaceId,
            entry: entryId,
            payer: provider.wallet.publicKey,
            namespaceCertificateTokenAccount: namespaceCertificateTokenAccountId,
            // cpi
            mintManager: mintManagerId,
            certificateMint: certificateMintId,
            certificateMintMetadata: certificateMintMetadataId,
            // programs
            certificateProgram: CERTIFICATE_PROGRAM_ID,
            tokenMetadataProgram: mplTokenMetadata.MetadataProgram.PUBKEY,
            tokenProgram: splToken.TOKEN_PROGRAM_ID,
            associatedToken: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
            rent: web3.SYSVAR_RENT_PUBKEY,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
export async function withCreateClaimRequest(connection, wallet, namespaceName, entryName, user, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [claimRequestId, claimRequestBump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(CLAIM_REQUEST_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
        user.toBytes(),
    ], namespacesProgram.programId);
    transaction.add(namespacesProgram.instruction.createClaimRequest(entryName, claimRequestBump, user, {
        accounts: {
            namespace: namespaceId,
            payer: provider.wallet.publicKey,
            claimRequest: claimRequestId,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
export async function withUpdateClaimRequest(connection, wallet, namespaceName, claimRequestId, isApproved, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    transaction.add(namespacesProgram.instruction.updateClaimRequest(isApproved, {
        accounts: {
            namespace: namespaceId,
            approveAuthority: provider.wallet.publicKey,
            rentRequest: claimRequestId,
        },
    }));
    return transaction;
}
export async function withClaimEntry(connection, wallet, namespaceName, entryName, certificateMintId, duration, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [entryId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], namespacesProgram.programId);
    const [claimRequestId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(CLAIM_REQUEST_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
        provider.wallet.publicKey.toBytes(),
    ], namespacesProgram.programId);
    const namespace = await namespacesProgram.account.namespace.fetch(namespaceId);
    const [certificateId, certificateBump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(CERTIFICATE_SEED),
        certificateMintId.toBuffer(),
    ], CERTIFICATE_PROGRAM_ID);
    const [mintManagerId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(MINT_MANAGER_SEED),
        certificateMintId.toBytes(),
    ], CERTIFICATE_PROGRAM_ID);
    const namespaceCertificateTokenAccountId = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, certificateMintId, namespaceId, true);
    const certificatePaymentTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, namespace.paymentMint, certificateId, provider.wallet.publicKey, true);
    const userCertificateTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, certificateMintId, provider.wallet.publicKey, provider.wallet.publicKey);
    const userPaymentTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, namespace.paymentMint, provider.wallet.publicKey, provider.wallet.publicKey);
    const certificateTokenAccountId = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, certificateMintId, certificateId, true);
    transaction.add(namespacesProgram.instruction.claimEntry({
        duration: duration > 0 ? new anchor.BN(duration) : null,
        certificateBump,
    }, {
        accounts: {
            namespace: namespaceId,
            entry: entryId,
            user: provider.wallet.publicKey,
            payer: provider.wallet.publicKey,
            paymentMint: namespace.paymentMint,
            claimRequest: claimRequestId,
            // CPI accounts
            mintManager: mintManagerId,
            certificate: certificateId,
            certificateMint: certificateMintId,
            certificateTokenAccount: certificateTokenAccountId,
            certificatePaymentTokenAccount: certificatePaymentTokenAccountId,
            userCertificateTokenAccount: userCertificateTokenAccountId,
            userPaymentTokenAccount: userPaymentTokenAccountId,
            namespaceCertificateTokenAccount: namespaceCertificateTokenAccountId,
            // programs
            certificateProgram: CERTIFICATE_PROGRAM_ID,
            tokenProgram: splToken.TOKEN_PROGRAM_ID,
            associatedToken: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
            rent: web3.SYSVAR_RENT_PUBKEY,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
export async function withSetEntryData(connection, wallet, namespaceName, entryName, entryData, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [entryId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], namespacesProgram.programId);
    const entry = await namespacesProgram.account.entry.fetch(entryId);
    const [certificateId] = await certificate.certificateIdForMint(entry.mint);
    const userCertificateTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, entry.mint, provider.wallet.publicKey, provider.wallet.publicKey);
    transaction.add(namespacesProgram.instruction.setEntryData(entryData, {
        accounts: {
            namespace: namespaceId,
            entry: entryId,
            userCertificateTokenAccount: userCertificateTokenAccountId,
            certificate: certificateId,
            user: provider.wallet.publicKey,
            payer: provider.wallet.publicKey,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
export async function withSetReverseEntry(connection, wallet, namespaceName, entryName, certificateMintId, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [entryId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], namespacesProgram.programId);
    const [reverseEntryId, reverseEntryBump] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(REVERSE_ENTRY_SEED),
        wallet.publicKey.toBytes(),
    ], namespacesProgram.programId);
    const [certificateId] = await certificate.certificateIdForMint(certificateMintId);
    const userCertificateTokenAccountId = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, certificateMintId, provider.wallet.publicKey);
    transaction.add(namespacesProgram.instruction.setReverseEntry(reverseEntryBump, {
        accounts: {
            namespace: namespaceId,
            entry: entryId,
            reverseEntry: reverseEntryId,
            userCertificateTokenAccount: userCertificateTokenAccountId,
            certificate: certificateId,
            user: provider.wallet.publicKey,
            payer: provider.wallet.publicKey,
            systemProgram: anchor.web3.SystemProgram.programId,
        },
    }));
    return transaction;
}
export async function withRevokeReverseEntry(connection, wallet, namespaceName, entryName, reverseEntryId, claimRequestId, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [entryId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], namespacesProgram.programId);
    transaction.add(namespacesProgram.instruction.revokeReverseEntry({
        accounts: {
            namespace: namespaceId,
            entry: entryId,
            reverseEntry: reverseEntryId,
            claimRequest: claimRequestId,
            invalidator: wallet.publicKey,
        },
    }));
    return transaction;
}
export async function withRevokeEntry(connection, wallet, namespaceName, entryName, certificateMintId, certificateOwnerId, claimRequestId, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [namespaceId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(NAMESPACE_SEED),
        anchor.utils.bytes.utf8.encode(namespaceName),
    ], namespacesProgram.programId);
    const [entryId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(ENTRY_SEED),
        namespaceId.toBytes(),
        anchor.utils.bytes.utf8.encode(entryName),
    ], namespacesProgram.programId);
    const namespace = await namespacesProgram.account.namespace.fetch(namespaceId);
    const [certificateId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(CERTIFICATE_SEED),
        certificateMintId.toBuffer(),
    ], CERTIFICATE_PROGRAM_ID);
    const [mintManagerId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(MINT_MANAGER_SEED),
        certificateMintId.toBytes(),
    ], CERTIFICATE_PROGRAM_ID);
    const namespaceCertificateTokenAccountId = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, certificateMintId, namespaceId, true);
    const namespacePaymentTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, namespace.paymentMint, namespaceId, provider.wallet.publicKey, true);
    const certificatePaymentTokenAccountId = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, namespace.paymentMint, certificateId, true);
    const userCertificateTokenAccountId = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, certificateMintId, certificateOwnerId);
    const userPaymentTokenAccountId = await withFindOrInitAssociatedTokenAccount(transaction, provider.connection, namespace.paymentMint, certificateOwnerId, provider.wallet.publicKey);
    const certificateTokenAccountId = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, certificateMintId, certificateId, true);
    transaction.add(namespacesProgram.instruction.revokeEntry({
        accounts: {
            namespace: namespaceId,
            entry: entryId,
            claimRequest: claimRequestId,
            namespaceCertificateTokenAccount: namespaceCertificateTokenAccountId,
            namespacePaymentTokenAccount: namespacePaymentTokenAccountId,
            invalidator: provider.wallet.publicKey,
            // CPI accounts
            mintManager: mintManagerId,
            certificate: certificateId,
            certificateMint: certificateMintId,
            certificateTokenAccount: certificateTokenAccountId,
            certificatePaymentTokenAccount: certificatePaymentTokenAccountId,
            userCertificateTokenAccount: userCertificateTokenAccountId,
            userPaymentTokenAccount: userPaymentTokenAccountId,
            // programs
            certificateProgram: CERTIFICATE_PROGRAM_ID,
            tokenProgram: splToken.TOKEN_PROGRAM_ID,
        },
    }));
    return transaction;
}
export async function withUpdateMintMetadata(connection, wallet, namespaceId, entryId, certificateMintId, transaction) {
    const provider = new anchor.Provider(connection, wallet, {});
    const namespacesProgram = new anchor.Program(NAMESPACES_IDL, NAMESPACES_PROGRAM_ID, provider);
    const [certificateMintMetadataId] = await web3.PublicKey.findProgramAddress([
        anchor.utils.bytes.utf8.encode(mplTokenMetadata.MetadataProgram.PREFIX),
        mplTokenMetadata.MetadataProgram.PUBKEY.toBuffer(),
        certificateMintId.toBuffer(),
    ], mplTokenMetadata.MetadataProgram.PUBKEY);
    transaction.add(namespacesProgram.instruction.updateEntryMintMetadata({
        accounts: {
            namespace: namespaceId,
            entry: entryId,
            certificateMintMetadata: certificateMintMetadataId,
            tokenMetadataProgram: mplTokenMetadata.MetadataProgram.PUBKEY,
        },
    }));
    return transaction;
}
//# sourceMappingURL=instructions.js.map