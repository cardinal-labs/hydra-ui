import * as web3 from "@solana/web3.js";
export declare const CERTIFICATE_IDL: import("./types/idl").CardinalCertificate;
export declare const CERTIFICATE_PROGRAM_ID: web3.PublicKey;
export declare const CERTIFICATE_SEED = "certificate";
export declare const MINT_MANAGER_SEED = "mint-manager";
export declare enum CertificateState {
    Issued = 1,
    Claimed = 2,
    Invalidated = 3
}
export declare enum CertificateKind {
    Managed = 1,
    Unmanaged = 2
}
export declare const PAYMENT_MINTS: {
    mint: string;
    symbol: string;
}[];
/**
 * Utility function for adding a find or init associated token account instruction to a transaction
 * Useful when using associated token accounts so you can be sure they are created before hand
 * @param transaction
 * @param connection
 * @param mint
 * @param owner
 * @param payer
 * @param allowOwnerOffCurve
 * @returns The associated token account ID that was found or will be created. This also adds the relevent instruction to create it to the transaction if not found
 */
export declare function withFindOrInitAssociatedTokenAccount(transaction: web3.Transaction, connection: web3.Connection, mint: web3.PublicKey, owner: web3.PublicKey, payer: web3.PublicKey, allowOwnerOffCurve?: boolean): Promise<web3.PublicKey>;
/**
 * Utility for deriving certificateId given a Mint public key
 * @param mint Token mint public key
 * @returns Certificate public key
 */
export declare function certificateIdForMint(mint: web3.PublicKey): Promise<[web3.PublicKey, number]>;
//# sourceMappingURL=utils.d.ts.map