import * as web3 from "@solana/web3.js";
import { AccountData, CertificateData } from "./types";
/**
 * Gets certificates for a a list of mintIds
 * @param connection
 * @param mints
 * @returns List of certificates for the given mintIds
 */
export declare function getCertificatesForMints(connection: web3.Connection, mints: web3.PublicKey[]): Promise<AccountData<CertificateData>[]>;
export declare function getCertificate(connection: web3.Connection, certificateId: web3.PublicKey): Promise<AccountData<CertificateData>>;
/**
 * Get a list of certificates given a list of certificate public keys
 * @param connection
 * @param certificateIds
 * @returns List of certificates
 */
export declare function getCertificates(connection: web3.Connection, certificateIds: web3.PublicKey[]): Promise<AccountData<CertificateData>[]>;
/**
 * Get all outstanding certificates serialized and sorted pertaining to this user
 * TODO this is inefficient and should be replaced with a call to an indexed set of IDs but it's okay for now
 * @param connection web3 connection
 * @param user use public key
 * @returns List of outstanding certificates pertaining to this user
 */
export declare function getOutstandingCertificates(connection: web3.Connection, user: web3.PublicKey | null): Promise<AccountData<CertificateData>[]>;
/**
 * Get all invalid certificates
 * TODO this is inefficient and should be replaced with a call to an indexed set of IDs but it's okay for now
 * @param connection web3 connection
 * @returns List of invalid certificates
 */
export declare function getInvalidCertificates(connection: web3.Connection): Promise<AccountData<CertificateData>[]>;
//# sourceMappingURL=accounts.d.ts.map