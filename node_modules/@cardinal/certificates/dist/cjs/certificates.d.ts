import * as anchor from "@project-serum/anchor";
import * as web3 from "@solana/web3.js";
import { Wallet } from "@saberhq/solana-contrib";
import { CertificateKind } from "./utils";
/**
 * Add a new issue certificate instruction to this transaction
 *
 * @param connection Solana connection
 * @param wallet Anchor wallet interface
 * @param certificateKind
 * @param duration
 * @param startAtIssuance
 * @param totalUsages
 * @param amount
 * @param paymentMint
 * @param paymentAmount
 * @param isReturnable
 * @param isExtendable
 * @param revokeAuthority
 * @param issuer
 * @param issuerTokenAccount
 * @param certificateMintId
 * @param originalMint
 * @param recipient
 * @param transaction
 * @returns Transaction with instruction added
 */
export declare function withIssueCertificate(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    certificateKind: CertificateKind;
    duration: number;
    startAtIssuance: boolean;
    totalUsages: number;
    amount: number;
    paymentMint: web3.PublicKey | null;
    paymentAmount: number;
    isReturnable: boolean;
    isExtendable: boolean;
    revokeAuthority: web3.PublicKey;
    issuer: web3.PublicKey;
    issuerTokenAccount: web3.PublicKey;
    certificateMint: web3.PublicKey;
    originalMint: web3.PublicKey | null;
    recipient: web3.PublicKey | null;
}): Promise<[web3.Transaction, web3.PublicKey]>;
/**
 * Add a claim certificate instruction to this transaction
 * @param connection
 * @param wallet
 * @param certificateId
 * @param transaction
 * @returns Transaction with instruction added
 */
export declare function withClaimCertificate(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    certificateMint: web3.PublicKey;
}): Promise<web3.Transaction>;
/**
 * Adds unissue certificate instruction
 * @param connection
 * @param wallet
 * @param certificateMint
 * @param transaction
 * @returns Transaction with instruction added
 */
export declare function withUnissueCertificate(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    certificateMint: web3.PublicKey;
}): Promise<anchor.web3.Transaction>;
/**
 * Adds use certificate instruction
 * @param connection
 * @param wallet
 * @param certificateMint
 * @param transaction
 * @returns Transaction with use instruction added
 */
export declare function withUseCertificate(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    certificateMint: web3.PublicKey;
}): Promise<anchor.web3.Transaction>;
/**
 * Adds revoke certificate instruction
 * @param connection
 * @param wallet
 * @param certificateMint
 * @param transaction
 * @returns Transaction with revoke certificate instruction added
 */
export declare function withRevokeCertificate(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    certificateMint: web3.PublicKey;
}): Promise<web3.Transaction>;
/**
 * Add invalidate certificate instruction
 * @param connection
 * @param wallet
 * @param certificateMint
 * @param transaction
 * @returns Transaction with instruction added
 */
export declare function withInvalidateCertificate(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    certificateMint: web3.PublicKey;
}): Promise<web3.Transaction>;
/**
 * Adds revoke certificate instruction
 * @param connection
 * @param wallet
 * @param certificateMint
 * @param transaction
 * @returns Transaction with revoke certificate instruction added
 */
export declare function withRevokeCertificateV2(connection: web3.Connection, wallet: Wallet, transaction: web3.Transaction, params: {
    certificateMint: web3.PublicKey;
    revokeRecipient: web3.PublicKey;
}): Promise<web3.Transaction>;
//# sourceMappingURL=certificates.d.ts.map