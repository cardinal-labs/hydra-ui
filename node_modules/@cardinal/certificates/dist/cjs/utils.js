"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.certificateIdForMint = exports.withFindOrInitAssociatedTokenAccount = exports.PAYMENT_MINTS = exports.CertificateKind = exports.CertificateState = exports.MINT_MANAGER_SEED = exports.CERTIFICATE_SEED = exports.CERTIFICATE_PROGRAM_ID = exports.CERTIFICATE_IDL = void 0;
const web3 = __importStar(require("@solana/web3.js"));
const splToken = __importStar(require("@solana/spl-token"));
const anchor = __importStar(require("@project-serum/anchor"));
const idl_1 = require("./types/idl");
exports.CERTIFICATE_IDL = idl_1.IDL;
exports.CERTIFICATE_PROGRAM_ID = new web3.PublicKey("crt4Ymiqtk3M5w6JuKDT7GuZfUDiPLnhwRVqymSSBBn");
exports.CERTIFICATE_SEED = "certificate";
exports.MINT_MANAGER_SEED = "mint-manager";
var CertificateState;
(function (CertificateState) {
    CertificateState[CertificateState["Issued"] = 1] = "Issued";
    CertificateState[CertificateState["Claimed"] = 2] = "Claimed";
    CertificateState[CertificateState["Invalidated"] = 3] = "Invalidated";
})(CertificateState = exports.CertificateState || (exports.CertificateState = {}));
var CertificateKind;
(function (CertificateKind) {
    CertificateKind[CertificateKind["Managed"] = 1] = "Managed";
    CertificateKind[CertificateKind["Unmanaged"] = 2] = "Unmanaged";
})(CertificateKind = exports.CertificateKind || (exports.CertificateKind = {}));
exports.PAYMENT_MINTS = [
    {
        mint: "So11111111111111111111111111111111111111112",
        symbol: "SOL",
    },
    {
        mint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
        symbol: "USDC",
    },
    {
        mint: "Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1",
        symbol: "SBR",
    },
];
/**
 * Utility function for adding a find or init associated token account instruction to a transaction
 * Useful when using associated token accounts so you can be sure they are created before hand
 * @param transaction
 * @param connection
 * @param mint
 * @param owner
 * @param payer
 * @param allowOwnerOffCurve
 * @returns The associated token account ID that was found or will be created. This also adds the relevent instruction to create it to the transaction if not found
 */
async function withFindOrInitAssociatedTokenAccount(transaction, connection, mint, owner, payer, allowOwnerOffCurve) {
    const associatedAddress = await splToken.Token.getAssociatedTokenAddress(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, owner, allowOwnerOffCurve);
    const account = await connection.getAccountInfo(associatedAddress);
    if (!account) {
        transaction.add(splToken.Token.createAssociatedTokenAccountInstruction(splToken.ASSOCIATED_TOKEN_PROGRAM_ID, splToken.TOKEN_PROGRAM_ID, mint, associatedAddress, owner, payer));
    }
    return associatedAddress;
}
exports.withFindOrInitAssociatedTokenAccount = withFindOrInitAssociatedTokenAccount;
/**
 * Utility for deriving certificateId given a Mint public key
 * @param mint Token mint public key
 * @returns Certificate public key
 */
async function certificateIdForMint(mint) {
    return await web3.PublicKey.findProgramAddress([anchor.utils.bytes.utf8.encode(exports.CERTIFICATE_SEED), mint.toBuffer()], exports.CERTIFICATE_PROGRAM_ID);
}
exports.certificateIdForMint = certificateIdForMint;
//# sourceMappingURL=utils.js.map