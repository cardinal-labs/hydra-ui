{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { BorshAccountsCoder, utils } from \"@coral-xyz/anchor\";\nimport type { Commitment, Connection, PublicKey } from \"@solana/web3.js\";\n\nimport { REWARD_DISTRIBUTOR_ADDRESS, REWARD_DISTRIBUTOR_IDL } from \".\";\nimport type { RewardDistributorData, RewardEntryData } from \"./constants\";\nimport { rewardDistributorProgram } from \"./constants\";\n\nexport const getRewardEntry = async (\n  connection: Connection,\n  rewardEntryId: PublicKey,\n  commitment?: Commitment\n): Promise<AccountData<RewardEntryData>> => {\n  const program = rewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const parsed = (await program.account.rewardEntry.fetch(\n    rewardEntryId\n  )) as RewardEntryData;\n  return {\n    parsed,\n    pubkey: rewardEntryId,\n  };\n};\n\nexport const getRewardEntries = async (\n  connection: Connection,\n  rewardEntryIds: PublicKey[],\n  commitment?: Commitment\n): Promise<AccountData<RewardEntryData>[]> => {\n  const program = rewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const rewardEntries = (await program.account.rewardEntry.fetchMultiple(\n    rewardEntryIds\n  )) as RewardEntryData[];\n  return rewardEntries.map((entry, i) => ({\n    parsed: entry,\n    pubkey: rewardEntryIds[i]!,\n  }));\n};\n\nexport const getRewardDistributor = async (\n  connection: Connection,\n  rewardDistributorId: PublicKey,\n  commitment?: Commitment\n): Promise<AccountData<RewardDistributorData>> => {\n  const program = rewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const parsed = (await program.account.rewardDistributor.fetch(\n    rewardDistributorId\n  )) as RewardDistributorData;\n  return {\n    parsed,\n    pubkey: rewardDistributorId,\n  };\n};\n\nexport const getRewardDistributors = async (\n  connection: Connection,\n  rewardDistributorIds: PublicKey[],\n  commitment?: Commitment\n): Promise<AccountData<RewardDistributorData>[]> => {\n  const program = rewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const rewardDistributors =\n    (await program.account.rewardDistributor.fetchMultiple(\n      rewardDistributorIds\n    )) as RewardDistributorData[];\n  return rewardDistributors.map((distributor, i) => ({\n    parsed: distributor,\n    pubkey: rewardDistributorIds[i]!,\n  }));\n};\n\nexport const getRewardEntriesForRewardDistributor = async (\n  connection: Connection,\n  rewardDistributorId: PublicKey,\n  commitment?: Commitment\n): Promise<AccountData<RewardEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    REWARD_DISTRIBUTOR_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"rewardEntry\")\n            ),\n          },\n        },\n        {\n          memcmp: {\n            offset: 41,\n            bytes: rewardDistributorId.toBase58(),\n          },\n        },\n      ],\n      commitment,\n    }\n  );\n  const rewardEntryDatas: AccountData<RewardEntryData>[] = [];\n  const coder = new BorshAccountsCoder(REWARD_DISTRIBUTOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const rewardEntryData: RewardEntryData = coder.decode(\n        \"rewardEntry\",\n        account.account.data\n      );\n      if (rewardEntryData) {\n        rewardEntryDatas.push({\n          ...account,\n          parsed: rewardEntryData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return rewardEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getAllRewardEntries = async (\n  connection: Connection,\n  commitment?: Commitment\n): Promise<AccountData<RewardEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    REWARD_DISTRIBUTOR_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"rewardEntry\")\n            ),\n          },\n        },\n      ],\n      commitment,\n    }\n  );\n  const rewardEntryDatas: AccountData<RewardEntryData>[] = [];\n  const coder = new BorshAccountsCoder(REWARD_DISTRIBUTOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const rewardEntryData: RewardEntryData = coder.decode(\n        \"rewardEntry\",\n        account.account.data\n      );\n      if (rewardEntryData) {\n        rewardEntryDatas.push({\n          ...account,\n          parsed: rewardEntryData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return rewardEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n"]}