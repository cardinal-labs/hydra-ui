{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/groupRewardDistributor/pda.ts"],"names":[],"mappings":";;;AAAA,8CAA0C;AAC1C,6CAA4C;AAE5C,2CAKqB;AAErB;;;GAGG;AACI,MAAM,sBAAsB,GAAG,CACpC,wBAAmC,EACnC,YAAuB,EACvB,EAAE;IACF,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAuB,CAAC;QAChD,wBAAwB,CAAC,QAAQ,EAAE;QACnC,YAAY,CAAC,QAAQ,EAAE;KACxB,EACD,4CAAgC,CACjC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAZW,QAAA,sBAAsB,0BAYjC;AAEF;;;GAGG;AACI,MAAM,wBAAwB,GAAG,CACtC,wBAAmC,EACnC,SAAoB,EACpB,EAAE;IACF,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,qCAAyB,CAAC;QAClD,wBAAwB,CAAC,QAAQ,EAAE;QACnC,SAAS,CAAC,QAAQ,EAAE;KACrB,EACD,4CAAgC,CACjC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAZW,QAAA,wBAAwB,4BAYnC;AAEF;;;GAGG;AACI,MAAM,4BAA4B,GAAG,CAAC,EAAa,EAAE,EAAE;IAC5D,OAAO,mBAAS,CAAC,sBAAsB,CACrC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,yCAA6B,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EACvE,4CAAgC,CACjC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AALW,QAAA,4BAA4B,gCAKvC","sourcesContent":["import { utils } from \"@coral-xyz/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  GROUP_REWARD_COUNTER_SEED,\n  GROUP_REWARD_DISTRIBUTOR_ADDRESS,\n  GROUP_REWARD_DISTRIBUTOR_SEED,\n  GROUP_REWARD_ENTRY_SEED,\n} from \"./constants\";\n\n/**\n * Finds the group reward entry id.\n * @returns\n */\nexport const findGroupRewardEntryId = (\n  groupRewardDistributorId: PublicKey,\n  groupEntryId: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(GROUP_REWARD_ENTRY_SEED),\n      groupRewardDistributorId.toBuffer(),\n      groupEntryId.toBuffer(),\n    ],\n    GROUP_REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the group reward entry id.\n * @returns\n */\nexport const findGroupRewardCounterId = (\n  groupRewardDistributorId: PublicKey,\n  authority: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(GROUP_REWARD_COUNTER_SEED),\n      groupRewardDistributorId.toBuffer(),\n      authority.toBuffer(),\n    ],\n    GROUP_REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the group reward distributor id.\n * @returns\n */\nexport const findGroupRewardDistributorId = (id: PublicKey) => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(GROUP_REWARD_DISTRIBUTOR_SEED), id.toBuffer()],\n    GROUP_REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n"]}