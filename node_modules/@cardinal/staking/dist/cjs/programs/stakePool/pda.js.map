{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/pda.ts"],"names":[],"mappings":";;;AAAA,8CAA8C;AAC9C,6CAA4C;AAE5C,wBAA0E;AAC1E,2CAKqB;AAErB;;;GAGG;AACI,MAAM,eAAe,GAAG,CAAC,UAAc,EAAa,EAAE;IAC3D,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAe,CAAC;QACxC,UAAU,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KACxC,EACD,qBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AARW,QAAA,eAAe,mBAQ1B;AAEF;;;GAGG;AACI,MAAM,gBAAgB,GAAG,CAC9B,MAAiB,EACjB,WAAsB,EACtB,cAAyB,EACzB,UAAmB,EACR,EAAE;IACb,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAgB,CAAC;QACzC,WAAW,CAAC,QAAQ,EAAE;QACtB,cAAc,CAAC,QAAQ,EAAE;QACzB,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,mBAAS,CAAC,OAAO,CAAC,QAAQ,EAAE;KAC9D,EACD,qBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAfW,QAAA,gBAAgB,oBAe3B;AAEF;;;GAGG;AACI,MAAM,gBAAgB,GAAG,GAAc,EAAE;IAC9C,OAAO,mBAAS,CAAC,sBAAsB,CACrC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,2BAAe,CAAC,CAAC,EAC1C,qBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AALW,QAAA,gBAAgB,oBAK3B;AAEF;;;GAGG;AACI,MAAM,wBAAwB,GAAG,CACtC,WAAsB,EACtB,MAAiB,EACN,EAAE;IACb,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,oCAAwB,CAAC;QACjD,WAAW,CAAC,QAAQ,EAAE;QACtB,MAAM,CAAC,QAAQ,EAAE;KAClB,EACD,qBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAZW,QAAA,wBAAwB,4BAYnC;AAEF;;;GAGG;AACI,MAAM,kBAAkB,GAAG,CAChC,WAAsB,EACtB,UAAe,EACJ,EAAE;IACb,OAAO,mBAAS,CAAC,sBAAsB,CACrC;QACE,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,8BAAkB,CAAC;QAC3C,WAAW,CAAC,QAAQ,EAAE;QACtB,CAAC,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,IAAI,WAAE,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;KACvD,EACD,qBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAZW,QAAA,kBAAkB,sBAY7B;AAEF;;;GAGG;AACI,MAAM,gBAAgB,GAAG,CAAC,EAAa,EAAa,EAAE;IAC3D,OAAO,mBAAS,CAAC,sBAAsB,CACrC,CAAC,cAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,4BAAgB,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EAC1D,qBAAkB,CACnB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AALW,QAAA,gBAAgB,oBAK3B","sourcesContent":["import { BN, utils } from \"@coral-xyz/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport { STAKE_ENTRY_SEED, STAKE_POOL_ADDRESS, STAKE_POOL_SEED } from \".\";\nimport {\n  GROUP_ENTRY_SEED,\n  IDENTIFIER_SEED,\n  STAKE_AUTHORIZATION_SEED,\n  STAKE_BOOSTER_SEED,\n} from \"./constants\";\n\n/**\n * Finds the stake pool id.\n * @returns\n */\nexport const findStakePoolId = (identifier: BN): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(STAKE_POOL_SEED),\n      identifier.toArrayLike(Buffer, \"le\", 8),\n    ],\n    STAKE_POOL_ADDRESS\n  )[0];\n};\n\n/**\n * Convenience method to find the stake entry id.\n * @returns\n */\nexport const findStakeEntryId = (\n  wallet: PublicKey,\n  stakePoolId: PublicKey,\n  originalMintId: PublicKey,\n  isFungible: boolean\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(STAKE_ENTRY_SEED),\n      stakePoolId.toBuffer(),\n      originalMintId.toBuffer(),\n      isFungible ? wallet.toBuffer() : PublicKey.default.toBuffer(),\n    ],\n    STAKE_POOL_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the identifier id.\n * @returns\n */\nexport const findIdentifierId = (): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(IDENTIFIER_SEED)],\n    STAKE_POOL_ADDRESS\n  )[0];\n};\n\n/**\n * Find stake authorization id.\n * @returns\n */\nexport const findStakeAuthorizationId = (\n  stakePoolId: PublicKey,\n  mintId: PublicKey\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(STAKE_AUTHORIZATION_SEED),\n      stakePoolId.toBuffer(),\n      mintId.toBuffer(),\n    ],\n    STAKE_POOL_ADDRESS\n  )[0];\n};\n\n/**\n * Find stake booster id.\n * @returns\n */\nexport const findStakeBoosterId = (\n  stakePoolId: PublicKey,\n  identifier?: BN\n): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(STAKE_BOOSTER_SEED),\n      stakePoolId.toBuffer(),\n      (identifier ?? new BN(0)).toArrayLike(Buffer, \"le\", 8),\n    ],\n    STAKE_POOL_ADDRESS\n  )[0];\n};\n\n/**\n * Convenience method to find the stake entry id.\n * @returns\n */\nexport const findGroupEntryId = (id: PublicKey): PublicKey => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(GROUP_ENTRY_SEED), id.toBuffer()],\n    STAKE_POOL_ADDRESS\n  )[0];\n};\n"]}