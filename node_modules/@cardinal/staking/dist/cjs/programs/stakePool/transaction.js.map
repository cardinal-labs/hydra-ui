{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findMintMetadataId,\n  METADATA_PROGRAM_ID,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { PAYMENT_MANAGER_ADDRESS } from \"@cardinal/payment-manager\";\nimport { getPaymentManager } from \"@cardinal/payment-manager/dist/cjs/accounts\";\nimport { TOKEN_MANAGER_ADDRESS } from \"@cardinal/token-manager/dist/cjs/programs/tokenManager\";\nimport { findMintManagerId } from \"@cardinal/token-manager/dist/cjs/programs/tokenManager/pda\";\nimport { BN } from \"@coral-xyz/anchor\";\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport { ASSOCIATED_PROGRAM_ID } from \"@coral-xyz/anchor/dist/cjs/utils/token\";\nimport {\n  getAssociatedTokenAddressSync,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport {\n  Keypair,\n  SystemProgram,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from \"@solana/web3.js\";\n\nimport { getPoolIdentifier, getStakeBooster, getStakeEntry } from \"./accounts\";\nimport { STAKE_BOOSTER_PAYMENT_MANAGER, stakePoolProgram } from \"./constants\";\nimport {\n  findGroupEntryId,\n  findIdentifierId,\n  findStakeAuthorizationId,\n  findStakeBoosterId,\n  findStakePoolId,\n} from \"./pda\";\nimport { remainingAccountsForInitStakeEntry } from \"./utils\";\n\nexport const withInitStakePool = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    requiresCollections?: PublicKey[];\n    requiresCreators?: PublicKey[];\n    requiresAuthorization?: boolean;\n    overlayText?: string;\n    imageUri?: string;\n    resetOnStake?: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number;\n    endDate?: BN;\n    doubleOrResetEnabled?: boolean;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const identifierId = findIdentifierId();\n  const identifierData = await tryGetAccount(() =>\n    getPoolIdentifier(connection)\n  );\n  const identifier = identifierData?.parsed.count || new BN(1);\n\n  const program = stakePoolProgram(connection, wallet);\n  if (!identifierData) {\n    const ix = await program.methods\n      .initIdentifier()\n      .accounts({\n        identifier: identifierId,\n        payer: wallet.publicKey,\n        systemProgram: SystemProgram.programId,\n      })\n      .instruction();\n    transaction.add(ix);\n  }\n\n  const stakePoolId = findStakePoolId(identifier);\n  const ix = await program.methods\n    .initPool({\n      overlayText: params.overlayText || \"STAKED\",\n      imageUri: params.imageUri || \"\",\n      requiresCollections: params.requiresCollections || [],\n      requiresCreators: params.requiresCreators || [],\n      requiresAuthorization: params.requiresAuthorization || false,\n      authority: wallet.publicKey,\n      resetOnStake: params.resetOnStake || false,\n      cooldownSeconds: params.cooldownSeconds || null,\n      minStakeSeconds: params.minStakeSeconds || null,\n      endDate: params.endDate || null,\n      doubleOrResetEnabled: params.doubleOrResetEnabled || null,\n    })\n    .accounts({\n      stakePool: stakePoolId,\n      identifier: identifierId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, stakePoolId];\n};\n\n/**\n * Add init stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created stake entry\n */\nexport const withInitStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const ix = await stakePoolProgram(connection, wallet)\n    .methods.initEntry(wallet.publicKey)\n    .accountsStrict({\n      stakeEntry: params.stakeEntryId,\n      stakePool: params.stakePoolId,\n      originalMint: params.originalMintId,\n      originalMintMetadata: findMintMetadataId(params.originalMintId),\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(\n      remainingAccountsForInitStakeEntry(\n        params.stakePoolId,\n        params.originalMintId\n      )\n    )\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\n/**\n * Add authorize stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withAuthorizeStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const ix = await stakePoolProgram(connection, wallet)\n    .methods.authorizeMint(params.originalMintId)\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeAuthorizationRecord: findStakeAuthorizationId(\n        params.stakePoolId,\n        params.originalMintId\n      ),\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\n/**\n * Add authorize stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction\n */\nexport const withDeauthorizeStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    originalMintId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const stakeAuthorizationId = findStakeAuthorizationId(\n    params.stakePoolId,\n    params.originalMintId\n  );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .deauthorizeMint()\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeAuthorizationRecord: stakeAuthorizationId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\n/**\n * Add init stake mint instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, keypair of the created stake mint\n */\nexport const withInitStakeMint = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n    stakeMintKeypair: Keypair;\n    name: string;\n    symbol: string;\n  }\n): Promise<[Transaction, Keypair]> => {\n  const originalMintMetadataId = findMintMetadataId(params.originalMintId);\n  const stakeMintMetadataId = findMintMetadataId(\n    params.stakeMintKeypair.publicKey\n  );\n  const stakeEntryStakeMintTokenAccountId = getAssociatedTokenAddressSync(\n    params.stakeMintKeypair.publicKey,\n    params.stakeEntryId,\n    true\n  );\n\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .initStakeMint({\n      name: params.name,\n      symbol: params.symbol,\n    })\n    .accounts({\n      stakeEntry: params.stakeEntryId,\n      stakePool: params.stakePoolId,\n      originalMint: params.originalMintId,\n      originalMintMetadata: originalMintMetadataId,\n      stakeMint: params.stakeMintKeypair.publicKey,\n      stakeMintMetadata: stakeMintMetadataId,\n      stakeEntryStakeMintTokenAccount: stakeEntryStakeMintTokenAccountId,\n      mintManager: findMintManagerId(params.stakeMintKeypair.publicKey),\n      payer: wallet.publicKey,\n      rent: SYSVAR_RENT_PUBKEY,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      tokenManagerProgram: TOKEN_MANAGER_ADDRESS,\n      associatedToken: ASSOCIATED_PROGRAM_ID,\n      tokenMetadataProgram: METADATA_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, params.stakeMintKeypair];\n};\n\nexport const withUpdateStakePool = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    requiresCollections?: PublicKey[];\n    requiresCreators?: PublicKey[];\n    requiresAuthorization?: boolean;\n    overlayText?: string;\n    imageUri?: string;\n    resetOnStake?: boolean;\n    cooldownSeconds?: number;\n    minStakeSeconds?: number;\n    endDate?: BN;\n    doubleOrResetEnabled?: boolean;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .updatePool({\n      imageUri: params.imageUri || \"\",\n      overlayText: params.overlayText || \"STAKED\",\n      requiresCollections: params.requiresCollections || [],\n      requiresCreators: params.requiresCreators || [],\n      requiresAuthorization: params.requiresAuthorization || false,\n      authority: wallet.publicKey,\n      resetOnStake: params.resetOnStake || false,\n      cooldownSeconds: params.cooldownSeconds || null,\n      minStakeSeconds: params.minStakeSeconds || null,\n      endDate: params.endDate || null,\n      doubleOrResetEnabled: params.doubleOrResetEnabled || null,\n    })\n    .accounts({\n      stakePool: params.stakePoolId,\n      payer: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, params.stakePoolId];\n};\n\nexport const withUpdateTotalStakeSeconds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: PublicKey;\n    lastStaker: PublicKey;\n  }\n): Promise<Transaction> => {\n  const ix = await stakePoolProgram(connection, wallet)\n    .methods.updateTotalStakeSeconds()\n    .accounts({\n      stakeEntry: params.stakeEntryId,\n      lastStaker: params.lastStaker,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withCloseStakePool = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .closeStakePool()\n    .accounts({\n      stakePool: params.stakePoolId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withCloseStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .closeStakeEntry()\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeEntry: params.stakeEntryId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withReassignStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    target: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .reassignStakeEntry({ target: params.target })\n    .accounts({\n      stakePool: params.stakePoolId,\n      stakeEntry: params.stakeEntryId,\n      lastStaker: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withDoubleOrResetTotalStakeSeconds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .doubleOrResetTotalStakeSeconds()\n    .accounts({\n      stakeEntry: params.stakeEntryId,\n      stakePool: params.stakePoolId,\n      lastStaker: wallet.publicKey,\n      recentSlothashes: SYSVAR_SLOT_HASHES_PUBKEY,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withInitStakeBooster = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeBoosterIdentifier?: BN;\n    paymentAmount: BN;\n    paymentMint: PublicKey;\n    boostSeconds: BN;\n    startTimeSeconds: number;\n    payer?: PublicKey;\n  }\n): Promise<Transaction> => {\n  const stakeBoosterId = findStakeBoosterId(\n    params.stakePoolId,\n    params.stakeBoosterIdentifier\n  );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .initStakeBooster({\n      stakePool: params.stakePoolId,\n      identifier: params.stakeBoosterIdentifier || new BN(0),\n      paymentAmount: params.paymentAmount,\n      paymentMint: params.paymentMint,\n      paymentManager: STAKE_BOOSTER_PAYMENT_MANAGER,\n      boostSeconds: params.boostSeconds,\n      startTimeSeconds: new BN(params.startTimeSeconds),\n    })\n    .accounts({\n      stakeBooster: stakeBoosterId,\n      stakePool: params.stakePoolId,\n      authority: wallet.publicKey,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withUpdateStakeBooster = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeBoosterIdentifier?: BN;\n    paymentAmount: BN;\n    paymentMint: PublicKey;\n    boostSeconds: BN;\n    startTimeSeconds: number;\n  }\n): Promise<Transaction> => {\n  const stakeBoosterId = findStakeBoosterId(\n    params.stakePoolId,\n    params.stakeBoosterIdentifier\n  );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .updateStakeBooster({\n      paymentAmount: params.paymentAmount,\n      paymentMint: params.paymentMint,\n      paymentManager: STAKE_BOOSTER_PAYMENT_MANAGER,\n      boostSeconds: params.boostSeconds,\n      startTimeSeconds: new BN(params.startTimeSeconds),\n    })\n    .accounts({\n      stakeBooster: stakeBoosterId,\n      stakePool: params.stakePoolId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withCloseStakeBooster = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeBoosterIdentifier?: BN;\n  }\n): Promise<Transaction> => {\n  const stakeBoosterId = findStakeBoosterId(\n    params.stakePoolId,\n    params.stakeBoosterIdentifier\n  );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .closeStakeBooster()\n    .accounts({\n      stakeBooster: stakeBoosterId,\n      stakePool: params.stakePoolId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withBoostStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeBoosterIdentifier?: BN;\n    stakeEntryId: PublicKey;\n    originalMintId: PublicKey;\n    payerTokenAccount: PublicKey;\n    payer?: PublicKey;\n    secondsToBoost: BN;\n  }\n): Promise<Transaction> => {\n  const stakeBoosterId = findStakeBoosterId(\n    params.stakePoolId,\n    params.stakeBoosterIdentifier\n  );\n\n  const stakeBooster = await getStakeBooster(connection, stakeBoosterId);\n  const paymentManager = await getPaymentManager(\n    connection,\n    stakeBooster.parsed.paymentManager\n  );\n  const feeCollectorTokenAccount = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    stakeBooster.parsed.paymentMint,\n    paymentManager.parsed.feeCollector,\n    params.payer ?? wallet.publicKey\n  );\n  const paymentRecipientTokenAccount =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      stakeBooster.parsed.paymentMint,\n      stakeBooster.parsed.paymentRecipient,\n      params.payer ?? wallet.publicKey\n    );\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .boostStakeEntry({ secondsToBoost: params.secondsToBoost })\n    .accounts({\n      stakeBooster: stakeBooster.pubkey,\n      stakePool: params.stakePoolId,\n      stakeEntry: params.stakeEntryId,\n      originalMint: params.originalMintId,\n      payerTokenAccount: params.payerTokenAccount,\n      paymentRecipientTokenAccount: paymentRecipientTokenAccount,\n      payer: wallet.publicKey,\n      paymentManager: stakeBooster.parsed.paymentManager,\n      feeCollectorTokenAccount: feeCollectorTokenAccount,\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\n/**\n * Add init group stake entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created group stake entry\n */\nexport const withInitGroupStakeEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupCooldownSeconds?: number;\n    groupStakeSeconds?: number;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const id = Keypair.generate();\n  const program = stakePoolProgram(connection, wallet);\n  const groupEntryId = findGroupEntryId(id.publicKey);\n  const ix = await program.methods\n    .initGroupEntry({\n      groupId: id.publicKey,\n      groupCooldownSeconds: params.groupCooldownSeconds || null,\n      groupStakeSeconds: params.groupStakeSeconds || null,\n    })\n    .accounts({\n      groupEntry: groupEntryId,\n      authority: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, groupEntryId];\n};\n\n/**\n * Add a stake entry to the group entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created group stake entry\n */\nexport const withAddToGroupEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n    stakeEntryId: PublicKey;\n    payer?: PublicKey;\n  }\n): Promise<[Transaction]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .addToGroupEntry()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      stakeEntry: params.stakeEntryId,\n      authority: wallet.publicKey,\n      payer: params.payer ?? wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction];\n};\n\n/**\n * Remove stake entry from the group entry instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created group stake entry\n */\nexport const withRemoveFromGroupEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<[Transaction]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .removeFromGroupEntry()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      stakeEntry: params.stakeEntryId,\n      authority: wallet.publicKey,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction];\n};\n\n/**\n * Add init ungrouping instructions to a transaction\n * @param transaction\n * @param connection\n * @param wallet\n * @param params\n * @returns Transaction, public key for the created group stake entry\n */\nexport const withInitUngrouping = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n  }\n): Promise<[Transaction]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const ix = await program.methods\n    .initUngrouping()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction];\n};\n\nexport const withClaimStakeEntryFunds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  stakeEntryId: PublicKey,\n  fundsMintId: PublicKey\n): Promise<[Transaction]> => {\n  const program = stakePoolProgram(connection, wallet);\n  const stakeEntryData = await tryGetAccount(() =>\n    getStakeEntry(connection, stakeEntryId)\n  );\n  if (!stakeEntryData) {\n    throw `No stake entry id with address ${stakeEntryId.toString()}`;\n  }\n\n  const stakeEntryFundsMintTokenAccountId = getAssociatedTokenAddressSync(\n    fundsMintId,\n    stakeEntryId,\n    true\n  );\n\n  const userFundsMintTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      fundsMintId,\n      stakeEntryData.parsed.lastStaker,\n      wallet.publicKey,\n      true\n    );\n\n  const ix = await program.methods\n    .claimStakeEntryFunds()\n    .accounts({\n      fundsMint: fundsMintId,\n      stakeEntryFundsMintTokenAccount: stakeEntryFundsMintTokenAccountId,\n      userFundsMintTokenAccount: userFundsMintTokenAccountId,\n      stakePool: stakeEntryData.parsed.pool,\n      stakeEntry: stakeEntryId,\n      originalMint: stakeEntryData.parsed.originalMint,\n      authority: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction];\n};\n"]}