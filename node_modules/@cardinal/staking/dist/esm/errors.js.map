{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../src/errors.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Idl } from \"@coral-xyz/anchor\";\nimport type { PublicKey, SendTransactionError } from \"@solana/web3.js\";\n\nimport {\n  REWARD_DISTRIBUTOR_ADDRESS,\n  REWARD_DISTRIBUTOR_IDL,\n} from \"./programs/rewardDistributor\";\nimport { STAKE_POOL_ADDRESS, STAKE_POOL_IDL } from \"./programs/stakePool\";\n\ntype ErrorCode = {\n  code: string;\n  message: string;\n};\n\nexport const NATIVE_ERRORS: ErrorCode[] = [\n  {\n    code: \"WalletSignTransactionError\",\n    message: \"User rejected the request.\",\n  },\n  {\n    code: \"failed to get recent blockhash\",\n    message:\n      \"Solana is experiencing degrading performance. You transaction failed to execute.\",\n  },\n  {\n    code: \"Blockhash not found\",\n    message:\n      \"Solana is experiencing degrading performance. Transaction may or may not have gone through.\",\n  },\n  {\n    code: \"Transaction was not confirmed in\",\n    message:\n      \"Transaction timed out waiting on confirmation from Solana. It may or may not have gone through.\",\n  },\n  {\n    code: \"Attempt to debit an account but found no record of a prior credit\",\n    message: \"Wallet has never had any sol before. Try adding sol first.\",\n  },\n  {\n    code: \"Provided owner is not allowed\",\n    message: \"Token account is already created for this user\",\n  },\n  {\n    code: \"not associated with\",\n    message: \"Account not associated with this mint\",\n  },\n  {\n    code: \"rent-exempt\",\n    message:\n      \"Insufficient funds. User does not have enough sol to complete the transaction\",\n  },\n  // token program errors\n  {\n    code: \"insufficient funds\",\n    message:\n      \"Insufficient funds. User does not have enough balance of token to complete the transaction\",\n  },\n  // token program errors\n  {\n    code: \"0x1\",\n    message:\n      \"Insufficient funds. User does not have enough balance of token to complete the transaction\",\n  },\n  {\n    code: \"0x4\",\n    message:\n      \"Invalid owner. The user is likely not mint authority of this token.\",\n  },\n  {\n    code: \"91\",\n    message: \"Token is not ellgible for original receipts\",\n  },\n  // anchor errors\n  {\n    code: \"100\",\n    message: \"InstructionMissing: 8 byte instruction identifier not provided\",\n  },\n  {\n    code: \"101\",\n    message:\n      \"InstructionFallbackNotFound: Fallback functions are not supported\",\n  },\n  {\n    code: \"102\",\n    message:\n      \"InstructionDidNotDeserialize: The program could not deserialize the given instruction\",\n  },\n  {\n    code: \"103\",\n    message:\n      \"InstructionDidNotSerialize: The program could not serialize the given instruction\",\n  },\n  {\n    code: \"1000\",\n    message:\n      \"IdlInstructionStub: The program was compiled without idl instructions\",\n  },\n  {\n    code: \"1001\",\n    message:\n      \"IdlInstructionInvalidProgram: Invalid program given to the IDL instruction\",\n  },\n  { code: \"2000\", message: \"ConstraintMut: A mut constraint was violated\" },\n  {\n    code: \"2001\",\n    message: \"ConstraintHasOne: A has one constraint was violated\",\n  },\n  {\n    code: \"2002\",\n    message: \"ConstraintSigner: A signer constraint as violated\",\n  },\n  { code: \"2003\", message: \"ConstraintRaw: A raw constraint was violated\" },\n  {\n    code: \"2004\",\n    message: \"ConstraintOwner: An owner constraint was violated\",\n  },\n  {\n    code: \"2005\",\n    message: \"ConstraintRentExempt: A rent exemption constraint was violated\",\n  },\n  {\n    code: \"2006\",\n    message: \"ConstraintSeeds: A seeds constraint was violated\",\n  },\n  {\n    code: \"2007\",\n    message: \"ConstraintExecutable: An executable constraint was violated\",\n  },\n  {\n    code: \"2008\",\n    message: \"ConstraintState: A state constraint was violated\",\n  },\n  {\n    code: \"2009\",\n    message: \"ConstraintAssociated: An associated constraint was violated\",\n  },\n  {\n    code: \"2010\",\n    message:\n      \"ConstraintAssociatedInit: An associated init constraint was violated\",\n  },\n  {\n    code: \"2011\",\n    message: \"ConstraintClose: A close constraint was violated\",\n  },\n  {\n    code: \"2012\",\n    message: \"ConstraintAddress: An address constraint was violated\",\n  },\n  {\n    code: \"2013\",\n    message: \"ConstraintZero: Expected zero account discriminant\",\n  },\n  {\n    code: \"2014\",\n    message: \"ConstraintTokenMint: A token mint constraint was violated\",\n  },\n  {\n    code: \"2015\",\n    message: \"ConstraintTokenOwner: A token owner constraint was violated\",\n  },\n  {\n    code: \"2016\",\n    message:\n      \"ConstraintMintMintAuthority: A mint mint authority constraint was violated\",\n  },\n  {\n    code: \"2017\",\n    message:\n      \"ConstraintMintFreezeAuthority: A mint freeze authority constraint was violated\",\n  },\n  {\n    code: \"2018\",\n    message: \"ConstraintMintDecimals: A mint decimals constraint was violated\",\n  },\n  {\n    code: \"2019\",\n    message: \"ConstraintSpace: A space constraint was violated\",\n  },\n  {\n    code: \"3000\",\n    message:\n      \"AccountDiscriminatorAlreadySet: The account discriminator was already set on this account\",\n  },\n  {\n    code: \"3001\",\n    message:\n      \"AccountDiscriminatorNotFound: No 8 byte discriminator was found on the account\",\n  },\n  {\n    code: \"3002\",\n    message:\n      \"AccountDiscriminatorMismatch: 8 byte discriminator did not match what was expected\",\n  },\n  {\n    code: \"3003\",\n    message: \"AccountDidNotDeserialize: Failed to deserialize the account\",\n  },\n  {\n    code: \"3004\",\n    message: \"AccountDidNotSerialize: Failed to serialize the account\",\n  },\n  {\n    code: \"3005\",\n    message:\n      \"AccountNotEnoughKeys: Not enough account keys given to the instruction\",\n  },\n  {\n    code: \"3006\",\n    message: \"AccountNotMutable: The given account is not mutable\",\n  },\n  {\n    code: \"3007\",\n    message:\n      \"AccountNotProgramOwned: The given account is not owned by the executing program\",\n  },\n  {\n    code: \"3008\",\n    message: \"InvalidProgramId: Program ID was not as expected\",\n  },\n  {\n    code: \"3009\",\n    message: \"InvalidProgramExecutable: Program account is not executable\",\n  },\n  {\n    code: \"3010\",\n    message: \"AccountNotSigner: The given account did not sign\",\n  },\n  {\n    code: \"3011\",\n    message:\n      \"AccountNotSystemOwned: The given account is not owned by the system program\",\n  },\n  {\n    code: \"3012\",\n    message:\n      \"AccountNotInitialized: The program expected this account to be already initialized\",\n  },\n  {\n    code: \"3013\",\n    message:\n      \"AccountNotProgramData: The given account is not a program data account\",\n  },\n  {\n    code: \"3014\",\n    message:\n      \"AccountNotAssociatedTokenAccount: The given account is not the associated token account\",\n  },\n  {\n    code: \"4000\",\n    message:\n      \"StateInvalidAddress: The given state account does not have the correct address\",\n  },\n  {\n    code: \"5000\",\n    message:\n      \"Deprecated: The API being used is deprecated and should no longer be used\",\n  },\n].reverse();\n\nexport type ErrorOptions = {\n  /** ProgramIdls in priority order */\n  programIdls?: { idl: Idl; programId: PublicKey }[];\n  /** Additional errors by code */\n  additionalErrors?: ErrorCode[];\n};\n\nexport const handleError = (\n  e: any,\n  fallBackMessage = \"Transaction failed\",\n  // programIdls in priority order\n  options: ErrorOptions = {\n    programIdls: [\n      { programId: STAKE_POOL_ADDRESS, idl: STAKE_POOL_IDL },\n      { programId: REWARD_DISTRIBUTOR_ADDRESS, idl: REWARD_DISTRIBUTOR_IDL },\n    ],\n    additionalErrors: NATIVE_ERRORS,\n  }\n): string => {\n  const programIdls = options.programIdls ?? [];\n  const additionalErrors = options.additionalErrors ?? [];\n  const hex = (e as SendTransactionError)?.message?.split(\" \").at(-1);\n  const dec = parseInt(hex || \"\", 16);\n  const logs =\n    (e as SendTransactionError)?.logs ?? [\n      (e as SendTransactionError)?.message,\n    ] ?? [(e as Error).toString()] ??\n    [];\n\n  const matchedErrors: { programMatch?: boolean; errorMatch?: string }[] = [\n    ...[\n      ...programIdls.map(({ idl, programId }) => ({\n        // match program on any log that includes programId and 'failed'\n        programMatch: logs?.some(\n          (l) => l?.includes(programId.toString()) && l.includes(\"failed\")\n        ),\n        // match error with decimal\n        errorMatch: idl.errors?.find((err) => err.code === dec)?.msg,\n      })),\n      {\n        // match native error with decimal\n        errorMatch: additionalErrors.find((err) => err.code === dec.toString())\n          ?.message,\n      },\n    ],\n    ...[\n      {\n        programMatch: true,\n        errorMatch: additionalErrors.find(\n          (err) =>\n            // message includes error\n            (e as SendTransactionError)?.message?.includes(err.code) ||\n            // toString includes error\n            (e as Error).toString().includes(err.code) ||\n            // any log includes error\n            (e as SendTransactionError)?.logs?.some((l) =>\n              l.toString().includes(err.code)\n            )\n        )?.message,\n      },\n      ...programIdls.map(({ idl, programId }) => ({\n        // match program on any log that includes programId and 'failed'\n        programMatch: logs?.some(\n          (l) => l?.includes(programId.toString()) && l.includes(\"failed\")\n        ),\n        errorMatch: idl.errors?.find(\n          (err) =>\n            // message includes error\n            (e as SendTransactionError)?.message?.includes(\n              err.code.toString()\n            ) ||\n            // toString includes error\n            (e as Error).toString().includes(err.code.toString()) ||\n            // any log includes error\n            (e as SendTransactionError)?.logs?.some((l) =>\n              l.toString().includes(err.code.toString())\n            )\n        )?.msg,\n      })),\n    ],\n  ];\n\n  return (\n    matchedErrors.find((e) => e.programMatch && e.errorMatch)?.errorMatch ||\n    matchedErrors.find((e) => e.errorMatch)?.errorMatch ||\n    fallBackMessage\n  );\n};\n"]}