{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/rewardDistributor/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findAta,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport type { web3 } from \"@coral-xyz/anchor\";\nimport { BN } from \"@coral-xyz/anchor\";\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport { getRewardDistributor, getRewardEntry } from \"./accounts\";\nimport {\n  REWARD_MANAGER,\n  RewardDistributorKind,\n  rewardDistributorProgram,\n} from \"./constants\";\nimport { findRewardDistributorId, findRewardEntryId } from \"./pda\";\nimport { withRemainingAccountsForKind } from \"./utils\";\n\nexport const withInitRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    rewardMintId: PublicKey;\n    rewardAmount?: BN;\n    rewardDurationSeconds?: BN;\n    kind?: RewardDistributorKind;\n    maxSupply?: BN;\n    supply?: BN;\n    defaultMultiplier?: BN;\n    multiplierDecimals?: number;\n    maxRewardSecondsReceived?: BN;\n  }\n): Promise<[Transaction, web3.PublicKey]> => {\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\n  const remainingAccountsForKind = await withRemainingAccountsForKind(\n    transaction,\n    connection,\n    wallet,\n    rewardDistributorId,\n    params.kind || RewardDistributorKind.Mint,\n    params.rewardMintId\n  );\n  const program = rewardDistributorProgram(connection, wallet);\n  const ix = await program.methods\n    .initRewardDistributor({\n      rewardAmount: params.rewardAmount || new BN(1),\n      rewardDurationSeconds: params.rewardDurationSeconds || new BN(1),\n      maxSupply: params.maxSupply || null,\n      supply: params.supply || null,\n      kind: params.kind || RewardDistributorKind.Mint,\n      defaultMultiplier: params.defaultMultiplier || null,\n      multiplierDecimals: params.multiplierDecimals || null,\n      maxRewardSecondsReceived: params.maxRewardSecondsReceived || null,\n    })\n    .accounts({\n      rewardDistributor: rewardDistributorId,\n      stakePool: params.stakePoolId,\n      rewardMint: params.rewardMintId,\n      authority: wallet.publicKey,\n      payer: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(remainingAccountsForKind)\n    .instruction();\n  transaction.add(ix);\n  return [transaction, rewardDistributorId];\n};\n\nexport const withInitRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: PublicKey;\n    rewardDistributorId: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const rewardEntryId = findRewardEntryId(\n    params.rewardDistributorId,\n    params.stakeEntryId\n  );\n  const program = rewardDistributorProgram(connection, wallet);\n  const ix = await program.methods\n    .initRewardEntry()\n    .accounts({\n      rewardEntry: rewardEntryId,\n      stakeEntry: params.stakeEntryId,\n      rewardDistributor: params.rewardDistributorId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, rewardEntryId];\n};\n\nexport const withClaimRewards = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    lastStaker: PublicKey;\n    payer?: PublicKey;\n    skipRewardMintTokenAccount?: boolean;\n  }\n): Promise<Transaction> => {\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\n  const rewardDistributorData = await tryGetAccount(() =>\n    getRewardDistributor(connection, rewardDistributorId)\n  );\n\n  if (rewardDistributorData) {\n    const rewardMintTokenAccountId = params.skipRewardMintTokenAccount\n      ? await findAta(\n          rewardDistributorData.parsed.rewardMint,\n          params.lastStaker,\n          true\n        )\n      : await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          rewardDistributorData.parsed.rewardMint,\n          params.lastStaker,\n          params.payer ?? wallet.publicKey\n        );\n\n    const remainingAccountsForKind = await withRemainingAccountsForKind(\n      transaction,\n      connection,\n      wallet,\n      rewardDistributorId,\n      rewardDistributorData.parsed.kind,\n      rewardDistributorData.parsed.rewardMint,\n      true\n    );\n\n    const rewardEntryId = findRewardEntryId(\n      rewardDistributorData.pubkey,\n      params.stakeEntryId\n    );\n    const rewardEntryData = await tryGetAccount(() =>\n      getRewardEntry(connection, rewardEntryId)\n    );\n\n    const program = rewardDistributorProgram(connection, wallet);\n    if (!rewardEntryData) {\n      const ix = await program.methods\n        .initRewardEntry()\n        .accounts({\n          rewardEntry: rewardEntryId,\n          stakeEntry: params.stakeEntryId,\n          rewardDistributor: rewardDistributorData.pubkey,\n          payer: wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        })\n        .instruction();\n      transaction.add(ix);\n    }\n\n    const ix = await program.methods\n      .claimRewards()\n      .accounts({\n        rewardEntry: rewardEntryId,\n        rewardDistributor: rewardDistributorData.pubkey,\n        stakeEntry: params.stakeEntryId,\n        stakePool: params.stakePoolId,\n        rewardMint: rewardDistributorData.parsed.rewardMint,\n        userRewardMintTokenAccount: rewardMintTokenAccountId,\n        rewardManager: REWARD_MANAGER,\n        user: params.payer ?? wallet.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n      })\n      .remainingAccounts(remainingAccountsForKind)\n      .instruction();\n    transaction.add(ix);\n  }\n  return transaction;\n};\n\nexport const withCloseRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\n  const rewardDistributorData = await tryGetAccount(() =>\n    getRewardDistributor(connection, rewardDistributorId)\n  );\n\n  if (rewardDistributorData) {\n    const remainingAccountsForKind = await withRemainingAccountsForKind(\n      transaction,\n      connection,\n      wallet,\n      rewardDistributorId,\n      rewardDistributorData.parsed.kind,\n      rewardDistributorData.parsed.rewardMint\n    );\n\n    const program = rewardDistributorProgram(connection, wallet);\n    const ix = await program.methods\n      .closeRewardDistributor()\n      .accounts({\n        rewardDistributor: rewardDistributorData.pubkey,\n        stakePool: params.stakePoolId,\n        rewardMint: rewardDistributorData.parsed.rewardMint,\n        signer: wallet.publicKey,\n        tokenProgram: TOKEN_PROGRAM_ID,\n      })\n      .remainingAccounts(remainingAccountsForKind)\n      .instruction();\n    transaction.add(ix);\n  }\n  return transaction;\n};\n\nexport const withUpdateRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    rewardDistributorId: PublicKey;\n    stakeEntryId: PublicKey;\n    multiplier: BN;\n  }\n): Promise<Transaction> => {\n  const rewardEntryId = findRewardEntryId(\n    params.rewardDistributorId,\n    params.stakeEntryId\n  );\n  const program = rewardDistributorProgram(connection, wallet);\n  const ix = await program.methods\n    .updateRewardEntry({\n      multiplier: params.multiplier,\n    })\n    .accounts({\n      rewardEntry: rewardEntryId,\n      rewardDistributor: params.rewardDistributorId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  return transaction.add(ix);\n};\n\nexport const withCloseRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\n\n  const rewardEntryId = findRewardEntryId(\n    rewardDistributorId,\n    params.stakeEntryId\n  );\n\n  const program = rewardDistributorProgram(connection, wallet);\n  const ix = await program.methods\n    .closeRewardEntry()\n    .accounts({\n      rewardDistributor: rewardDistributorId,\n      rewardEntry: rewardEntryId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withUpdateRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    defaultMultiplier?: BN;\n    multiplierDecimals?: number;\n    rewardAmount?: BN;\n    rewardDurationSeconds?: BN;\n    maxRewardSecondsReceived?: BN;\n  }\n): Promise<Transaction> => {\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\n  const rewardDistributorData = await getRewardDistributor(\n    connection,\n    rewardDistributorId\n  );\n  const program = rewardDistributorProgram(connection, wallet);\n  const ix = await program.methods\n    .updateRewardDistributor({\n      defaultMultiplier:\n        params.defaultMultiplier ||\n        rewardDistributorData.parsed.defaultMultiplier,\n      multiplierDecimals:\n        params.multiplierDecimals ||\n        rewardDistributorData.parsed.multiplierDecimals,\n      rewardAmount:\n        params.rewardAmount || rewardDistributorData.parsed.rewardAmount,\n      rewardDurationSeconds:\n        params.rewardDurationSeconds ||\n        rewardDistributorData.parsed.rewardDurationSeconds,\n      maxRewardSecondsReceived:\n        params.maxRewardSecondsReceived ||\n        rewardDistributorData.parsed.maxRewardSecondsReceived,\n    })\n    .accounts({\n      rewardDistributor: rewardDistributorId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\nexport const withReclaimFunds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakePoolId: PublicKey;\n    amount: BN;\n  }\n): Promise<Transaction> => {\n  const rewardDistributorId = findRewardDistributorId(params.stakePoolId);\n\n  const rewardDistributorData = await tryGetAccount(() =>\n    getRewardDistributor(connection, rewardDistributorId)\n  );\n  if (!rewardDistributorData) {\n    throw new Error(\"No reward distrbutor found\");\n  }\n\n  const rewardDistributorTokenAccountId = await findAta(\n    rewardDistributorData.parsed.rewardMint,\n    rewardDistributorData.pubkey,\n    true\n  );\n\n  const authorityTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    rewardDistributorData.parsed.rewardMint,\n    wallet.publicKey,\n    wallet.publicKey,\n    true\n  );\n\n  const program = rewardDistributorProgram(connection, wallet);\n  const ix = await program.methods\n    .reclaimFunds(params.amount)\n    .accounts({\n      rewardDistributor: rewardDistributorId,\n      rewardDistributorTokenAccount: rewardDistributorTokenAccountId,\n      authorityTokenAccount: authorityTokenAccountId,\n      authority: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n"]}