{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/programs/groupRewardDistributor/utils.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,OAAO,EACP,oCAAoC,GACrC,MAAM,kBAAkB,CAAC;AAS1B,OAAO,EAAE,0BAA0B,EAAE,MAAM,aAAa,CAAC;AAEzD,MAAM,CAAC,MAAM,kCAAkC,GAAG,KAAK,EACrD,WAAwB,EACxB,UAAsB,EACtB,MAAc,EACd,wBAAmC,EACnC,IAAgC,EAChC,UAAqB,EACrB,mBAA6B,EACL,EAAE;IAC1B,QAAQ,IAAI,EAAE;QACZ,KAAK,0BAA0B,CAAC,IAAI,CAAC,CAAC;YACpC,OAAO,EAAE,CAAC;SACX;QACD,KAAK,0BAA0B,CAAC,QAAQ,CAAC,CAAC;YACxC,MAAM,8CAA8C,GAClD,MAAM,oCAAoC,CACxC,WAAW,EACX,UAAU,EACV,UAAU,EACV,wBAAwB,EACxB,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;YACJ,MAAM,iCAAiC,GAAG,MAAM,OAAO,CACrD,UAAU,EACV,MAAM,CAAC,SAAS,EAChB,IAAI,CACL,CAAC;YACF,OAAO;gBACL;oBACE,MAAM,EAAE,8CAA8C;oBACtD,QAAQ,EAAE,KAAK;oBACf,UAAU,EAAE,IAAI;iBACjB;aACF,CAAC,MAAM,CACN,CAAC,mBAAmB;gBAClB,CAAC,CAAC;oBACE;wBACE,MAAM,EAAE,iCAAiC;wBACzC,QAAQ,EAAE,KAAK;wBACf,UAAU,EAAE,IAAI;qBACjB;iBACF;gBACH,CAAC,CAAC,EAAE,CACP,CAAC;SACH;QACD;YACE,OAAO,EAAE,CAAC;KACb;AACH,CAAC,CAAC","sourcesContent":["import {\n  findAta,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport { GroupRewardDistributorKind } from \"./constants\";\n\nexport const withRemainingAccountsForRewardKind = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  groupRewardDistributorId: PublicKey,\n  kind: GroupRewardDistributorKind,\n  rewardMint: PublicKey,\n  isClaimGroupRewards?: boolean\n): Promise<AccountMeta[]> => {\n  switch (kind) {\n    case GroupRewardDistributorKind.Mint: {\n      return [];\n    }\n    case GroupRewardDistributorKind.Treasury: {\n      const rewardDistributorGroupRewardMintTokenAccountId =\n        await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          rewardMint,\n          groupRewardDistributorId,\n          wallet.publicKey,\n          true\n        );\n      const userGroupRewardMintTokenAccountId = await findAta(\n        rewardMint,\n        wallet.publicKey,\n        true\n      );\n      return [\n        {\n          pubkey: rewardDistributorGroupRewardMintTokenAccountId,\n          isSigner: false,\n          isWritable: true,\n        },\n      ].concat(\n        !isClaimGroupRewards\n          ? [\n              {\n                pubkey: userGroupRewardMintTokenAccountId,\n                isSigner: false,\n                isWritable: true,\n              },\n            ]\n          : []\n      );\n    }\n    default:\n      return [];\n  }\n};\n"]}