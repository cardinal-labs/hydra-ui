{"version":3,"file":"instruction.js","sourceRoot":"","sources":["../../../../src/programs/groupRewardDistributor/instruction.ts"],"names":[],"mappings":"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","sourcesContent":["import type { BN } from \"@coral-xyz/anchor\";\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { AccountMeta, Connection, PublicKey } from \"@solana/web3.js\";\nimport { Keypair, SystemProgram, Transaction } from \"@solana/web3.js\";\n\nimport type {\n  GroupRewardDistributorMetadataKind,\n  GroupRewardDistributorPoolKind,\n} from \"./constants\";\nimport {\n  GROUP_REWARD_MANAGER,\n  GroupRewardDistributorKind,\n  groupRewardDistributorProgram,\n} from \"./constants\";\nimport { findGroupRewardDistributorId } from \"./pda\";\nimport { withRemainingAccountsForRewardKind } from \"./utils\";\n\nexport const initGroupRewardDistributor = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    rewardAmount: BN;\n    rewardDurationSeconds: BN;\n    rewardKind: GroupRewardDistributorKind;\n    metadataKind: GroupRewardDistributorMetadataKind;\n    poolKind: GroupRewardDistributorPoolKind;\n    authorizedPools: PublicKey[];\n    authorizedCreators?: PublicKey[];\n    supply?: BN;\n    baseAdder?: BN;\n    baseAdderDecimals?: number;\n    baseMultiplier?: BN;\n    baseMultiplierDecimals?: number;\n    multiplierDecimals?: number;\n    maxSupply?: BN;\n    minCooldownSeconds?: number;\n    minStakeSeconds?: number;\n    groupCountMultiplier?: BN;\n    groupCountMultiplierDecimals?: number;\n    minGroupSize?: number;\n    maxRewardSecondsReceived?: BN;\n\n    rewardMintId: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n  const signers: Keypair[] = [];\n  const id = Keypair.generate();\n  signers.push(id);\n\n  const groupRewardDistributorId = findGroupRewardDistributorId(id.publicKey);\n\n  const transaction = new Transaction();\n\n  const remainingAccountsForKind = await withRemainingAccountsForRewardKind(\n    transaction,\n    connection,\n    wallet,\n    groupRewardDistributorId,\n    params.rewardKind || GroupRewardDistributorKind.Mint,\n    params.rewardMintId\n  );\n\n  const instruction = await program.methods\n    .initGroupRewardDistributor({\n      id: id.publicKey,\n      rewardAmount: params.rewardAmount,\n      rewardDurationSeconds: params.rewardDurationSeconds,\n      rewardKind: params.rewardKind,\n      metadataKind: params.metadataKind,\n      poolKind: params.poolKind,\n      authorizedPools: params.authorizedPools,\n      authorizedCreators: params.authorizedCreators || null,\n      supply: params.supply || null,\n      baseAdder: params.baseAdder || null,\n      baseAdderDecimals: params.baseAdderDecimals || null,\n      baseMultiplier: params.baseMultiplier || null,\n      baseMultiplierDecimals: params.baseMultiplierDecimals || null,\n      multiplierDecimals: params.multiplierDecimals || null,\n      maxSupply: params.maxSupply || null,\n      minCooldownSeconds: params.minCooldownSeconds || null,\n      minStakeSeconds: params.minStakeSeconds || null,\n      groupCountMultiplier: params.groupCountMultiplier || null,\n      groupCountMultiplierDecimals: params.groupCountMultiplierDecimals || null,\n      minGroupSize: params.minGroupSize || null,\n      maxRewardSecondsReceived: params.maxRewardSecondsReceived || null,\n    })\n    .accounts({\n      groupRewardDistributor: groupRewardDistributorId,\n      rewardMint: params.rewardMintId,\n      authority: wallet.publicKey,\n      payer: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(remainingAccountsForKind)\n    .instruction();\n\n  transaction.add(instruction);\n  return [transaction, groupRewardDistributorId];\n};\n\nexport const initGroupRewardCounter = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardCounterId: PublicKey;\n    groupRewardDistributorId: PublicKey;\n    authority?: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n\n  return program.methods\n    .initGroupRewardCounter()\n    .accounts({\n      groupRewardCounter: params.groupRewardCounterId,\n      groupRewardDistributor: params.groupRewardDistributorId,\n      authority: params.authority,\n      systemProgram: SystemProgram.programId,\n    })\n    .transaction();\n};\n\nexport const initGroupRewardEntry = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n    groupRewardDistributorId: PublicKey;\n    groupRewardEntryId: PublicKey;\n    groupRewardCounterId: PublicKey;\n    authority?: PublicKey;\n    stakeEntries: {\n      stakeEntryId: PublicKey;\n      originalMint: PublicKey;\n      originalMintMetadata: PublicKey;\n      rewardEntryId: PublicKey;\n    }[];\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n  const remainingAccounts: AccountMeta[] = [];\n  params.stakeEntries.forEach(\n    ({ stakeEntryId, originalMint, originalMintMetadata, rewardEntryId }) => {\n      remainingAccounts.push(\n        {\n          pubkey: stakeEntryId,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: originalMint,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: originalMintMetadata,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: rewardEntryId,\n          isSigner: false,\n          isWritable: false,\n        }\n      );\n    }\n  );\n\n  return program.methods\n    .initGroupRewardEntry()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      groupRewardDistributor: params.groupRewardDistributorId,\n      groupRewardEntry: params.groupRewardEntryId,\n      groupRewardCounter: params.groupRewardCounterId,\n      authority: params.authority ?? wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(remainingAccounts)\n    .transaction();\n};\n\nexport const claimGroupRewards = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n    groupRewardEntryId: PublicKey;\n    groupRewardDistributorId: PublicKey;\n    groupRewardCounterId: PublicKey;\n    rewardMintId: PublicKey;\n    userRewardMintTokenAccount: PublicKey;\n    remainingAccountsForKind: AccountMeta[];\n    authority?: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n\n  return program.methods\n    .claimGroupRewards()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      groupRewardEntry: params.groupRewardEntryId,\n      groupRewardDistributor: params.groupRewardDistributorId,\n      groupRewardCounter: params.groupRewardCounterId,\n      rewardMint: params.rewardMintId,\n      userRewardMintTokenAccount: params.userRewardMintTokenAccount,\n      rewardManager: GROUP_REWARD_MANAGER,\n      authority: params.authority ?? wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .remainingAccounts(params.remainingAccountsForKind)\n    .transaction();\n};\n\nexport const closeGroupRewardDistributor = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    rewardMintId: PublicKey;\n    remainingAccountsForKind: AccountMeta[];\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n\n  return program.methods\n    .closeGroupRewardDistributor()\n    .accounts({\n      groupRewardDistributor: params.groupRewardDistributorId,\n      rewardMint: params.rewardMintId,\n      authority: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .remainingAccounts(params.remainingAccountsForKind)\n    .transaction();\n};\n\nexport const updateGroupRewardEntry = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    groupRewardEntryId: PublicKey;\n    multiplier: BN;\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n\n  return program.methods\n    .updateGroupRewardEntry({\n      multiplier: params.multiplier,\n    })\n    .accounts({\n      groupRewardDistributor: params.groupRewardDistributorId,\n      groupRewardEntry: params.groupRewardEntryId,\n      authority: wallet.publicKey,\n    })\n    .transaction();\n};\n\nexport const closeGroupRewardEntry = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupEntryId: PublicKey;\n    groupRewardEntryId: PublicKey;\n    groupRewardDistributorId: PublicKey;\n    groupRewardCounterId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n\n  return program.methods\n    .closeGroupRewardEntry()\n    .accounts({\n      groupEntry: params.groupEntryId,\n      groupRewardEntry: params.groupRewardEntryId,\n      authority: wallet.publicKey,\n      groupRewardDistributor: params.groupRewardDistributorId,\n      groupRewardCounter: params.groupRewardCounterId,\n    })\n    .transaction();\n};\n\nexport const closeGroupRewardCounter = async (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardCounterId: PublicKey;\n    groupRewardDistributorId: PublicKey;\n    authority?: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n\n  return program.methods\n    .closeGroupRewardCounter()\n    .accounts({\n      groupRewardCounter: params.groupRewardCounterId,\n      groupRewardDistributor: params.groupRewardDistributorId,\n      authority: params.authority,\n    })\n    .transaction();\n};\n\nexport const updateGroupRewardDistributor = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    rewardAmount: BN;\n    rewardDurationSeconds: BN;\n    metadataKind: GroupRewardDistributorMetadataKind;\n    poolKind: GroupRewardDistributorPoolKind;\n    authorizedPools: PublicKey[];\n    authorizedCreators?: PublicKey[];\n    baseAdder?: BN;\n    baseAdderDecimals?: number;\n    baseMultiplier?: BN;\n    baseMultiplierDecimals?: number;\n    multiplierDecimals?: number;\n    maxSupply?: BN;\n    minCooldownSeconds?: number;\n    minStakeSeconds?: number;\n    groupCountMultiplier?: BN;\n    groupCountMultiplierDecimals?: number;\n    minGroupSize?: number;\n    maxRewardSecondsReceived?: BN;\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n\n  return program.methods\n    .updateGroupRewardDistributor({\n      rewardAmount: params.rewardAmount,\n      rewardDurationSeconds: params.rewardDurationSeconds,\n      metadataKind: params.metadataKind,\n      poolKind: params.poolKind,\n      authorizedPools: params.authorizedPools,\n      authorizedCreators: params.authorizedCreators || null,\n      baseAdder: params.baseAdder || null,\n      baseAdderDecimals: params.baseAdderDecimals || null,\n      baseMultiplier: params.baseMultiplier || null,\n      baseMultiplierDecimals: params.baseMultiplierDecimals || null,\n      multiplierDecimals: params.multiplierDecimals || null,\n      maxSupply: params.maxSupply || null,\n      minCooldownSeconds: params.minCooldownSeconds || null,\n      minStakeSeconds: params.minStakeSeconds || null,\n      groupCountMultiplier: params.groupCountMultiplier || null,\n      groupCountMultiplierDecimals: params.groupCountMultiplierDecimals || null,\n      minGroupSize: params.minGroupSize || null,\n      maxRewardSecondsReceived: params.maxRewardSecondsReceived || null,\n    })\n    .accounts({\n      groupRewardDistributor: params.groupRewardDistributorId,\n      authority: wallet.publicKey,\n    })\n    .transaction();\n};\n\nexport const reclaimGroupFunds = (\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    groupRewardDistributorTokenAccountId: PublicKey;\n    authorityTokenAccountId: PublicKey;\n    authority: PublicKey;\n    amount: BN;\n  }\n): Promise<Transaction> => {\n  const program = groupRewardDistributorProgram(connection, wallet);\n\n  return program.methods\n    .reclaimGroupFunds(params.amount)\n    .accounts({\n      groupRewardDistributor: params.groupRewardDistributorId,\n      groupRewardDistributorTokenAccount:\n        params.groupRewardDistributorTokenAccountId,\n      authorityTokenAccount: params.authorityTokenAccountId,\n      authority: wallet.publicKey,\n      tokenProgram: TOKEN_PROGRAM_ID,\n    })\n    .transaction();\n};\n"]}