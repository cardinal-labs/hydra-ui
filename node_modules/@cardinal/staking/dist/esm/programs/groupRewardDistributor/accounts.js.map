{"version":3,"file":"accounts.js","sourceRoot":"","sources":["../../../../src/programs/groupRewardDistributor/accounts.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountData } from \"@cardinal/common\";\nimport { BorshAccountsCoder, utils } from \"@coral-xyz/anchor\";\nimport type { Commitment, Connection, PublicKey } from \"@solana/web3.js\";\n\nimport {\n  GROUP_REWARD_DISTRIBUTOR_ADDRESS,\n  GROUP_REWARD_DISTRIBUTOR_IDL,\n} from \".\";\nimport type {\n  GroupRewardCounterData,\n  GroupRewardDistributorData,\n  GroupRewardEntryData,\n} from \"./constants\";\nimport { groupRewardDistributorProgram } from \"./constants\";\n\nexport const getGroupRewardCounter = async (\n  connection: Connection,\n  groupRewardCounterId: PublicKey,\n  commitment?: Commitment\n): Promise<AccountData<GroupRewardCounterData>> => {\n  const program = groupRewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const parsed = (await program.account.groupRewardCounter.fetch(\n    groupRewardCounterId\n  )) as GroupRewardCounterData;\n  return {\n    parsed,\n    pubkey: groupRewardCounterId,\n  };\n};\n\nexport const getGroupRewardCounters = async (\n  connection: Connection,\n  groupRewardCounterIds: PublicKey[],\n  commitment?: Commitment\n): Promise<AccountData<GroupRewardCounterData>[]> => {\n  const program = groupRewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const groupRewardCounters =\n    (await program.account.groupRewardCounter.fetchMultiple(\n      groupRewardCounterIds\n    )) as GroupRewardCounterData[];\n  return groupRewardCounters.map((entry, i) => ({\n    parsed: entry,\n    pubkey: groupRewardCounterIds[i]!,\n  }));\n};\n\nexport const getGroupRewardEntry = async (\n  connection: Connection,\n  groupRewardEntryId: PublicKey,\n  commitment?: Commitment\n): Promise<AccountData<GroupRewardEntryData>> => {\n  const program = groupRewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const parsed = (await program.account.groupRewardEntry.fetch(\n    groupRewardEntryId\n  )) as GroupRewardEntryData;\n  return {\n    parsed,\n    pubkey: groupRewardEntryId,\n  };\n};\n\nexport const getGroupRewardEntries = async (\n  connection: Connection,\n  groupRewardEntryIds: PublicKey[],\n  commitment?: Commitment\n): Promise<AccountData<GroupRewardEntryData>[]> => {\n  const program = groupRewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const groupRewardEntries =\n    (await program.account.groupRewardEntry.fetchMultiple(\n      groupRewardEntryIds\n    )) as GroupRewardEntryData[];\n  return groupRewardEntries.map((entry, i) => ({\n    parsed: entry,\n    pubkey: groupRewardEntryIds[i]!,\n  }));\n};\n\nexport const getGroupRewardDistributor = async (\n  connection: Connection,\n  groupRewardDistributorId: PublicKey,\n  commitment?: Commitment\n): Promise<AccountData<GroupRewardDistributorData>> => {\n  const program = groupRewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const parsed = (await program.account.groupRewardDistributor.fetch(\n    groupRewardDistributorId\n  )) as GroupRewardDistributorData;\n  return {\n    parsed,\n    pubkey: groupRewardDistributorId,\n  };\n};\n\nexport const getGroupRewardDistributors = async (\n  connection: Connection,\n  groupRewardDistributorIds: PublicKey[],\n  commitment?: Commitment\n): Promise<AccountData<GroupRewardDistributorData>[]> => {\n  const program = groupRewardDistributorProgram(connection, undefined, {\n    commitment,\n  });\n  const groupRewardDistributors =\n    (await program.account.groupRewardDistributor.fetchMultiple(\n      groupRewardDistributorIds\n    )) as GroupRewardDistributorData[];\n  return groupRewardDistributors.map((distributor, i) => ({\n    parsed: distributor,\n    pubkey: groupRewardDistributorIds[i]!,\n  }));\n};\n\nexport const getGroupRewardEntriesForGroupRewardDistributor = async (\n  connection: Connection,\n  groupRewardDistributorId: PublicKey,\n  commitment?: Commitment\n): Promise<AccountData<GroupRewardEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    GROUP_REWARD_DISTRIBUTOR_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"groupRewardEntry\")\n            ),\n          },\n        },\n        {\n          memcmp: {\n            offset: 8 + 1 + 32,\n            bytes: groupRewardDistributorId.toBase58(),\n          },\n        },\n      ],\n      commitment,\n    }\n  );\n  const groupRewardEntryDatas: AccountData<GroupRewardEntryData>[] = [];\n  const coder = new BorshAccountsCoder(GROUP_REWARD_DISTRIBUTOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const groupRewardEntryData: GroupRewardEntryData = coder.decode(\n        \"groupRewardEntry\",\n        account.account.data\n      );\n      if (groupRewardEntryData) {\n        groupRewardEntryDatas.push({\n          ...account,\n          parsed: groupRewardEntryData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return groupRewardEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n\nexport const getAllGroupRewardEntries = async (\n  connection: Connection,\n  commitment?: Commitment\n): Promise<AccountData<GroupRewardEntryData>[]> => {\n  const programAccounts = await connection.getProgramAccounts(\n    GROUP_REWARD_DISTRIBUTOR_ADDRESS,\n    {\n      filters: [\n        {\n          memcmp: {\n            offset: 0,\n            bytes: utils.bytes.bs58.encode(\n              BorshAccountsCoder.accountDiscriminator(\"groupRewardEntry\")\n            ),\n          },\n        },\n      ],\n      commitment,\n    }\n  );\n  const groupRewardEntryDatas: AccountData<GroupRewardEntryData>[] = [];\n  const coder = new BorshAccountsCoder(GROUP_REWARD_DISTRIBUTOR_IDL);\n  programAccounts.forEach((account) => {\n    try {\n      const groupRewardEntryData: GroupRewardEntryData = coder.decode(\n        \"groupRewardEntry\",\n        account.account.data\n      );\n      if (groupRewardEntryData) {\n        groupRewardEntryDatas.push({\n          ...account,\n          parsed: groupRewardEntryData,\n        });\n      }\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  });\n  return groupRewardEntryDatas.sort((a, b) =>\n    a.pubkey.toBase58().localeCompare(b.pubkey.toBase58())\n  );\n};\n"]}