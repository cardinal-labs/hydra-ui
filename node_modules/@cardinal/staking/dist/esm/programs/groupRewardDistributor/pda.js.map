{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/groupRewardDistributor/pda.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EACL,yBAAyB,EACzB,gCAAgC,EAChC,6BAA6B,EAC7B,uBAAuB,GACxB,MAAM,aAAa,CAAC;AAErB;;;GAGG;AACH,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,wBAAmC,EACnC,YAAuB,EACvB,EAAE;IACF,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC;QAChD,wBAAwB,CAAC,QAAQ,EAAE;QACnC,YAAY,CAAC,QAAQ,EAAE;KACxB,EACD,gCAAgC,CACjC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,wBAAmC,EACnC,SAAoB,EACpB,EAAE;IACF,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,yBAAyB,CAAC;QAClD,wBAAwB,CAAC,QAAQ,EAAE;QACnC,SAAS,CAAC,QAAQ,EAAE;KACrB,EACD,gCAAgC,CACjC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,EAAa,EAAE,EAAE;IAC5D,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,6BAA6B,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE,CAAC,EACvE,gCAAgC,CACjC,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { utils } from \"@coral-xyz/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  GROUP_REWARD_COUNTER_SEED,\n  GROUP_REWARD_DISTRIBUTOR_ADDRESS,\n  GROUP_REWARD_DISTRIBUTOR_SEED,\n  GROUP_REWARD_ENTRY_SEED,\n} from \"./constants\";\n\n/**\n * Finds the group reward entry id.\n * @returns\n */\nexport const findGroupRewardEntryId = (\n  groupRewardDistributorId: PublicKey,\n  groupEntryId: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(GROUP_REWARD_ENTRY_SEED),\n      groupRewardDistributorId.toBuffer(),\n      groupEntryId.toBuffer(),\n    ],\n    GROUP_REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the group reward entry id.\n * @returns\n */\nexport const findGroupRewardCounterId = (\n  groupRewardDistributorId: PublicKey,\n  authority: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(GROUP_REWARD_COUNTER_SEED),\n      groupRewardDistributorId.toBuffer(),\n      authority.toBuffer(),\n    ],\n    GROUP_REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the group reward distributor id.\n * @returns\n */\nexport const findGroupRewardDistributorId = (id: PublicKey) => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(GROUP_REWARD_DISTRIBUTOR_SEED), id.toBuffer()],\n    GROUP_REWARD_DISTRIBUTOR_ADDRESS\n  )[0];\n};\n"]}