{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/groupRewardDistributor/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  findAta,\n  findMintMetadataId,\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport type { web3 } from \"@coral-xyz/anchor\";\nimport { BN } from \"@coral-xyz/anchor\";\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\n\nimport { findRewardEntryId } from \"../rewardDistributor/pda\";\nimport { getGroupRewardCounter, getGroupRewardDistributor } from \"./accounts\";\nimport {\n  GroupRewardDistributorKind,\n  GroupRewardDistributorMetadataKind,\n  GroupRewardDistributorPoolKind,\n  toGroupRewardDistributorKind,\n} from \"./constants\";\nimport {\n  claimGroupRewards,\n  closeGroupRewardCounter,\n  closeGroupRewardDistributor,\n  closeGroupRewardEntry,\n  initGroupRewardCounter,\n  initGroupRewardDistributor,\n  initGroupRewardEntry,\n  reclaimGroupFunds,\n  updateGroupRewardDistributor,\n  updateGroupRewardEntry,\n} from \"./instruction\";\nimport { findGroupRewardCounterId, findGroupRewardEntryId } from \"./pda\";\nimport { withRemainingAccountsForRewardKind } from \"./utils\";\n\nexport const withInitGroupRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    rewardMintId: PublicKey;\n    authorizedPools: PublicKey[];\n    authorizedCreators?: PublicKey[];\n    rewardAmount?: BN;\n    rewardDurationSeconds?: BN;\n    rewardKind?: GroupRewardDistributorKind;\n    poolKind?: GroupRewardDistributorPoolKind;\n    metadataKind?: GroupRewardDistributorMetadataKind;\n    supply?: BN;\n    baseAdder?: BN;\n    baseAdderDecimals?: number;\n    baseMultiplier?: BN;\n    baseMultiplierDecimals?: number;\n    multiplierDecimals?: number;\n    maxSupply?: BN;\n    minCooldownSeconds?: number;\n    minStakeSeconds?: number;\n    groupCountMultiplier?: BN;\n    groupCountMultiplierDecimals?: number;\n    minGroupSize?: number;\n    maxRewardSecondsReceived?: BN;\n  }\n): Promise<[Transaction, web3.PublicKey]> => {\n  const [tx, groupRewardDistributorId] = await initGroupRewardDistributor(\n    connection,\n    wallet,\n    {\n      rewardAmount: params.rewardAmount || new BN(1),\n      rewardDurationSeconds: params.rewardDurationSeconds || new BN(1),\n      rewardKind: params.rewardKind || GroupRewardDistributorKind.Mint,\n      metadataKind:\n        params.metadataKind || GroupRewardDistributorMetadataKind.NoRestriction,\n      poolKind: params.poolKind || GroupRewardDistributorPoolKind.NoRestriction,\n      authorizedPools: params.authorizedPools,\n      authorizedCreators: params.authorizedCreators,\n      supply: params.supply,\n      baseAdder: params.baseAdder,\n      baseAdderDecimals: params.baseAdderDecimals,\n      baseMultiplier: params.baseMultiplier,\n      baseMultiplierDecimals: params.baseMultiplierDecimals,\n      multiplierDecimals: params.multiplierDecimals,\n      maxSupply: params.maxSupply,\n      minCooldownSeconds: params.minCooldownSeconds,\n      minStakeSeconds: params.minStakeSeconds,\n      groupCountMultiplier: params.groupCountMultiplier,\n      groupCountMultiplierDecimals: params.groupCountMultiplierDecimals,\n      minGroupSize: params.minGroupSize,\n      maxRewardSecondsReceived: params.maxRewardSecondsReceived,\n\n      rewardMintId: params.rewardMintId,\n    }\n  );\n  transaction.add(tx);\n  return [transaction, groupRewardDistributorId];\n};\n\nexport const withInitGroupRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    groupEntryId: PublicKey;\n    stakeEntries: {\n      stakeEntryId: PublicKey;\n      originalMint: PublicKey;\n      rewardDistributorId: PublicKey;\n    }[];\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const groupRewardEntryId = findGroupRewardEntryId(\n    params.groupRewardDistributorId,\n    params.groupEntryId\n  );\n  const groupRewardCounterId = findGroupRewardCounterId(\n    params.groupRewardDistributorId,\n    wallet.publicKey\n  );\n  const groupRewardCounter = await tryGetAccount(() =>\n    getGroupRewardCounter(connection, groupRewardCounterId)\n  );\n  if (!groupRewardCounter) {\n    transaction.add(\n      await initGroupRewardCounter(connection, wallet, {\n        groupRewardCounterId,\n        groupRewardDistributorId: params.groupRewardDistributorId,\n        authority: wallet.publicKey,\n      })\n    );\n  }\n\n  const stakeEntries = params.stakeEntries.map(\n    ({ stakeEntryId, originalMint, rewardDistributorId }) => {\n      const rewardEntryId = findRewardEntryId(\n        rewardDistributorId,\n        stakeEntryId\n      );\n      const originalMintMetadata = findMintMetadataId(originalMint);\n      return {\n        stakeEntryId,\n        originalMint,\n        originalMintMetadata,\n        rewardEntryId,\n      };\n    }\n  );\n\n  transaction.add(\n    await initGroupRewardEntry(connection, wallet, {\n      groupRewardDistributorId: params.groupRewardDistributorId,\n      groupEntryId: params.groupEntryId,\n      groupRewardCounterId,\n      groupRewardEntryId,\n      stakeEntries,\n    })\n  );\n  return [transaction, groupRewardEntryId];\n};\n\nexport const withClaimGroupRewards = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    groupEntryId: PublicKey;\n    skipGroupRewardMintTokenAccount?: boolean;\n  }\n): Promise<Transaction> => {\n  const groupRewardDistributorData = await tryGetAccount(() =>\n    getGroupRewardDistributor(connection, params.groupRewardDistributorId)\n  );\n\n  if (groupRewardDistributorData) {\n    const userRewardMintTokenAccount = params.skipGroupRewardMintTokenAccount\n      ? await findAta(\n          groupRewardDistributorData.parsed.rewardMint,\n          wallet.publicKey,\n          true\n        )\n      : await withFindOrInitAssociatedTokenAccount(\n          transaction,\n          connection,\n          groupRewardDistributorData.parsed.rewardMint,\n          wallet.publicKey,\n          wallet.publicKey\n        );\n\n    const remainingAccountsForKind = await withRemainingAccountsForRewardKind(\n      transaction,\n      connection,\n      wallet,\n      groupRewardDistributorData.pubkey,\n      toGroupRewardDistributorKind(\n        groupRewardDistributorData.parsed.rewardKind\n      ),\n      groupRewardDistributorData.parsed.rewardMint,\n      true\n    );\n\n    const groupRewardEntryId = findGroupRewardEntryId(\n      groupRewardDistributorData.pubkey,\n      params.groupEntryId\n    );\n    const groupRewardCounterId = findGroupRewardCounterId(\n      groupRewardDistributorData.pubkey,\n      wallet.publicKey\n    );\n    transaction.add(\n      await claimGroupRewards(connection, wallet, {\n        groupEntryId: params.groupEntryId,\n        groupRewardDistributorId: params.groupRewardDistributorId,\n        groupRewardEntryId,\n        groupRewardCounterId,\n        userRewardMintTokenAccount,\n        authority: wallet.publicKey,\n        rewardMintId: groupRewardDistributorData.parsed.rewardMint,\n        remainingAccountsForKind,\n      })\n    );\n  }\n  return transaction;\n};\n\nexport const withCloseGroupRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const groupRewardDistributorData = await tryGetAccount(() =>\n    getGroupRewardDistributor(connection, params.groupRewardDistributorId)\n  );\n\n  if (groupRewardDistributorData) {\n    const remainingAccountsForKind = await withRemainingAccountsForRewardKind(\n      transaction,\n      connection,\n      wallet,\n      groupRewardDistributorData.pubkey,\n      toGroupRewardDistributorKind(\n        groupRewardDistributorData.parsed.rewardKind\n      ),\n      groupRewardDistributorData.parsed.rewardMint\n    );\n\n    transaction.add(\n      await closeGroupRewardDistributor(connection, wallet, {\n        groupRewardDistributorId: params.groupRewardDistributorId,\n        rewardMintId: groupRewardDistributorData.parsed.rewardMint,\n        remainingAccountsForKind,\n      })\n    );\n  }\n  return transaction;\n};\n\nexport const withUpdateGroupRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    groupRewardEntryId: PublicKey;\n    multiplier: BN;\n  }\n): Promise<Transaction> => {\n  return transaction.add(\n    await updateGroupRewardEntry(connection, wallet, {\n      groupRewardDistributorId: params.groupRewardDistributorId,\n      groupRewardEntryId: params.groupRewardEntryId,\n      multiplier: params.multiplier,\n    })\n  );\n};\n\nexport const withCloseGroupRewardEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    groupEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const groupRewardEntryId = findGroupRewardEntryId(\n    params.groupRewardDistributorId,\n    params.groupEntryId\n  );\n  const groupRewardCounterId = findGroupRewardCounterId(\n    params.groupRewardDistributorId,\n    wallet.publicKey\n  );\n  return transaction.add(\n    await closeGroupRewardEntry(connection, wallet, {\n      groupEntryId: params.groupEntryId,\n      groupRewardDistributorId: params.groupRewardDistributorId,\n      groupRewardEntryId,\n      groupRewardCounterId,\n    })\n  );\n};\n\nexport const withUpdateGroupRewardDistributor = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    authorizedPools: PublicKey[];\n    authorizedCreators?: PublicKey[];\n    rewardAmount?: BN;\n    rewardDurationSeconds?: BN;\n    poolKind?: GroupRewardDistributorPoolKind;\n    metadataKind?: GroupRewardDistributorMetadataKind;\n    baseAdder?: BN;\n    baseAdderDecimals?: number;\n    baseMultiplier?: BN;\n    baseMultiplierDecimals?: number;\n    multiplierDecimals?: number;\n    maxSupply?: BN;\n    minCooldownSeconds?: number;\n    minStakeSeconds?: number;\n    groupCountMultiplier?: BN;\n    groupCountMultiplierDecimals?: number;\n    minGroupSize?: number;\n    maxRewardSecondsReceived?: BN;\n  }\n): Promise<Transaction> => {\n  return transaction.add(\n    await updateGroupRewardDistributor(connection, wallet, {\n      groupRewardDistributorId: params.groupRewardDistributorId,\n      rewardAmount: params.rewardAmount || new BN(1),\n      rewardDurationSeconds: params.rewardDurationSeconds || new BN(1),\n      metadataKind:\n        params.metadataKind || GroupRewardDistributorMetadataKind.NoRestriction,\n      poolKind: params.poolKind || GroupRewardDistributorPoolKind.NoRestriction,\n      authorizedPools: params.authorizedPools,\n      authorizedCreators: params.authorizedCreators,\n      baseAdder: params.baseAdder,\n      baseAdderDecimals: params.baseAdderDecimals,\n      baseMultiplier: params.baseMultiplier,\n      baseMultiplierDecimals: params.baseMultiplierDecimals,\n      multiplierDecimals: params.multiplierDecimals,\n      maxSupply: params.maxSupply,\n      minCooldownSeconds: params.minCooldownSeconds,\n      minStakeSeconds: params.minStakeSeconds,\n      groupCountMultiplier: params.groupCountMultiplier,\n      groupCountMultiplierDecimals: params.groupCountMultiplierDecimals,\n      minGroupSize: params.minGroupSize,\n      maxRewardSecondsReceived: params.maxRewardSecondsReceived,\n    })\n  );\n};\n\nexport const withReclaimGroupFunds = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    amount: BN;\n  }\n): Promise<Transaction> => {\n  const groupRewardDistributorData = await tryGetAccount(() =>\n    getGroupRewardDistributor(connection, params.groupRewardDistributorId)\n  );\n  if (!groupRewardDistributorData) {\n    throw new Error(\"No reward distrbutor found\");\n  }\n\n  const groupRewardDistributorTokenAccountId = await findAta(\n    groupRewardDistributorData.parsed.rewardMint,\n    groupRewardDistributorData.pubkey,\n    true\n  );\n\n  const authorityTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    groupRewardDistributorData.parsed.rewardMint,\n    wallet.publicKey,\n    wallet.publicKey,\n    true\n  );\n\n  return transaction.add(\n    await reclaimGroupFunds(connection, wallet, {\n      groupRewardDistributorId: params.groupRewardDistributorId,\n      groupRewardDistributorTokenAccountId,\n      authorityTokenAccountId,\n      authority: wallet.publicKey,\n      amount: params.amount,\n    })\n  );\n};\n\nexport const withCloseGroupRewardCounter = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    groupRewardDistributorId: PublicKey;\n    groupEntryId: PublicKey;\n    stakeEntries: {\n      stakeEntryId: PublicKey;\n      originalMint: PublicKey;\n    }[];\n  }\n): Promise<[Transaction]> => {\n  const groupRewardCounterId = findGroupRewardCounterId(\n    params.groupRewardDistributorId,\n    wallet.publicKey\n  );\n\n  transaction.add(\n    await closeGroupRewardCounter(connection, wallet, {\n      groupRewardDistributorId: params.groupRewardDistributorId,\n      groupRewardCounterId,\n      authority: wallet.publicKey,\n    })\n  );\n  return [transaction];\n};\n"]}