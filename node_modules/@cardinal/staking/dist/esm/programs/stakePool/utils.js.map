{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../src/programs/stakePool/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import type { ParsedIdlAccountData } from \"@cardinal/common\";\nimport { withFindOrInitAssociatedTokenAccount } from \"@cardinal/common\";\nimport { AnchorProvider, BN, Program } from \"@coral-xyz/anchor\";\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport type {\n  AccountMeta,\n  Connection,\n  PublicKey,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport type { CardinalStakePool } from \"../../idl/cardinal_stake_pool\";\nimport { getMintSupply } from \"../../utils\";\nimport type { REWARD_DISTRIBUTOR_PROGRAM } from \"../rewardDistributor\";\nimport {\n  REWARD_DISTRIBUTOR_ADDRESS,\n  REWARD_DISTRIBUTOR_IDL,\n} from \"../rewardDistributor\";\nimport { findRewardDistributorId } from \"../rewardDistributor/pda\";\nimport type { STAKE_POOL_PROGRAM } from \".\";\nimport { STAKE_POOL_ADDRESS, STAKE_POOL_IDL } from \".\";\nimport { findStakeAuthorizationId, findStakeEntryId } from \"./pda\";\n\nexport const remainingAccountsForInitStakeEntry = (\n  stakePoolId: PublicKey,\n  originalMintId: PublicKey\n): AccountMeta[] => {\n  const stakeAuthorizationRecordId = findStakeAuthorizationId(\n    stakePoolId,\n    originalMintId\n  );\n  return [\n    {\n      pubkey: stakeAuthorizationRecordId,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n};\n\nexport const withRemainingAccountsForUnstake = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  stakeEntryId: PublicKey,\n  receiptMint: PublicKey | null | undefined\n): Promise<AccountMeta[]> => {\n  if (receiptMint) {\n    const stakeEntryReceiptMintTokenAccount =\n      await withFindOrInitAssociatedTokenAccount(\n        transaction,\n        connection,\n        receiptMint,\n        stakeEntryId,\n        wallet.publicKey,\n        true\n      );\n    return [\n      {\n        pubkey: stakeEntryReceiptMintTokenAccount,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n  } else {\n    return [];\n  }\n};\n\n/**\n * Convenience method to find the stake entry id from a mint\n * NOTE: This will lookup the mint on-chain to get the supply\n * @returns\n */\nexport const findStakeEntryIdFromMint = async (\n  connection: Connection,\n  wallet: PublicKey,\n  stakePoolId: PublicKey,\n  originalMintId: PublicKey,\n  isFungible?: boolean\n): Promise<PublicKey> => {\n  if (isFungible === undefined) {\n    const supply = await getMintSupply(connection, originalMintId);\n    isFungible = supply.gt(new BN(1));\n  }\n  return findStakeEntryId(wallet, stakePoolId, originalMintId, isFungible);\n};\n\nexport const getTotalStakeSeconds = async (\n  connection: Connection,\n  stakeEntryId: PublicKey\n): Promise<BN> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  const parsed = await stakePoolProgram.account.stakeEntry.fetch(stakeEntryId);\n  return parsed.totalStakeSeconds;\n};\n\nexport const getActiveStakeSeconds = async (\n  connection: Connection,\n  stakeEntryId: PublicKey\n): Promise<BN> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const stakePoolProgram = new Program<STAKE_POOL_PROGRAM>(\n    STAKE_POOL_IDL,\n    STAKE_POOL_ADDRESS,\n    provider\n  );\n  const parsed = await stakePoolProgram.account.stakeEntry.fetch(stakeEntryId);\n\n  const UTCNow = Math.floor(Date.now() / 1000);\n  const lastStakedAt = parsed.lastStakedAt.toNumber() || UTCNow;\n  return parsed.lastStaker ? new BN(UTCNow - lastStakedAt) : new BN(0);\n};\n\nexport const getUnclaimedRewards = async (\n  connection: Connection,\n  stakePoolId: PublicKey\n): Promise<BN> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const rewardDistributor = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const rewardDistributorId = findRewardDistributorId(stakePoolId);\n  const parsed = await rewardDistributor.account.rewardDistributor.fetch(\n    rewardDistributorId\n  );\n  return parsed.maxSupply\n    ? new BN(parsed.maxSupply?.toNumber() - parsed.rewardsIssued.toNumber())\n    : new BN(0);\n};\n\nexport const getClaimedRewards = async (\n  connection: Connection,\n  stakePoolId: PublicKey\n): Promise<BN> => {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const provider = new AnchorProvider(connection, null, {});\n  const rewardDistributor = new Program<REWARD_DISTRIBUTOR_PROGRAM>(\n    REWARD_DISTRIBUTOR_IDL,\n    REWARD_DISTRIBUTOR_ADDRESS,\n    provider\n  );\n\n  const rewardDistributorId = findRewardDistributorId(stakePoolId);\n  const parsed = await rewardDistributor.account.rewardDistributor.fetch(\n    rewardDistributorId\n  );\n  return parsed.rewardsIssued;\n};\n\nexport const shouldReturnReceipt = (\n  stakePoolData: ParsedIdlAccountData<\"stakePool\", CardinalStakePool>,\n  stakeEntryData: ParsedIdlAccountData<\"stakeEntry\", CardinalStakePool>\n): boolean =>\n  // no cooldown\n  !stakePoolData.cooldownSeconds ||\n  stakePoolData.cooldownSeconds === 0 ||\n  (!!stakeEntryData?.cooldownStartSeconds &&\n    Date.now() / 1000 - stakeEntryData.cooldownStartSeconds.toNumber() >=\n      stakePoolData.cooldownSeconds);\n"]}