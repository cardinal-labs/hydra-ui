{"version":3,"file":"transaction.js","sourceRoot":"","sources":["../../../../src/programs/receiptManager/transaction.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  tryGetAccount,\n  withFindOrInitAssociatedTokenAccount,\n} from \"@cardinal/common\";\nimport { PAYMENT_MANAGER_ADDRESS } from \"@cardinal/payment-manager\";\nimport { getPaymentManager } from \"@cardinal/payment-manager/dist/cjs/accounts\";\nimport type { BN } from \"@coral-xyz/anchor\";\nimport type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\nimport type { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { SystemProgram } from \"@solana/web3.js\";\n\nimport { withUpdateTotalStakeSeconds } from \"../stakePool/transaction\";\nimport { getReceiptManager } from \"./accounts\";\nimport {\n  RECEIPT_MANAGER_PAYMENT_MANAGER,\n  receiptManagerProgram,\n} from \"./constants\";\nimport {\n  findReceiptEntryId,\n  findReceiptManagerId,\n  findRewardReceiptId,\n} from \"./pda\";\n\nexport const withInitReceiptManager = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    name: string;\n    stakePoolId: PublicKey;\n    authority: PublicKey;\n    requiredStakeSeconds: BN;\n    stakeSecondsToUse: BN;\n    paymentMint: PublicKey;\n    paymentManagerId?: PublicKey;\n    paymentRecipientId: PublicKey;\n    requiresAuthorization: boolean;\n    maxClaimedReceipts?: BN;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const receiptManagerId = findReceiptManagerId(\n    params.stakePoolId,\n    params.name\n  );\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .initReceiptManager({\n      name: params.name,\n      authority: params.authority,\n      requiredStakeSeconds: params.requiredStakeSeconds,\n      stakeSecondsToUse: params.stakeSecondsToUse,\n      paymentMint: params.paymentMint,\n      paymentManager:\n        params.paymentManagerId || RECEIPT_MANAGER_PAYMENT_MANAGER,\n      paymentRecipient: params.paymentRecipientId,\n      requiresAuthorization: params.requiresAuthorization,\n      maxClaimedReceipts: params.maxClaimedReceipts ?? null,\n    })\n    .accounts({\n      receiptManager: receiptManagerId,\n      stakePool: params.stakePoolId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, receiptManagerId];\n};\n\nexport const withInitReceiptEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    stakeEntryId: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const receiptEntryId = findReceiptEntryId(params.stakeEntryId);\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .initReceiptEntry()\n    .accounts({\n      receiptEntry: receiptEntryId,\n      stakeEntry: params.stakeEntryId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, receiptEntryId];\n};\n\nexport const withInitRewardReceipt = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    receiptManagerId: PublicKey;\n    receiptEntryId: PublicKey;\n    stakeEntryId: PublicKey;\n    payer?: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const rewardReceiptId = findRewardReceiptId(\n    params.receiptManagerId,\n    params.receiptEntryId\n  );\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .initRewardReceipt()\n    .accounts({\n      rewardReceipt: rewardReceiptId,\n      receiptManager: params.receiptManagerId,\n      receiptEntry: params.receiptEntryId,\n      stakeEntry: params.stakeEntryId,\n      payer: wallet.publicKey,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, rewardReceiptId];\n};\n\nexport const withUpdateReceiptManager = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    name: string;\n    stakePoolId: PublicKey;\n    authority: PublicKey;\n    requiredStakeSeconds: BN;\n    stakeSecondsToUse: BN;\n    paymentMint: PublicKey;\n    paymentManagerId?: PublicKey;\n    paymentRecipientId: PublicKey;\n    requiresAuthorization: boolean;\n    maxClaimedReceipts?: BN;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const receiptManagerId = findReceiptManagerId(\n    params.stakePoolId,\n    params.name\n  );\n  const receiptManagerData = await getReceiptManager(\n    connection,\n    receiptManagerId\n  );\n\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .updateReceiptManager({\n      authority: params.authority || receiptManagerData.parsed.authority,\n      requiredStakeSeconds:\n        params.requiredStakeSeconds ||\n        receiptManagerData.parsed.requiredStakeSeconds,\n      stakeSecondsToUse:\n        params.stakeSecondsToUse || receiptManagerData.parsed.stakeSecondsToUse,\n      paymentMint: params.paymentMint || receiptManagerData.parsed.paymentMint,\n      paymentManager:\n        params.paymentManagerId || receiptManagerData.parsed.paymentManager,\n      paymentRecipient:\n        params.paymentRecipientId || receiptManagerData.parsed.paymentRecipient,\n      requiresAuthorization:\n        params.requiresAuthorization ||\n        receiptManagerData.parsed.requiresAuthorization,\n      maxClaimedReceipts:\n        params.maxClaimedReceipts ||\n        receiptManagerData.parsed.maxClaimedReceipts,\n    })\n    .accounts({\n      receiptManager: receiptManagerId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, receiptManagerId];\n};\n\nexport const withClaimRewardReceipt = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    receiptManagerName: string;\n    stakePoolId: PublicKey;\n    stakeEntryId: PublicKey;\n    claimer: PublicKey;\n    payer: PublicKey;\n  }\n): Promise<[Transaction, PublicKey]> => {\n  const receiptManagerId = findReceiptManagerId(\n    params.stakePoolId,\n    params.receiptManagerName\n  );\n  const checkReceiptManager = await tryGetAccount(() =>\n    getReceiptManager(connection, receiptManagerId)\n  );\n  if (!checkReceiptManager) {\n    throw `No reward receipt manager found with name ${\n      params.receiptManagerName\n    } for pool ${params.stakePoolId.toString()}`;\n  }\n  const receiptEntryId = findReceiptEntryId(params.stakeEntryId);\n  const rewardReceiptId = findRewardReceiptId(receiptManagerId, receiptEntryId);\n\n  const checkPaymentManager = await tryGetAccount(() =>\n    getPaymentManager(connection, checkReceiptManager.parsed.paymentManager)\n  );\n  if (!checkPaymentManager) {\n    throw `Could not find payment manager with address ${checkReceiptManager.parsed.paymentManager.toString()}`;\n  }\n\n  const feeCollectorTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    checkReceiptManager.parsed.paymentMint,\n    checkPaymentManager.parsed.feeCollector,\n    wallet.publicKey\n  );\n  const paymentRecipientTokenAccountId =\n    await withFindOrInitAssociatedTokenAccount(\n      transaction,\n      connection,\n      checkReceiptManager.parsed.paymentMint,\n      checkReceiptManager.parsed.paymentRecipient,\n      params.payer ?? wallet.publicKey\n    );\n  const payerTokenAccountId = await withFindOrInitAssociatedTokenAccount(\n    transaction,\n    connection,\n    checkReceiptManager.parsed.paymentMint,\n    params.payer,\n    wallet.publicKey\n  );\n\n  await withUpdateTotalStakeSeconds(transaction, connection, wallet, {\n    stakeEntryId: params.stakeEntryId,\n    lastStaker: params.claimer,\n  });\n\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .claimRewardReceipt()\n    .accounts({\n      rewardReceipt: rewardReceiptId,\n      receiptManager: receiptManagerId,\n      stakeEntry: params.stakeEntryId,\n      receiptEntry: receiptEntryId,\n      paymentManager: checkReceiptManager.parsed.paymentManager,\n      feeCollectorTokenAccount: feeCollectorTokenAccountId,\n      paymentRecipientTokenAccount: paymentRecipientTokenAccountId,\n      payerTokenAccount: payerTokenAccountId,\n      payer: wallet.publicKey,\n      claimer: params.claimer,\n      cardinalPaymentManager: PAYMENT_MANAGER_ADDRESS,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: SystemProgram.programId,\n    })\n    .instruction();\n  transaction.add(ix);\n  return [transaction, rewardReceiptId];\n};\n\nexport const withCloseReceiptManager = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    receiptManagerId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .closeReceiptManager()\n    .accounts({\n      receiptManager: params.receiptManagerId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withCloseReceiptEntry = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    receiptManagerId: PublicKey;\n    receiptEntryId: PublicKey;\n    stakeEntryId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .closeReceiptEntry()\n    .accounts({\n      receiptEntry: params.receiptEntryId,\n      receiptManager: params.receiptManagerId,\n      stakeEntry: params.stakeEntryId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withCloseRewardReceipt = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    receiptManagerId: PublicKey;\n    rewardReceiptId: PublicKey;\n  }\n): Promise<Transaction> => {\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .closeRewardReceipt()\n    .accounts({\n      rewardReceipt: params.rewardReceiptId,\n      receiptManager: params.receiptManagerId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n\nexport const withSetRewardReceiptAllowed = async (\n  transaction: Transaction,\n  connection: Connection,\n  wallet: Wallet,\n  params: {\n    receiptManagerId: PublicKey;\n    rewardReceiptId: PublicKey;\n    auth: boolean;\n  }\n): Promise<Transaction> => {\n  const program = receiptManagerProgram(connection, wallet);\n  const ix = await program.methods\n    .setRewardReceiptAllowed(params.auth)\n    .accounts({\n      receiptManager: params.receiptManagerId,\n      rewardReceipt: params.rewardReceiptId,\n      authority: wallet.publicKey,\n    })\n    .instruction();\n  transaction.add(ix);\n  return transaction;\n};\n"]}