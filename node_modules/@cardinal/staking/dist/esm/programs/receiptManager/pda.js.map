{"version":3,"file":"pda.js","sourceRoot":"","sources":["../../../../src/programs/receiptManager/pda.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAC1C,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,OAAO,EACL,kBAAkB,EAClB,uBAAuB,EACvB,oBAAoB,EACpB,mBAAmB,GACpB,MAAM,GAAG,CAAC;AAEX;;;GAGG;AACH,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,WAAsB,EAAE,IAAY,EAAE,EAAE;IAC3E,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;QAC7C,WAAW,CAAC,QAAQ,EAAE;QACtB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;KAC9B,EACD,uBAAuB,CACxB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,UAAqB,EAAE,EAAE;IAC1D,OAAO,SAAS,CAAC,sBAAsB,CACrC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,EACpE,uBAAuB,CACxB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,cAAyB,EACzB,YAAuB,EACvB,EAAE;IACF,OAAO,SAAS,CAAC,sBAAsB,CACrC;QACE,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,mBAAmB,CAAC;QAC5C,cAAc,CAAC,QAAQ,EAAE;QACzB,YAAY,CAAC,QAAQ,EAAE;KACxB,EACD,uBAAuB,CACxB,CAAC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC","sourcesContent":["import { utils } from \"@coral-xyz/anchor\";\nimport { PublicKey } from \"@solana/web3.js\";\n\nimport {\n  RECEIPT_ENTRY_SEED,\n  RECEIPT_MANAGER_ADDRESS,\n  RECEIPT_MANAGER_SEED,\n  REWARD_RECEIPT_SEED,\n} from \".\";\n\n/**\n * Finds the reward receipt manager id.\n * @returns\n */\nexport const findReceiptManagerId = (stakePoolId: PublicKey, name: string) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(RECEIPT_MANAGER_SEED),\n      stakePoolId.toBuffer(),\n      utils.bytes.utf8.encode(name),\n    ],\n    RECEIPT_MANAGER_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the reward receipt manager id.\n * @returns\n */\nexport const findReceiptEntryId = (stakeEntry: PublicKey) => {\n  return PublicKey.findProgramAddressSync(\n    [utils.bytes.utf8.encode(RECEIPT_ENTRY_SEED), stakeEntry.toBuffer()],\n    RECEIPT_MANAGER_ADDRESS\n  )[0];\n};\n\n/**\n * Finds the reward receipt id.\n * @returns\n */\nexport const findRewardReceiptId = (\n  receiptManager: PublicKey,\n  receiptEntry: PublicKey\n) => {\n  return PublicKey.findProgramAddressSync(\n    [\n      utils.bytes.utf8.encode(REWARD_RECEIPT_SEED),\n      receiptManager.toBuffer(),\n      receiptEntry.toBuffer(),\n    ],\n    RECEIPT_MANAGER_ADDRESS\n  )[0];\n};\n"]}