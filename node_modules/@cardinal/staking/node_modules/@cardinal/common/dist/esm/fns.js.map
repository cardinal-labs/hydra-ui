{"version":3,"file":"fns.js","sourceRoot":"","sources":["../../src/fns.ts"],"names":[],"mappings":";AAEA,SAAS,aAAa,CAAC,GAAY;IACjC,OAAO,CACL,CAAC,CAAC,GAAG;QACL,CAAC,OAAO,GAAG,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,UAAU,CAAC;QACtD,OAAQ,GAA0B,CAAC,IAAI,KAAK,UAAU,CACvD,CAAC;AACJ,CAAC;AAED,SAAS,MAAM,CAAI,EAAkB;IACnC,OAAO,EAAE,CAAC,IAAI,CACZ,CAAC,CAAI,EAAE,EAAE,CAAC,CAAC,EACX,CAAC,GAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAC9D,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,CAAU,EAAc,EAAE;IAChD,OAAO,CAAC,YAAY,KAAK,CAAC;AAC5B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,KAAK,GAAG,CACnB,EAA+C,EACX,EAAE;IACtC,IAAI,aAAa,CAAC,EAAE,CAAC;QAAE,OAAO,MAAM,CAAC,EAAE,CAAC,CAAC;IACzC,IAAI;QACF,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC;QACf,IAAI,aAAa,CAAC,CAAC,CAAC;YAAE,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;QACvC,OAAO,CAAC,CAAC;KACV;IAAC,OAAO,GAAG,EAAE;QACZ,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;KAC/B;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,OAAO,GAAG,CACrB,EAA+C,EAC/C,YAAiC,EACU,EAAE;IAC7C,MAAM,CAAC,GAAG,MAAM,KAAK,CAAI,EAAE,CAAC,CAAC;IAC7B,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE;QACd,YAAY,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;QAChC,OAAO,IAAI,CAAC;KACb;IACD,OAAO,CAAC,CAAC;AACX,CAAC,CAAA,CAAC;AAEF;;;;;GAKG;AACH,MAAM,UAAgB,aAAa,CAAI,EAAgB;;QACrD,IAAI;YACF,OAAO,MAAM,EAAE,EAAE,CAAC;SACnB;QAAC,WAAM;YACN,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CAAA","sourcesContent":["import type { AccountFn } from \"./types\";\n\nfunction isPromiseLike(obj: unknown): obj is PromiseLike<unknown> {\n  return (\n    !!obj &&\n    (typeof obj === \"object\" || typeof obj === \"function\") &&\n    typeof (obj as { then?: unknown }).then === \"function\"\n  );\n}\n\nfunction tryify<T>(fn: PromiseLike<T>): PromiseLike<T | Error> {\n  return fn.then(\n    (v: T) => v,\n    (err: Error) => (isError(err) ? err : new Error(String(err)))\n  );\n}\n\nexport const isError = (e: unknown): e is Error => {\n  return e instanceof Error;\n};\n\n/**\n * Wrap async function in try catch\n * @param p\n * @returns\n */\nexport const tryFn = <T>(\n  fn: PromiseLike<T> | (() => T | PromiseLike<T>)\n): T | Error | PromiseLike<T | Error> => {\n  if (isPromiseLike(fn)) return tryify(fn);\n  try {\n    const v = fn();\n    if (isPromiseLike(v)) return tryify(v);\n    return v;\n  } catch (err) {\n    return new Error(String(err));\n  }\n};\n\nexport const tryNull = async <T>(\n  fn: PromiseLike<T> | (() => T | PromiseLike<T>),\n  errorHandler?: (e: Error) => void\n): Promise<T | null | PromiseLike<T | null>> => {\n  const v = await tryFn<T>(fn);\n  if (isError(v)) {\n    errorHandler && errorHandler(v);\n    return null;\n  }\n  return v;\n};\n\n/**\n * Tries to get account based on function fn\n * Return null if account doesn't exist\n * @param fn\n * @returns\n */\nexport async function tryGetAccount<T>(fn: AccountFn<T>) {\n  try {\n    return await fn();\n  } catch {\n    return null;\n  }\n}\n"]}