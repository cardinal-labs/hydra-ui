{"version":3,"file":"mints.js","sourceRoot":"","sources":["../../src/mints.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Wallet } from \"@coral-xyz/anchor/dist/cjs/provider\";\nimport {\n  createCreateOrUpdateInstruction,\n  PROGRAM_ID as TOKEN_AUTH_RULES_ID,\n} from \"@metaplex-foundation/mpl-token-auth-rules\";\nimport {\n  createCreateInstruction,\n  createMintInstruction,\n  TokenStandard,\n} from \"@metaplex-foundation/mpl-token-metadata\";\nimport { encode } from \"@msgpack/msgpack\";\nimport {\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n  createInitializeMint2Instruction,\n  createMintToInstruction,\n  getAssociatedTokenAddressSync,\n  getMinimumBalanceForRentExemptMint,\n  MINT_SIZE,\n  TOKEN_PROGRAM_ID,\n} from \"@solana/spl-token\";\nimport type {\n  Connection,\n  PublicKey,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\nimport {\n  Keypair,\n  SystemProgram,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  Transaction,\n} from \"@solana/web3.js\";\n\nimport {\n  findMintEditionId,\n  findMintMetadataId,\n  findRuleSetId,\n  findTokenRecordId,\n} from \"./pda\";\nimport { executeTransaction } from \"./transactions\";\n\nexport const createProgrammableAsset = async (\n  connection: Connection,\n  wallet: Wallet,\n  uri = \"uri\"\n): Promise<[PublicKey, PublicKey, PublicKey]> => {\n  const mintKeypair = Keypair.generate();\n  const mintId = mintKeypair.publicKey;\n  const [tx, ata, rulesetId] = createProgrammableAssetTx(\n    mintKeypair.publicKey,\n    wallet.publicKey,\n    uri\n  );\n  await executeTransaction(connection, tx, wallet, { signers: [mintKeypair] });\n  return [ata, mintId, rulesetId];\n};\n\nexport const createProgrammableAssetTx = (\n  mintId: PublicKey,\n  authority: PublicKey,\n  uri = \"uri\"\n): [Transaction, PublicKey, PublicKey] => {\n  const metadataId = findMintMetadataId(mintId);\n  const masterEditionId = findMintEditionId(mintId);\n  const ataId = getAssociatedTokenAddressSync(mintId, authority);\n  const rulesetName = `rs-${Math.floor(Date.now() / 1000)}`;\n  const rulesetId = findRuleSetId(authority, rulesetName);\n  const rulesetIx = createCreateOrUpdateInstruction(\n    {\n      payer: authority,\n      ruleSetPda: rulesetId,\n    },\n    {\n      createOrUpdateArgs: {\n        __kind: \"V1\",\n        serializedRuleSet: encode([\n          1,\n          authority.toBuffer().reduce((acc, i) => {\n            acc.push(i);\n            return acc;\n          }, [] as number[]),\n          rulesetName,\n          {\n            \"Delegate:Staking\": \"Pass\",\n            \"Transfer:WalletToWallet\": \"Pass\",\n            \"Transfer:Owner\": \"Pass\",\n            \"Transfer:Delegate\": \"Pass\",\n            \"Transfer:TransferDelegate\": \"Pass\",\n            \"Delegate:LockedTransfer\": \"Pass\",\n          },\n        ]),\n      },\n    }\n  );\n  const createIx = createCreateInstruction(\n    {\n      metadata: metadataId,\n      masterEdition: masterEditionId,\n      mint: mintId,\n      authority: authority,\n      payer: authority,\n      splTokenProgram: TOKEN_PROGRAM_ID,\n      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n      updateAuthority: authority,\n    },\n    {\n      createArgs: {\n        __kind: \"V1\",\n        assetData: {\n          name: `NFT - ${Math.floor(Date.now() / 1000)}`,\n          symbol: \"PNF\",\n          uri: uri,\n          sellerFeeBasisPoints: 0,\n          creators: [\n            {\n              address: authority,\n              share: 100,\n              verified: false,\n            },\n          ],\n          primarySaleHappened: false,\n          isMutable: true,\n          tokenStandard: TokenStandard.ProgrammableNonFungible,\n          collection: null,\n          uses: null,\n          collectionDetails: null,\n          ruleSet: rulesetId,\n        },\n        decimals: 0,\n        printSupply: { __kind: \"Zero\" },\n      },\n    }\n  );\n  const createIxWithSigner = {\n    ...createIx,\n    keys: createIx.keys.map((k) =>\n      k.pubkey.toString() === mintId.toString() ? { ...k, isSigner: true } : k\n    ),\n  };\n  const mintIx = createMintInstruction(\n    {\n      token: ataId,\n      tokenOwner: authority,\n      metadata: metadataId,\n      masterEdition: masterEditionId,\n      tokenRecord: findTokenRecordId(mintId, ataId),\n      mint: mintId,\n      payer: authority,\n      authority: authority,\n      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n      splAtaProgram: ASSOCIATED_TOKEN_PROGRAM_ID,\n      splTokenProgram: TOKEN_PROGRAM_ID,\n      authorizationRules: rulesetId,\n      authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n    },\n    {\n      mintArgs: {\n        __kind: \"V1\",\n        amount: 1,\n        authorizationData: null,\n      },\n    }\n  );\n  return [\n    new Transaction().add(rulesetIx, createIxWithSigner, mintIx),\n    ataId,\n    rulesetId,\n  ];\n};\n\n/**\n * Build and execute mint Tx\n * @param connection\n * @param wallet\n * @param config\n * @returns\n */\nexport const createMint = async (\n  connection: Connection,\n  wallet: Wallet,\n  config?: MintConfig\n): Promise<[PublicKey, PublicKey]> => {\n  const mintKeypair = Keypair.generate();\n  const mintId = mintKeypair.publicKey;\n  const [tx, ata] = await createMintTx(\n    connection,\n    mintKeypair.publicKey,\n    wallet.publicKey,\n    config\n  );\n  await executeTransaction(connection, tx, wallet, { signers: [mintKeypair] });\n  return [ata, mintId];\n};\n\nexport type MintConfig = {\n  target?: PublicKey;\n  amount?: number;\n  decimals?: number;\n};\n\n/**\n * Transaction for creating a mint\n * @param connection\n * @param mintId\n * @param authority\n * @param config\n * @returns\n */\nexport const createMintTx = async (\n  connection: Connection,\n  mintId: PublicKey,\n  authority: PublicKey,\n  config?: MintConfig\n): Promise<[Transaction, PublicKey]> => {\n  const [ixs, ata] = await createMintIxs(connection, mintId, authority, config);\n  const tx = new Transaction().add(...ixs);\n  return [tx, ata];\n};\n\n/**\n * Instructions for creating a mint\n * @param connection\n * @param mintId\n * @param authority\n * @param config\n * @returns\n */\nexport const createMintIxs = async (\n  connection: Connection,\n  mintId: PublicKey,\n  authority: PublicKey,\n  config?: MintConfig\n): Promise<[TransactionInstruction[], PublicKey]> => {\n  const target = config?.target ?? authority;\n  const ata = getAssociatedTokenAddressSync(mintId, target, true);\n  return [\n    [\n      SystemProgram.createAccount({\n        fromPubkey: authority,\n        newAccountPubkey: mintId,\n        space: MINT_SIZE,\n        lamports: await getMinimumBalanceForRentExemptMint(connection),\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      createInitializeMint2Instruction(\n        mintId,\n        config?.decimals ?? 0,\n        authority,\n        authority\n      ),\n      createAssociatedTokenAccountInstruction(authority, ata, target, mintId),\n      createMintToInstruction(mintId, ata, authority, config?.amount ?? 1),\n    ],\n    ata,\n  ];\n};\n"]}